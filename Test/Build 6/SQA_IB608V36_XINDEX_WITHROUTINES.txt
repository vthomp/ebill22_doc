VISTAG1:VISTA>D ^XINDEX         


                   V. A.  C R O S S  R E F E R E N C E R  7.3
                       [2008 VA Standards & Conventions]
                  UCI: VISTA CPU: ROU    Mar 20, 2019@15:10:13

All Routines? No => No

Routine: 
0 routines

Select BUILD NAME:    IB*2.0*608     INTEGRATED BILLING

Include the compiled template routines: N//

Print more than compiled errors and warnings? YES//

Print summary only? NO//

Print routines? YES//

Print (R)egular,(S)tructured or (B)oth?  R//

Print the DDs, Functions, and Options? YES//

Print errors and warnings with each routine? YES//

Save parameters in ROUTINE file? NO//

Index all called routines? NO//
DEVICE: ;132;9999999999999999999999  HOME  (CRT)


                                             V. A.  C R O S S  R E F E R E N C E R  7.3
                                                 [2008 VA Standards & Conventions]
                                            UCI: VISTA CPU: ROU    Mar 20, 2019@15:10:13

The BUILD file Data Dictionaries are being processed.

36 INSURANCE COMPANY
350.8 IB ERROR.......
350.916 CMN CPT CODES
350.928 NON-MCCF RATE TYPES FOR PTP
350.929 TRICARE PAY-TO PROVIDERS
364.5 IB DATA ELEMENT DEFINITION..........
364.53 DESCRIPTION..
364.6 IB FORM SKELETON DEFINITION.............
364.7 IB FORM FIELD CONTENT...........
364.73 FORMAT CODE DESCRIPTION..
399.0304 PROCEDURES
399.6 CMN FORM TYPES....
The option and function files are being processed.


Routines are being processed.
Routines: 33  Faux Routines: 12

IBCBB1    IBCBB12   IBCBB13   IBCCC2    IBCE837B  IBCEF11   IBCEF2    IBCEF22   IBCEF31   IBCEFG7   IBCEPTC2  IBCEPTC3  IBCEU     
IBCEU1    IBCEU3    IBCEU5    IBCF23A   IBCNSC01  IBCU7     IBCU75    IBJPS     IBJPS2    IBJPS3    IBJPS4    IBJPS7    IBJPS8    
IBTUBO    IBTUBO3   IBTUBOA   IBTUBOU   IBTUBUL   IBY608PO  IBY608PR  

          Data Dictionaries
|dd350.8       |dd350.916     |dd350.928     |dd350.929     |dd36          |dd364.5       |dd364.53      |dd364.6       
|dd364.7       |dd364.73      |dd399.0304    |dd399.6       

--- CROSS REFERENCING ---


Compiled list of Errors and Warnings                                                                  Mar 20, 2019@15:10:13 page 1
No errors or warnings to report


--- Routine Detail   --- with REGULAR ROUTINE LISTING ---

IBCBB1   * *  315 Lines,  14855 Bytes, Checksum: B130250613                                           Mar 20, 2019@15:10:13 page 2
              4246 bytes in comments
IBCBB1   ;ALB/AAS - CONTINUATION OF EDIT CHECK ROUTINE ;2-NOV-89
         ;;2.0;INTEGRATED BILLING;**27,52,80,93,106,51,151,148,153,137,232,280,155,320,343,349,363,371,395,384,432,447,488,554,577,5
          92,608**;21-MAR-94;Build 88
         ;Per VA Directive 6402, this routine should not be modified.
         ;
         ; *** Begin IB*2.0*488 VD  (Issue 46 RBN)
         N I
         S I=""
         S X=+$G(^DGCR(399,IBIFN,"MP"))
         I 'X,$$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IBIFN)) S X=+$$CURR^IBCEF2(IBIFN)
         ;JWS;IB*2.0*592:US1108 - Dental form check
         I X,+$G(^DIC(36,X,3)) S I=$P(^(3),U,$S($$FT^IBCEF(IBIFN)=2:2,$$FT^IBCEF(IBIFN)=7:15,1:4))
         S I=$$UP^XLFSTR(I)
         I (I'=""&(I["PRNT")&($G(IBER)'["IB488")) D 
         . S IBER=$G(IBER)_"IB488;"
         ;
         ; Cause an error if FORCED TO PRINT TO CLEARINGHOUSE
         I $P($G(^DGCR(399,IBIFN,"TX")),U,8)=2 D
         . S IBER=$G(IBER)_"IB489;"
         ;
         ; Cause a fatal error if the claim has no procedures & is NOT a UB-04 Inpatient claim.
         I +$O(^DGCR(399,IBIFN,"CP",0))=0 D
         .I $$INPAT^IBCEF(IBIFN,1),$$INSPRF^IBCEF(IBIFN) Q   ; inpatient UB-04 check
         .I '$$INPAT^IBCEF(IBIFN,1),$$INSPRF^IBCEF(IBIFN) D  Q      ; Outpatient Institutional Claim.
         ..I IBER["IB352" Q
         ..S IBER=IBER_"IB352;"
         .;
         .; Professional claim
         .I IBER["IB353" Q
         .S IBER=IBER_"IB353;"
         .Q
         ; *** End IB*2.0*488 -- VD
         ;
         ;MAP TO DGCRBB1
         ;
%        ;Bill Status
         N Z,Z0,Z1,IBFT
         I $S(+IBST=0:1,1:"^1^2^3^4^7^"'[(U_IBST_U)) S IBER=IBER_"IB045;"
         ;
         ;Statement Covers From
         I IBFDT="" S IBER=IBER_"IB061;"
         I IBFDT]"",IBFDT'?7N&(IBFDT'?7N1".".N) S IBER=IBER_"IB061;"
         I IBFDT>IBTDT S IBER=IBER_"IB061;" ; from must be on or before the to date 
         S IBFFY=$$FY^IBOUTL(IBFDT)
         ; if inpat - from date must not be prior to admit date.
         I $$INPAT^IBCEF(IBIFN,1),(IBFDT<($P($G(^DGPT(+$P(IBND0,U,8),0)),U,2)\1))  S IBER=IBER_"IB061;"
         ;
         ;Statement Covers To
         I IBTDT="" S IBER=IBER_"IB062;"
         I IBTDT]"",IBTDT'?7N&(IBTDT'?7N1".".N) S IBER=IBER_"IB062;"
         I IBTDT>DT!(IBTDT<IBFDT) S IBER=IBER_"IB062;"  ; to date must not be >than today's date
         S IBTFY=$$FY^IBOUTL(IBTDT)
         ;
         ;Total Charges
         ; IB*2.0*447/TAZ Removed this error so that zero dollar revenue codes can process on the 837
         ;I +IBTC'>0!(+IBTC'=IBTC) S IBER=IBER_"IB064;"
         ;
         ;Billable charges for secondary claim
         I $$MCRONBIL^IBEFUNC(IBIFN)&(($P(IBNDU1,U,1)-$P(IBNDU1,U,2))'>0) S IBER=IBER_"IB094;"
         ;Fiscal Year 1
         S IBFFY=$$FY^IBOUTL(IBFDT)
         ;
         ;Check provider link for current user, enterer, reviewer and Authorizor
         I '$D(^VA(200,DUZ,0)) S IBER=IBER_"IB048;"
         I IBEU]"",'$D(^VA(200,IBEU,0)) S IBER=IBER_"IB048;"
         I IBRU]"",'$D(^VA(200,IBRU,0)) S IBER=IBER_"IB060;"
         I IBAU]"",'$D(^VA(200,IBAU,0)) S IBER=IBER_"IB041;"
         ;
         I IBER="",+$$STA^PRCAFN(IBIFN)=104 S IBER=IBER_"IB040;"
         ; If ins bill, must have valid COB sequence
         I $P(IBND0,U,11)="i",$S($P(IBND0,U,21)="":1,1:"PST"'[$P(IBND0,U,21)) S IBER=IBER_"IB324;"
         ;
         ; Check for valid sec provider id for current ins
         S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"PRV",Z)) Q:'Z  S Z0=$G(^(Z,0)),Z1=+$$COBN^IBCEF(IBIFN) I $P(Z0,U,4+Z1)'="",$P(Z0,U,11+Z1)'
          ="" D
         . I '$$SECIDCK^IBCEF74(IBIFN,Z1,$P(Z0,U,11+Z1),Z) D WARN^IBCBB11("Prov secondary id type for the "_$P("PRIMARY^SECONDARY^TE
          RTIARY",U,Z1)_" "_$$EXTERNAL^DILFD(399.0222,.01,,+Z0)_" is invalid/won't transmit")
         ; Check NPIs
         D NPICHK^IBCBB11
         ;
         ; Check multiple rx NPIs
         D RXNPI^IBCBB11(IBIFN)
         ;
         ; Check taxonomies
         D TAXCHK^IBCBB11
         ;
         ; Check for Physician Name
         K IBXDATA D F^IBCEF("N-ATT/REND PHYSICIAN NAME",,,IBIFN)
         ; IB*2.0*432 - CMS1500 no longer needs a claim level rendering
         S IBFT=$$FT^IBCEF(IBIFN)
         ;JWS;IB*2.0*592:US1108 - Dental form check
         I IBFT'=2,IBFT'=7,$P($G(IBXDATA),U)="" S IBER=IBER_"IB303;"
         ;
         N FUNCTION,IBINS
         ; IB*2.0*432 - CMS1500 no longer needs a claim level rendering
         ;S FUNCTION=$S($$FT^IBCEF(IBIFN)=3:4,1:3)
         S FUNCTION=$S(IBFT=3:4,1:3)
         ;JWS;IB*2.0*592:US1108 - Dental form check
         I IBFT'=2,IBFT'=7,IBER'["IB303;" D
         . F IBINS=1:1:3 D
         .. S Z=$$GETTYP^IBCEP2A(IBIFN,IBINS)
         .. I Z,$P(Z,U,2) D  ; Rendering/attending prov secondary id required
         ... N IBID,IBOK,Q0
         ... D PROVINF^IBCEF74(IBIFN,IBINS,.IBID,1,"C")  ; check all as though they were current
         ... S IBOK=0
         ... S Q0=0 F  S Q0=$O(IBID(1,FUNCTION,Q0)) Q:'Q0  I $P(IBID(1,FUNCTION,Q0),U,9)=+Z S IBOK=1 Q
         ... I 'IBOK S IBER=IBER_$S(IBINS=1:"IB236;",IBINS=2:"IB237;",IBINS=3:"IB238;",1:"")
         ;
         ; Patch 432 enh5:The IB system shall no longer prevent users from authorizing(fatal error message)a claim because the syste
          m cannot find the providersSSNorEIN
         ; D PRIIDCHK^IBCBB11
         ;
         N IBM,IBM1
         S IBM=$G(^DGCR(399,IBIFN,"M"))
         S IBM1=$G(^DGCR(399,IBIFN,"M1"))
         I $P(IBM,U),$P($G(^DIC(36,$P(IBM,U),4)),U,6),$P(IBM1,U,2)="" S IBER=IBER_"IB244;"
         I $P(IBM,U,2),$P($G(^DIC(36,$P(IBM,U,2),4)),U,6),$P(IBM1,U,3)="" S IBER=IBER_"IB245;"
         I $P(IBM,U,3),$P($G(^DIC(36,$P(IBM,U,3),4)),U,6),$P(IBM1,U,4)="" S IBER=IBER_"IB246;"
         ;
         ; If outside facility, check for ID and qualifier in 355.93
         ; 5/15/06 - esg - hard error IB243 turned into warning message instead
         S Z=$P($G(^DGCR(399,IBIFN,"U2")),U,10)
         I Z D
         . I $P($G(^IBA(355.93,Z,0)),U,9)=""!($P($G(^IBA(355.93,Z,0)),U,13)="") D
         .. N Z1,Z2
         .. S Z1="Missing Lab or Facility Primary ID for non-VA facility, "
         .. S Z2=$$EXTERNAL^DILFD(399,232,,Z)
         .. I $L(Z2)'>19 D WARN^IBCBB11(Z1_Z2) Q
         .. D WARN^IBCBB11(Z1),WARN^IBCBB11("     "_Z2)
         .. Q
         . Q
         ;
         ; Must be one and only one division on bill
         S IBZ=$$MULTDIV^IBCBB11(IBIFN,IBND0)
         ; I IBZ S IBER=IBER_$S(IBZ=1:"IB095;",IBZ=2:"IB104;",1:"IB105;")
         ; Allow multi-divisional for OP instutional claims
         I IBZ,$$INPAT^IBCEF(IBIFN)!'($$INSPRF^IBCEF(IBIFN)) S IBER=IBER_$S(IBZ=1:"IB095;",IBZ=2:"IB104;",1:"IB105;")
         ; Still need error msg on OP Institutional if No Default division
         I IBZ=3,'$$INPAT^IBCEF(IBIFN),$$INSPRF^IBCEF(IBIFN) S IBER=IBER_"IB105;"
         ; Division address must be defined in institution file
         I $P(IBND0,U,22) D
         . N Z,Z0,Z1
         . S Z0=$G(^DIC(4,+$P($G(^DG(40.8,+$P(IBND0,U,22),0)),U,7),0))
         . S Z1=$G(^DIC(4,+$P($G(^DG(40.8,+$P(IBND0,U,22),0)),U,7),1))
         . I $P(Z0,U,2)="" S IBER=IBER_"IB097;" Q
         . F Z=1,3,4 I $P(Z1,U,Z)="" S IBER=IBER_"IB097;" Q
         ;
         ; IB*2.0*432 Check ambulance addresses, COB Non-covered amt. & Attachment Control
         I $$AMBCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB329;"
         I $$COBAMT^IBCBB11(IBIFN)=1 S IBER=IBER_"IB330;"
         I $$TMCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB331;"
         I $$ACCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB332;"
         I $$COBMRA^IBCBB11(IBIFN)=1 S IBER=IBER_"IB342;"
         I $$COBSEC^IBCBB11(IBIFN)=1 S IBER=IBER_"IB343;"
         ;
         ;CHAMPVA Rate Type and Primary Insurance Carriers Type of Coverage must match
         S (IBRTCHV,IBPICHV)=0
         I $P($G(^DGCR(399.3,+IBAT,0)),U,1)="CHAMPVA" S IBRTCHV=1
         I $P($G(^IBE(355.2,+$P($G(^DIC(36,+IBNDMP,0)),U,13),0)),U,1)="CHAMPVA" S IBPICHV=1
         I (+IBRTCHV!+IBPICHV)&('IBRTCHV!'IBPICHV) S IBER=IBER_"IB085;"
         ;
         ;Non-VA bill must use FEE REIMB INS rate type; FEE REIMB INS rate type can only be used for Non-VA bill
         ;IB*2.0*554/DRF 10/9/2015
         ;N IBNVART,IBNVAST
         ;S (IBNVART,IBNVAST)=0
         ;I $P($G(^DGCR(399.3,+IBAT,0)),U,1)="FEE REIMB INS" S IBNVART=1
         ;S IBNVAST=$$NONVAFLG(IBIFN)
         ;I IBNVART,'IBNVAST S IBER=IBER_"IB360;"  ;Non-VA rate type used for bill that is not Non-VA
         ;I 'IBNVART,IBNVAST S IBER=IBER_"IB361;"  ;Non-VA rate type not used for bill that is Non-VA
         ;
         N IBZPRC,IBZPRCUB
         D F^IBCEF("N-ALL PROCEDURES","IBZPRC",,IBIFN)
         ; Procedure Clinic is required for Surgical Procedures Outpt Facility Charges
         I +$P(IBND0,U,27)'=2,$$BILLRATE^IBCRU3(IBAT,IBCL,IBEVDT,"RC OUTPATIENT") D
         . N Z,Z0,Z1,ZE S (ZE,Z)=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  D  I +ZE S IBER=IBER_"IB320;" Q
         .. S Z0=$G(^DGCR(399,IBIFN,"CP",Z,0)),Z1=+Z0 I Z0'[";ICPT(" Q
         .. I '((Z1'<10000)&(Z1'>69999))&'((Z1'<93501)&(Z1'>93533)) Q
         .. I '$P(Z0,U,7) S ZE=1
         ;
         ; Extract procedures for UB-04
         D F^IBCEF("N-UB-04 PROCEDURES","IBZPRCUB",,IBIFN)
         ; Does this bill have ANY prescriptions associated with it?
         ; Must bill prescriptions separately from other charges
         ;
         ; DEM;432 - Call line level provider edit checks.
         D LNPROV^IBCBB12(IBIFN)  ; DEM;432 - If there are line provider edits, then routine LNPROV^IBCBB12(IBIFN) updates IBER stri
          ng.
         ; DEM;432 - Call to Other Operating/Operating Provider edit checks.
         I $$OPPROVCK^IBCBB12(IBIFN)=1 S IBER=IBER_"IB337;"  ; DEM;432
         ; DEM;432 - Line level Attachment Control edits.
         I $$LNTMCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB331;"  ; DEM;432
         I $$LNACCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB332;"  ; DEM;432
         ;
         ; vd/Beginning of IB*2*577 - Validate Line Level NDC edits.
         I $$LNNDCCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB365;"  ;IB*2*577;JWS;11/20/17 FIX
         ; vd/End of IB*2*577
         I $$ISRX^IBCEF1(IBIFN) D
         . N IBZ,IBRXDEF
         . S IBRXDEF=$P($G(^IBE(350.9,1,1)),U,30),IBZ=0
         . F  S IBZ=$O(IBZPRCUB(IBZ)) Q:'IBZ  I IBZPRCUB(IBZ),+$P(IBZPRCUB(IBZ),U)'=IBRXDEF S IBER=IBER_"IB102;" Q
         . K IBZ
         ;
         ; Check that COB sequences are not skipped
         K Z
         F Z=1:1:3 S:+$G(^DGCR(399,IBIFN,"I"_Z)) Z(Z)=""
         F Z=0:1:2 S Z0=$O(Z(Z)) Q:'Z0  I Z0'=(Z+1) S IBER=IBER_"IB322;" Q
         K Z
         ; HD64676  IB*2*371 - OK for payer sequence to be blank when the Rate
         ;    Type is either Interagency or Sharing Agreement
         I $P($G(^DGCR(399,IBIFN,0)),U,21)="",$P($G(^DGCR(399,IBIFN,0)),U,7)'=4,$P($G(^DGCR(399,IBIFN,0)),U,7)'=9 S IBER=IBER_"IB323
          ;"
         K IBXDATA D F^IBCEF("N-PROCEDURE CODING METHD",,,IBIFN)
         ; Coding method should agree with types of procedure codes
         S IBOK=$S('$O(IBZPRC(0))!(IBXDATA=""):1,1:0)
         I 'IBOK S IBOK=1,IBZ=0 F  S IBZ=$O(IBZPRC(IBZ)) Q:'IBZ  I IBZPRC(IBZ),$P(IBZPRC(IBZ),U)'[$S(IBXDATA=9:"ICD",1:"ICP") S IBOK
          =0 Q
         I 'IBOK D WARN^IBCBB11("Coding Method does not agree with all procedure codes found on bill")
         D EDITMRA^IBCBB3(.IBQUIT,.IBER,IBIFN,IBFT)
         Q:$G(IBQUIT)
         ;
         ;Other things that could be added:  Rev Code - calculating charges
         ;        Diagnosis Coding, if MT copay - check for other co-payments
         ;
         I $P(IBNDTX,U,8),$$REQMRA^IBEFUNC(IBIFN) S IBER=IBER_"IB121;"   ; can't force MRAs to print
         I $P(IBNDTX,U,8)!$P(IBNDTX,U,9) D
         . Q:$P(IBNDTX,U,8)=2    ; Don't want to do this for option 2 any more.
         . D WARN^IBCBB11($S($$REQMRA^IBEFUNC(IBIFN)&($P(IBNDTX,U,9)):"MRA Secondary ",1:"")_"Bill has been forced to print "_$S($P(
          IBNDTX,U,8)=1!($P(IBNDTX,U,9)=1):"locally",1:"at clearinghouse"))
         N IBXZ,IBIZ F IBIZ=12,13,14 S IBXZ=$P(IBNDM,U,IBIZ) I +IBXZ S IBXZ=$P($G(^DPT(DFN,.312,IBXZ,0)),U,18) I +IBXZ S IBXZ=$G(^IB
          A(355.3,+IBXZ,0)) I +$P(IBXZ,U,12) D
         . D WARN^IBCBB11($P($G(^DIC(36,+IBXZ,0)),U,1)_" requires Amb Care Certification")
         ;
         D VALNDC^IBCBB11(IBIFN,DFN)  ;validate NDC#
         ;
         ;Build AR array if no errors and MRA not needed or already rec'd
         I IBER="",$S($$NEEDMRA^IBEFUNC(IBIFN)!($$REQMRA^IBEFUNC(IBIFN)):0,1:1) D ARRAY
         ;
         ;Check ROI
         N ROIERR
         S ROIERR=0 I $P($G(^DGCR(399,IBIFN,"U")),U,5)=1,+$P($G(^DGCR(399,IBIFN,"U")),U,7)=0 S ROIERR=1 ; screen 7 sensitive record 
          and no ROI
         I $$ROICHK^IBCBB11(IBIFN,DFN,+IBNDMP) S ROIERR=1 ; check file for sensitive Rx and missing ROI
         I ROIERR S IBER=IBER_"IB328;"
         ;
         ;Verify Line Charges Match Claim Total Charge. IB*2.0*447 BI
         I +$$GET1^DIQ(399,IBIFN_",",201)'=+$$IBLNTOT^IBCBB13(IBIFN) S IBER=IBER_"IB344;"
         ;
         ;Test for valid EIN/SY ID Values. IB*2.0*447 BI
         I $$IBSYEI^IBCBB13(IBIFN) S IBER=IBER_"IB345;"
         ;
         ;Test for a missing ICN. IB*2.0*447 BI
         I $$IBMICN^IBCBB13(IBIFN) S IBER=IBER_"IB346;"
         ;
         ;Test for a ZERO charge amounts. IB*2.0*447 BI
         I $$IBRCCHK^IBCBB13(IBIFN) D WARN^IBCBB11("Claim contains revenue codes with no associated charges.")
         ;
         ;Test for missing "Patient reason for visit". IB*2.0*447 BI
         I $$FT^IBCEF(IBIFN)=3,'$$INPAT^IBCEF(IBIFN),$$IBPRV3^IBCBB13(IBIFN) S IBER=IBER_"IB347;"
         ;
         ;Test for missing Payer ID. IB*2.0*447 BI
         ;I $$IBMPID^IBCBB13(IBIFN) S IBER=IBER_"IB348;"
         ;Changed Error to Warning. IB*2.0*447 TAZ
         I $$IBMPID^IBCBB13(IBIFN) D WARN^IBCBB11("Not all payers have Payer IDs.")
         ;
         ;Test for missing "Priority (Type) of Admission" for UB-04. IB*2.0*447 BI
         I $$FT^IBCEF(IBIFN)=3,$$GET1^DIQ(399,IBIFN_",",158)="" S IBER=IBER_"IB349;"
         ;
         I $$FT^IBCEF(IBIFN)=2 S IBER=IBER_$$CMNCHK^IBCBB13(IBIFN)  ;JRA;IB*2.0*608 Check for missing CMN info
         ;
END      ;Don't kill IBIFN, IBER, DFN
         I $O(^TMP($J,"BILL-WARN",0)),$G(IBER)="" S IBER="WARN" ;Warnings only
         K IBBNO,IBEVDT,IBLOC,IBCL,IBTF,IBAT,IBWHO,IBST,IBFDT,IBTDT,IBTC,IBFY,IBFY1,IBAU,IBRU,IBEU,IBARTP,IBFYC,IBMRA,IBTOB,IBTOB12,
          IBNDU2,IBNDUF3,IBNDUF31,IBNDTX
         K IBNDS,IBND0,IBNDU,IBNDM,IBNDMP,IBNDU1,IBFFY,IBTFY,IBFT,IBRTCHV,IBPICHV,IBXDATA,IBOK
         I $D(IBER),IBER="" W !,"No Errors found for National edits"
         Q
         ;
ARRAY    ;Build PRCASV(array)
         N IBCOBN,X
         K PRCASV
         Q:$$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IBIFN))
         S IBCOBN=$$COBN^IBCEF(IBIFN)
         S X=IBIFN
         S PRCASV("BDT")=DT,PRCASV("ARREC")=IBIFN
         S PRCASV("APR")=DUZ
         S PRCASV("PAT")=DFN,PRCASV("CAT")=$P(^DGCR(399.3,IBAT,0),"^",6)
         I IBWHO="i" S PRCASV("DEBTOR")=+IBNDMP_";DIC(36,"
         S PRCASV("DEBTOR")=$S(IBWHO="p":DFN_";DPT(",IBWHO="o":$P(IBNDM,"^",11)_";DIC(4,",IBWHO="i":PRCASV("DEBTOR"),1:"")
         S PRCASV("CARE")=$E($$TOB^IBCEF1(IBIFN),1,2)
         S PRCASV("FY")=$$FY^IBOUTL(DT)_U_($P(IBNDU1,U)-$P(IBNDU1,U,2))
         ;S PRCASV("FY")=$P(IBNDU1,U,9)_U_$S($P(IBNDU1,U,2)]"":($P(IBNDU1,U,10)-$P(IBNDU1,U,2)),1:$P(IBNDU1,U,10))_$S($P(IBNDU1,U,11
          )]"":U_$P(IBNDU1,U,11)_U_$P(IBNDU1,U,12),1:"")
PLUS     I IBWHO="i",$P(IBNDM,"^",2),$D(^DIC(36,$P(IBNDM,"^",2),0)) S PRCASV("2NDINS")=$P(IBNDM,"^",2)
         I IBWHO="i",$P(IBNDM,"^",3),$D(^DIC(36,$P(IBNDM,"^",3),0)) S PRCASV("3RDINS")=$P(IBNDM,"^",3)
         ;
         N IBX S IBX=$P(IBND0,U,21),IBX=$S(IBX="P":"I1",IBX="S":"I2",IBX="T":"I3",1:"") Q:IBX=""
         N IBNDI1
         Q:'$D(^DGCR(399,IBIFN,IBX))  S IBNDI1=^(IBX)
         S:$P(IBNDI1,"^",3)]"" PRCASV("GPNO")=$P(IBNDI1,"^",3)
         S:$P(IBNDI1,"^",15)]"" PRCASV("GPNM")=$P(IBNDI1,"^",15)
         S:$P(IBNDI1,"^",17)]"" PRCASV("INPA")=$P(IBNDI1,"^",17)
         S:$P(IBNDI1,"^",2)]"" PRCASV("IDNO")=$P(IBNDI1,"^",2),PRCASV("INID")=PRCASV("IDNO")
         ; Check that this is a secondary or tertiary bill and insurance for previous
         ; COB sequence is Medicare WNR and MRA is active --> send data elements to AR
         I IBCOBN>1,$$WNRBILL^IBEFUNC(IBIFN,IBCOBN-1),$$EDIACTV^IBCEF4(2) D MRA
         Q
         ;
MRA      N IBEOB S IBEOB=0
         ;
         K PRCASV("MEDURE"),PRCASV("MEDCA")
         ; Get EOB data
         F  S IBEOB=$O(^IBM(361.1,"B",IBIFN,IBEOB)) Q:'IBEOB  D
         . D MRACALC^IBCEMU2(IBEOB,IBIFN,1,.PRCASV)
         Q  ;MRA
         ;
         ;; PREGNANCY DX CODES: V22**-V24**, V27**-V28**, 630**-677**
         ;; FLU SHOTS PROCEDURE CODES: 90724, G0008, 90732, G0009
         ;
NONVAFLG(IBIFN) --
          ; Check if Non-VA bill
         ; Function returns 1 if Non-VA bill
         ; IB*2.0*554/DRF 10/9/2015
         N FLAG,PTF
         S FLAG=0
         I $P($G(^DGCR(399,IBIFN,"U2")),U,10)]"" S FLAG=1 ;Non-VA provider defined
         S PTF=$P($G(^DGCR(399,IBIFN,0)),U,8)
         I PTF,$P($G(^DGPT(PTF,0)),U,4)=1 S FLAG=1 ;PTF entry indicates Non-VA
         Q FLAG

*****   INDEX OF IBCBB1   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
>> DFN          %+186,%+189,%+197,ARRAY+8,ARRAY+10
   DT           %+15,ARRAY+6,ARRAY+12
   DUZ          %+28,ARRAY+7
   FLAG         NONVAFLG+3~,NONVAFLG+4*,NONVAFLG+5*,NONVAFLG+7*,NONVAFLG+8
   FUNCTION     %+56~,%+59*,%+68
   I            IBCBB1+5~,IBCBB1+6*,IBCBB1+10*,IBCBB1+11*,IBCBB1+12
   IBARTP       END+2!
   IBAT         %+119,%+135,END+2!,ARRAY+8
   IBAU         %+31,END+2!
   IBBNO        END+2!
   IBCL         %+135,END+2!
   IBCOBN       ARRAY+1~,ARRAY+4*,PLUS+12
   IBEOB        MRA~*,MRA+4*,MRA+5
>> IBER         IBCBB1+12,IBCBB1+13*,IBCBB1+17*,IBCBB1+23,IBCBB1+24*,IBCBB1+27,IBCBB1+28*,%+2*,%+5*,%+6*,%+7*,%+10*,%+13*,%+14*
                %+15*,%+23*,%+28*,%+29*,%+30*,%+31*,%+33*,%+35*,%+54*,%+61,%+69*,%+77*,%+78*,%+79*,%+98*,%+100*,%+106*,%+107*
                %+110*,%+111*
                %+112*,%+113*,%+114*,%+115*,%+121*,%+136*,%+149*,%+151*,%+152*,%+155*,%+160*,%+166*,%+170*,%+176,%+182*,%+192
                %+198*,%+201*,%+204*,%+207*,%+213*,%+221*,%+223*,END+1*,END+4
   IBEU         %+29,END+2!
   IBEVDT       %+135,END+2!
   IBFDT        %+5,%+6,%+7,%+8,%+10,%+15,%+25,END+2!
   IBFFY        %+8*,%+25*,END+3!
   IBFT         %+1~,%+52*,%+54,%+59,%+61,%+176,END+3!
   IBFY         END+2!
   IBFY1        END+2!
   IBFYC        END+2!
   IBID         %+65~,%+66
   IBID(1       %+68
   IBIFN        IBCBB1+7,IBCBB1+8,IBCBB1+10,IBCBB1+16,IBCBB1+20,IBCBB1+21,IBCBB1+22,%+10,%+23,%+33,%+38,%+39,%+44,%+50,%+52,%+63
                %+66,%+75,%+76,%+83,%+95,%+98,%+100,%+110,%+111,%+112,%+113,%+114,%+115,%+133,%+136,%+137,%+142,%+147,%+149,%+151
                %+152
                %+155,%+157,%+165,%+170,%+171,%+176,%+182,%+185,%+189,%+192,%+196,%+197,%+201,%+204,%+207,%+210,%+213,%+218,%+221
                %+223,ARRAY+3,ARRAY+4,ARRAY+5,ARRAY+6,ARRAY+11,PLUS+5,PLUS+12,MRA+4,MRA+5,NONVAFLG~,NONVAFLG+5,NONVAFLG+6
   IBINS        %+56~,%+62*,%+63,%+66,%+69
   IBIZ         %+186~*
   IBLOC        END+2!
   IBM          %+74~,%+75*,%+77,%+78,%+79
   IBM1         %+74~,%+76*,%+77,%+78,%+79
   IBMRA        END+2!
   IBND0        %+10,%+35,%+95,%+102,%+104,%+105,%+135,END+3!,PLUS+3
   IBNDI1       PLUS+4~,PLUS+5*,PLUS+6,PLUS+7,PLUS+8,PLUS+9
   IBNDM        %+186,END+3!,ARRAY+10,PLUS,PLUS+1
   IBNDMP       %+120,%+197,END+3!,ARRAY+9
   IBNDS        END+3!
   IBNDTX       %+182,%+183,%+184,%+185,END+2!
   IBNDU        END+3!
   IBNDU1       %+23,END+3!,ARRAY+12
   IBNDU2       END+2!
   IBNDUF3      END+2!
   IBNDUF31     END+2!
   IBOK         %+65~,%+67*,%+68*,%+69,%+173*,%+174*,%+175,END+3!
   IBPICHV      %+118*,%+120*,%+121,END+3!
>> IBQUIT       %+176,%+177
   IBRTCHV      %+118*,%+119*,%+121,END+3!
   IBRU         %+30,END+2!
   IBRXDEF      %+158~,%+159*,%+160
   IBST         %+2,END+2!
   IBTC         END+2!
   IBTDT        %+7,%+13,%+14,%+15,%+16,END+2!
   IBTF         END+2!
   IBTFY        %+16*,END+3!
   IBTOB        END+2!
   IBTOB12      END+2!
   IBWHO        END+2!,ARRAY+9,ARRAY+10,PLUS,PLUS+1
   IBX          PLUS+3~*,PLUS+5
   IBXDATA      %+50!,%+54,%+171!,%+173,%+174,END+3!
   IBXZ         %+186~*,%+187
   IBZ          %+95*,%+98,%+100,%+158~,%+159*,%+160*,%+161!,%+174*
   IBZPRC       %+132~
   IBZPRC(      %+174
   IBZPRC(0     %+173
   IBZPRCUB     %+132~
   IBZPRCUB(    %+160
   PRCASV       ARRAY+2!,MRA+5
   PRCASV("2NDINS" 
                PLUS*
   PRCASV("3RDINS" 
                PLUS+1*
   PRCASV("APR" ARRAY+7*
   PRCASV("ARREC" 
                ARRAY+6*
   PRCASV("BDT" ARRAY+6*
   PRCASV("CARE" 
                ARRAY+11*
   PRCASV("CAT" ARRAY+8*
   PRCASV("DEBTOR" 
                ARRAY+9*,ARRAY+10*
   PRCASV("FY"  ARRAY+12*
   PRCASV("GPNM" 
                PLUS+7*
   PRCASV("GPNO" 
                PLUS+6*
   PRCASV("IDNO" 
                PLUS+9*
   PRCASV("INID" 
                PLUS+9*
   PRCASV("INPA" 
                PLUS+8*
   PRCASV("MEDCA" 
                MRA+2!
   PRCASV("MEDURE" 
                MRA+2!
   PRCASV("PAT" ARRAY+8*
   PTF          NONVAFLG+3~,NONVAFLG+6*,NONVAFLG+7
   Q0           %+65~,%+68*
   ROIERR       %+195~,%+196*,%+197*,%+198
   U            IBCBB1+10,IBCBB1+16,%+2,%+10,%+23,%+35,%+38,%+39,%+54,%+64,%+68,%+77,%+78,%+79,%+83,%+85,%+102,%+104,%+105,%+106
                %+107,%+119,%+120,%+135,%+139,%+159,%+160,%+170,%+174,%+182,%+183,%+184,%+185,%+186,%+187,%+196,ARRAY+12,PLUS+3
                NONVAFLG+5
                NONVAFLG+6,NONVAFLG+7
   X            IBCBB1+7*,IBCBB1+8*,IBCBB1+10,ARRAY+1~,ARRAY+5*
   Z            %+1~,%+38*,%+39,%+63*,%+64,%+68,%+83*,%+84,%+85,%+88,%+103~,%+107*,%+136~*,%+137,%+164!,%+165*,%+166*,%+167!
   Z(           %+165*,%+166
   Z0           %+1~,%+38*,%+39,%+103~,%+104*,%+106,%+136~,%+137*,%+139,%+166*
   Z1           %+1~,%+38*,%+39,%+86~,%+87*,%+89,%+90,%+103~,%+105*,%+107,%+136~,%+137*,%+138
   Z2           %+86~,%+88*,%+89,%+90
   ZE           %+136~*,%+139*

Global Variables  ( * Changed  ! Killed)
   ^DG(40.8            %+104,%+105
   ^DGCR(399           IBCBB1+7,IBCBB1+16,IBCBB1+20,%+38,%+75,%+76,%+83,%+136,%+137,%+165,%+170,%+196,PLUS+5,NONVAFLG+5,NONVAFLG+6
   ^DGCR(399.3         %+119,ARRAY+8
   ^DGPT(              %+10,NONVAFLG+7
   ^DIC(36             IBCBB1+10,%+77,%+78,%+79,%+120,%+187,PLUS,PLUS+1
   ^DIC(4              %+104,%+105
   ^DPT(               %+186
   ^IBA(355.3          %+186
   ^IBA(355.93         %+85
   ^IBE(350.9          %+159
   ^IBE(355.2          %+120
   ^IBM(361.1          MRA+4
   ^TMP($J             END+1
   ^VA(200             %+28,%+29,%+30,%+31

Naked Globals
   ^(           %+38,PLUS+5
   ^(3          IBCBB1+10

Cache Objects
   NONE

Marked Items
   NONE

Label References
   ARRAY        %+192
   MRA          PLUS+12

External References
   $$EXTERNAL^DILFD    %+39,%+88
   $$GET1^DIQ          %+201,%+221
   $$ACCK^IBCBB11      %+113
   $$AMBCK^IBCBB11     %+110
   $$COBAMT^IBCBB11    %+111
   $$COBMRA^IBCBB11    %+114
   $$COBSEC^IBCBB11    %+115
   $$LNACCK^IBCBB11    %+152
   $$LNNDCCK^IBCBB11   %+155
   $$LNTMCK^IBCBB11    %+151
   $$MULTDIV^IBCBB11   %+95
   $$ROICHK^IBCBB11    %+197
   $$TMCK^IBCBB11      %+112
   NPICHK^IBCBB11      %+41
   RXNPI^IBCBB11       %+44
   TAXCHK^IBCBB11      %+47
   VALNDC^IBCBB11      %+189
   WARN^IBCBB11        %+39,%+89,%+90,%+175,%+185,%+187,%+210,%+218
   $$OPPROVCK^IBCBB12  %+149
   LNPROV^IBCBB12      %+147
   $$CMNCHK^IBCBB13    %+223
   $$IBLNTOT^IBCBB13   %+201
   $$IBMICN^IBCBB13    %+207
   $$IBMPID^IBCBB13    %+218
   $$IBPRV3^IBCBB13    %+213
   $$IBRCCHK^IBCBB13   %+210
   $$IBSYEI^IBCBB13    %+204
   EDITMRA^IBCBB3      %+176
   $$COBN^IBCEF        %+38,ARRAY+4
   $$FT^IBCEF          IBCBB1+10,%+52,%+213,%+221,%+223
   $$INPAT^IBCEF       IBCBB1+21,IBCBB1+22,%+10,%+98,%+100,%+213
   $$INSPRF^IBCEF      IBCBB1+21,IBCBB1+22,%+98,%+100
   F^IBCEF             %+50,%+133,%+142,%+171
   $$ISRX^IBCEF1       %+157
   $$TOB^IBCEF1        ARRAY+11
   $$CURR^IBCEF2       IBCBB1+8,ARRAY+3
   $$EDIACTV^IBCEF4    PLUS+12
   $$SECIDCK^IBCEF74   %+39
   PROVINF^IBCEF74     %+66
   MRACALC^IBCEMU2     MRA+5
   $$GETTYP^IBCEP2A    %+63
   $$BILLRATE^IBCRU3   %+135
   $$MCRONBIL^IBEFUNC  %+23
   $$MCRWNR^IBEFUNC    IBCBB1+8,ARRAY+3
   $$NEEDMRA^IBEFUNC   %+192
   $$REQMRA^IBEFUNC    %+182,%+185,%+192
   $$WNRBILL^IBEFUNC   PLUS+12
   $$FY^IBOUTL         %+8,%+16,%+25,ARRAY+12
   $$STA^PRCAFN        %+33
   $$UP^XLFSTR         IBCBB1+11

*****   END   *****


IBCBB12  * *  337 Lines,  16662 Bytes, Checksum: B140177880                                           Mar 20, 2019@15:10:13 page 3
              7631 bytes in comments
IBCBB12  ;ALB/DEM - PROCEDURE AND LINE LEVEL PROVIDER EDITS ;17-OCT-2010
         ;;2.0;INTEGRATED BILLING;**432,592,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         Q
         ;
LNPROV(IBIFN) --
          ; DEM;432 - Edits for line level providers.
         ;
         ; Input:
         ;       IBIFN - Claim number IEN.
         ;
         ; Output:
         ;       OK - '1' Edits
         ;            '0' No Edits.
         ;       *Note: OK returned if called as function.
         ;              Can be called as routine as well.
         ;       IBER - Edit error string. Only updated if errors.
         ;
         ; Patch 432 EDITS:
         ;
         ; (1) Not all procedures have a Line Level Rendering Provider,
         ;     and no Claim Level Rendering Provider.
         ;     Error Message in Billing for Prof Rendering.
         ;     *Note: Only applies to Rendering Provider Type.
         ;
         ; (2) All procedures have a Line Level Rendering Provider,
         ;     and a Claim Level Rendering Provider who is different
         ;     from any of the Line Level Rendering Providers.
         ;     Error in Billing.
         ;     *Note: Apply to all provider types (Rendering, Referring, Supervising, Attending, Operating, and Other Operating).
         ;
         N OK
         S OK=0  ; Initialize OK=0 for FALSE.
         Q:'$G(IBIFN) OK  ; Need claim number IEN to continue.
         N IBPRVFUN,IBCLPRV,IBLNPRV,PRVFUN
         S:'$G(IBFT) IBFT=$$FT^IBCEF(IBIFN)  ; Form Type for claim.
         ; JWS;IB*2.0*592 US1108 - Dental form check
         I IBFT'=2,IBFT'=3,IBFT'=7 Q OK  ; Must be CMS-1500 (2) or UB-04 (3) or (7) Dental J430D Form Type.
         S:IBFT=2 PRVFUN(2)="RENDERING,REFERRING,SUPERVISING"  ; Allowable line provider functions for CMS-1500.
         S:IBFT=3 PRVFUN(3)="RENDERING,REFERRING,OPERATING,OTHER OPERATING"  ; Allowable line provider functions for UB-04.
         S:IBFT=7 PRVFUN(7)="RENDERING,REFERRING,SUPERVISING,ASSISTANT SURGEON"  ; Allowable line provider functions for Dental form
           J430D.
         ; JWS;IB*2.0*592 US1108 - end
         F PRVFUN("CNT")=1:1:$L(PRVFUN(IBFT),",") S IBPRVFUN=$P(PRVFUN(IBFT),",",PRVFUN("CNT")) D
         . I IBFT=2,IBPRVFUN="RENDERING",'$$LNPRV2(IBPRVFUN),'$D(^DGCR(399,IBIFN,"PRV","C",IBPRVFUN)) D  Q  ; Edit Check (1).
         .. ;
         .. ;/Beginning of IB*2.0*608 - vd (US3214)
         .. ; Changed the following from and error to a warning.
         .. ;S OK=1  ; OK=1 indicates we have at least one error.
         .. ;S IBER=IBER_"IB333;"
         .. D WARN^IBCBB11("Claim has no Rendering Providers present.")
         .. ;/Ending of IB*2.0*608 - vd (US3214)
         .. Q
         . Q:'$$LNPRV2(IBPRVFUN,.IBLNPRV)  ; Quit if not all the procedures have a line level provider of the same provider type.
         . Q:'$D(^DGCR(399,IBIFN,"PRV","C",IBPRVFUN))  ; No claim level provider for this provider type.
         . ;
         . Q:'$$CLPRV2(IBPRVFUN,.IBCLPRV)  ; Must have provider for provider type IBPRVFUN to continue (Edit (2)).
         . ;
         . S IBCLPRV=0 F  S IBCLPRV=$O(IBCLPRV(IBPRVFUN,IBCLPRV)) Q:'IBCLPRV  D  ; Edit Check (2).
         .. Q:$D(IBLNPRV(IBPRVFUN,IBCLPRV))  ; Check against line provider array IBLNPRV.
         .. S OK=1
         .. S IBER=IBER_$S(IBPRVFUN="ASSISTANT SURGEON":"IB335;",1:"IB334;")
         .. Q
         . Q
         ;
         Q OK
         ;
LNPRV2(IBPRVFUN,IBLNPRV) --
          ; Function - Edit Check (2) for line level provider.
         ; See Edit Check (2) at top of routine for details.
         ;
         ; Input:
         ;       IBPRVFUN - Provider Type (FUNCTION). Example: RENDERING.
         ;       IBLNPRV(Array) - Passed by reference. Intially undefined.
         ;
         ; Output:
         ;       OK - If Edit Check (2) line level provider condition has
         ;            been met, then OK will return '1' for TRUE, ELSE, '0'
         ;            for FALSE.
         ;            *See Edit Check (2) at top of routine for details.
         ;       IBLNPRV(Array) - If Edit Check (2) condition has been met,
         ;                        then IBLNPRV will contain the provider type,
         ;                        and provider variable pointer as array
         ;                        subscripts, and array element is SET to
         ;                        NULL. => IBLNPRV(IBPRVFUN,IBLNPROV)="".
         ;
         N OK,IBPROCP,IBLPIEN,IBLNPROV
         S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  I $D(OK),'OK Q
         . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)
         . I '$D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","C",IBPRVFUN)) S OK=0 Q  ; No line provider function for this procedure.
         . S IBLPIEN=$O(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","C",IBPRVFUN,0))
         . I 'IBLPIEN S OK=0 Q  ; No line provider IEN for this line provider function.
         . I '($D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBLPIEN,0))#10) S OK=0 Q  ; No zero node for line level provider.
         . S IBLNPROV=$P(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBLPIEN,0),"^",2)
         . I 'IBLNPROV S OK=0 Q  ; No line provider for this line provider function.
         . S IBLNPRV(IBPRVFUN,IBLNPROV)=""
         . Q
         ;
         Q:$D(OK) OK  ; OK will never equal '1' for TRUE at this point.
         I '$D(OK),'$D(IBLNPRV(IBPRVFUN)) S OK=0 Q OK  ; No line provider array for this line provider function.
         S OK=1  ; Edit Check (2) line provider condition has been met.
         Q OK
         ;
CLPRV2(IBPRVFUN,IBCLPRV) --
          ; Function - Edit Check (2) for claim level provider.
         ; See Edit Check (2) at top of routine for details.
         ;
         ; Input:
         ;       IBPRVFUN - Provider Type (FUNCTION). Example: RENDERING.
         ;       IBCLPRV(Array) - Passed by reference. Intially undefined.
         ;
         ; Output:
         ;       OK - If Edit Check (2) claim level provider condition has
         ;            been met, then OK will return '1' for TRUE, ELSE, '0'
         ;            for FALSE.
         ;            *See Edit Check (2) at top of routine for details.
         ;       IBCLPRV(Array) - If Edit Check (2) condition has been met,
         ;                        then IBCLPRV will contain the provider type,
         ;                        and provider variable pointer as array
         ;                        subscripts, and array element is SET to
         ;                        NULL. => IBCLPRV(IBPRVFUN,IBCLPROV)="".
         ;
         N IBCLPIEN,IBCLPROV,OK
         S OK=0  ; Initialize OK=0 for FALSE.
         S IBCLPIEN=0 F  S IBCLPIEN=$O(^DGCR(399,IBIFN,"PRV","C",IBPRVFUN,IBCLPIEN)) Q:'IBCLPIEN  D  Q:OK
         . Q:'($D(^DGCR(399,IBIFN,"PRV",IBCLPIEN,0))#10)
         . S IBCLPROV=$P(^DGCR(399,IBIFN,"PRV",IBCLPIEN,0),"^",2)
         . Q:'IBCLPROV
         . S IBCLPRV(IBPRVFUN,IBCLPROV)=""  ; Set array for Edit Check (2) to compare claim level provider with line level provider.
         . S OK=1  ; At this point we have our claim level provider of provider type IBPRVFUN. Set OK=1 for TRUE.
         . Q
         ;
         Q:'OK OK
         S OK=1
         Q OK
         ;
OPPROVCK(IBIFN) --
          ; DEM;432 - Other Operating Provider edit checks.
         ;
         ; Input:
         ;       IBIFN - Claim number IEN.
         ;
         ; Output:
         ;       OK - '1' Edits
         ;            '0' No Edits.
         ;       *Note: OK returned if called as function ($$).
         ;              Can be called as routine as well.
         ;
         ; Patch 432 line level Other Operating Provider Edit checks:
         ;
         ; (1) If claim level Other Operating Provider, then
         ;     (1.1) claim must have claim level Operating Provider.
         ;           OR
         ;     (1.2) every line must have Operating Provider.
         ;
         ;  If (1) Passes, then do edit check (2) below.
         ;
         ;  (2) If any claim line has Other Operating Provider, then
         ;      (2.1) must have Operating Provider on same claim line,
         ;            OR
         ;      (2.2) must have claim level Operating Provider.
         ;
         N OK
         S OK=0  ; Initialize OK=0 for FALSE.
         Q:'$G(IBIFN) OK  ; Need claim number IEN to continue.
         S:'$G(IBFT) IBFT=$$FT^IBCEF(IBIFN)  ; Form Type for claim.
         ; JWS;IB*2.0*592 US1108 - Dental form check 
         I IBFT'=2,IBFT'=3,IBFT'=7 Q OK  ; Must be CMS-1500 (2) or UB-04 (3) Form Type or (7) Dental J430D
         ;
         N IBPRVFUN,IBLNFLAG,IBLNPRV,CLOK,LNOK
         ;
         ; Note: Claim level provider - OTHER and OTHER OPERATING are the same.
         ; Check if condition (1) has been met.
         F IBPRVFUN="OTHER","OTHER OPERATING" S CLOK=$$CLOPPRV1(IBPRVFUN) Q:CLOK
         Q:'CLOK OK  ; No claim level OTHER OPERATING PROVIDER, then QUIT, no further checks.
         S OK=0  ; Initialize OK=0 for FALSE. 
         ; Condition (1) has been met, check condtion (1.1).
         S CLOK=0  ; Initialize CLOK=0 for FALSE.
         I $D(^DGCR(399,IBIFN,"PRV","C","OPERATING")) S IBPRVFUN="OPERATING",CLOK=$$CLOPPRV1(IBPRVFUN)  ; Check condition (1.1).
         ; If CLOK at this point, then skip condition check (1.2) and continue to condition (2).
         S LNOK=0  ; Initialize LNOK=0 for FALSE.
         I 'CLOK S IBPRVFUN="OPERATING",LNOK=$$LNOPPRV1(IBPRVFUN) I 'LNOK S OK=1 Q OK  ; Check condition (1.2). If 'LNOK, then we ha
          ve an error and QUIT.
         ; If LNOK, then continue to condition check (2).
         S LNOK=0  ; Initialize LNOK=0 for FALSE.
         K IBLNPRV  ; KILL IBLNPRV array before call to $$LNOPPRV1(IBPRVFUN,1,.IBLNPRV).
         S IBPRVFUN="OTHER OPERATING",LNOK=$$LNOPPRV1(IBPRVFUN,1,.IBLNPRV)  ; Condition check (2) start.
         I '$D(IBLNPRV("PRVFUN")) S OK=0 Q OK  ; If no data in IBLNPRV("PRVFUN") array, then skip rest of checks, no error.
         ; If data in IBLNPRV("PRVFUN") array, then check condition (2.1).
         S IBPRVFUN="OPERATING",LNOK=$$LNOPPRV1(IBPRVFUN,1,.IBLNPRV)  ; Condition check (2.1) start.
         S LNOK=0  ; Initialize LNOK=0 for FALSE.
         D:$D(IBLNPRV("PRVFUN"))  ; If data in IBLNPRV("PRVFUN") array, then continue condition check (2.1).
         . N IBPROCP
         . S IBPROCP=0 F  S IBPROCP=$O(IBLNPRV("PROC",IBPROCP)) Q:'IBPROCP  D  Q:'LNOK
         . . I $D(IBLNPRV("PROC",IBPROCP,"OTHER OPERATING")),'$D(IBLNPRV("PROC",IBPROCP,"OPERATING")) S LNOK=0 Q
         . . S LNOK=1  ; At this point, we have at least one match. If there wasn't a match, then LNOK=0 and we would have QUIT.
         . . Q
         . Q
         I LNOK S OK=0 Q OK  ; Conditions (2) and (2.1) are met (no error). SET OK=0 and QUIT.
         ; If 'LNOK, then continue to condition check (2.2).
         S CLOK=0  ; Initialize CLOK=0 for FALSE.
         S IBPRVFUN="OPERATING",CLOK=$$CLOPPRV1(IBPRVFUN)  ; Condition check (2.2).
         I CLOK S OK=0 Q OK  ; Conditions (2) and (2.2) are met (no error). SET OK=0 and QUIT.
         ; At this point, we have an error. SET OK=1, and QUIT.
         S OK=1
         Q OK
         ;
CLOPPRV1(IBPRVFUN) --
          ; Claim level provider/provider function check.
         ;
         ; Check if there is a claim level provider with provider function IBPRVFUN.
         ;
         ; Input:
         ;       IBPRVFUN - PROVIDER FUNCTION.
         ;
         ; Output:
         ;       OK - '1' Claim level provider exist for provider function IBPRVFUN.
         ;            '0' No Claim level provider exist for provider function IBPRVFUN.
         ;
         N OK,IBCLPIEN,IBCLPROV
         S OK=0  ; Initialize OK=0 for FALSE.
         ;
         I $D(^DGCR(399,IBIFN,"PRV","C",IBPRVFUN)) D
         . S IBCLPIEN=0 F  S IBCLPIEN=$O(^DGCR(399,IBIFN,"PRV","C",IBPRVFUN,IBCLPIEN)) Q:'IBCLPIEN  D  Q:OK
         . . Q:'($D(^DGCR(399,IBIFN,"PRV",IBCLPIEN,0))#10)
         . . S IBCLPROV=$P(^DGCR(399,IBIFN,"PRV",IBCLPIEN,0),U,2)
         . . Q:'IBCLPROV
         . . S OK=1  ; At this point we have claim level provider with provider function IBPRVFUN and can QUIT function/subroutine.
         . . Q
         . Q
         ;
         Q OK
         ;
LNOPPRV1(IBPRVFUN,IBLNFLAG,IBLNPRV,IBPROCHK) --
          ; Check every claim line for provider function IBPRVFUN.
         ;
         ;
         ; Input:
         ;       IBPRVFUN - PROVIDER FUNCTION.
         ;       IBLNFLAG(Optional) = 1 or 0. 1 indicates return IBLNPRV array passed by reference, otherwise '0' for NO.
         ;       IBLNPRV(Optional) - Array passed by reference => IF SET OK=1, then
         ;                           I $G(IBLNFLAG) S IBLNPRV("PROC",IBPROCP,IBPRVFUN)="",IBLNPRV("PRVFUN",IBPRVFUN,IBPROCP)=""
         ;       IBPROCHK - Condition on PROCEDURE (ICD, CPT, or HCFA procedure codes).
         ;
         ; Output:
         ;       OK - '1' Every line level provider exist for provider function IBPRVFUN.
         ;            '0' Not every line level provider exist for provider function IBPRVFUN.
         ;
         N OK
         S OK=0  ; Initialize OK=0 for FALSE.
         ;
         N IBLPIEN,IBLNPROV,IBPROCP
         S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  Q:($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)&('OK)
         . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)  ; No procedure '0' node.
         . I $G(IBPROCHK)'="" Q:$P(^DGCR(399,IBIFN,"CP",IBPROCP,0),U,1)'[IBPROCHK
         . I '$D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","C",IBPRVFUN)) S OK=0 Q  ; No line provider function IBPRVFUN for this procedu
          re.
         . S IBLPIEN=$O(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","C",IBPRVFUN,0))
         . I 'IBLPIEN S OK=0 Q  ; No line provider IEN for this line provider function.
         . I '($D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBLPIEN,0))#10) S OK=0 Q  ; No '0' node for line level provider.
         . S IBLNPROV=$P(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBLPIEN,0),U,2)
         . I 'IBLNPROV S OK=0 Q  ; No line provider for this line provider function.
         . ; At this point we have line level provider of type IBPRVFUN.
         . ; S OK=1 for this claim line. OK can be changed back to '0', for FALSE, if claim line fails condition.
         . ; We would not get to this point if any line level provider with provider function IBPRVFUN didn't exist.
         . S OK=1
         . I $G(IBLNFLAG) S IBLNPRV("PROC",IBPROCP,IBPRVFUN)="",IBLNPRV("PRVFUN",IBPRVFUN,IBPROCP)=""
         . Q
         ;
         Q OK
         ;
UBPRVCK(IBIFN) --
          ; DEM;432 - Check if claim requires operating provider.
         ;
         ; Description: This function checks if claim requires an operating provider.
         ;
         ;              Checks:
         ;
         ;              (1) If claim has a claim level operating provider,
         ;                  then no further checks (OK=1=TRUE).
         ;              (2) If claim doesn't have a claim level operating provider,
         ;                  then check:
         ;                  (2.1) Is this a UB-04 claim? NO = QUIT (OK=1), YES = Continue to next check.
         ;                  (2.2) Check every claim line that includes HCPCS procs - operating provider.
         ;                        If every claim line that includes HCPCS procs has an operating provider,
         ;                        then we are OK and QUIT (OK=1).
         ;                        If any claim line that includes HCPCS procs doesn't have an operating
         ;                        provider, then we have an ERROR (OK=0). 
         ;
         ; Input:
         ;       IBIFN = Claim number IEN.
         ;
         ; Output:
         ;        OK = 0 = claim doesn't have an operating provider
         ;                 when operating provider or rendering provider required.
         ;        OK = 1 = claim has an operating provider, or,
         ;                 claim doesn't require operating provider.
         ;
         N OK
         ; If claim doesn't have any procedure codes, then no checks required.
         I '$O(^DGCR(399,IBIFN,"CP",0)) S OK=1 Q OK
         ;
         S OK=$$CLOPPRV1("OPERATING")  ; Do we have a claim level OPERATING PROVIDER (OK=1=TRUE)?
         Q:OK OK  ; QUIT, we have a claim level OPERATING PROVIDER (OK=1=TRUE).
         ;
         N IBFT
         S IBFT=($$FT^IBCEF(IBIFN)=3)  ; UB-04 claim (1 = TRUE, 0 = FALSE)?
         S OK=1  ; Initialize OK=1.
         Q:'IBFT OK  ; QUIT OK=1, not a UB-04 claim.
         ;
         ; Claim level check did not pass, check claim lines.
         ; No claim level OPERATING PROVIDER, so check every PROCEDURE for OPERATING PROVIDER.
         S OK=$$UBPRVCK1("") ; Does every procedure have an OPERATING PROVIDER(1=TRUE,0=FALSE)?
         ;
         Q OK
         ;
UBPRVCK1(IBPROCHK,IBONE) --
          ; DEM;432 - Continuation of UBPRVCK function.
         ;
         ; Input:
         ;       IBPROCHK(Optional) - Optional condition on PROCEDURE CODE (ICD, CPT, or HCFA procedure codes).
         ;       IBONE(Optional) - Quit if at least one line has an OPERATING
         ;
         ; Output:
         ;       OK - '1' Every procedure code that contains IBPROCHK (optional check) has an OPERATING PROVIDER.
         ;            or if IBONE, then at least one procedure code that contains IBPROCHK (optional check) has an OPERATING PROVIDE
          R.
         ;            '0' Not every procedure code that contains IBPROCHK (optional check) has an OPERATING PROVIDER.
         ;            or if IBONE, then NO procedure codes that contain IBPROCHK (optional check) has an OPERATING PROVIDER.
         ;
         N OK
         S OK=0  ; Initialize OK=0 for FALSE.
         ;
         N IBLPIEN,IBLNPROV,IBPROCP
         S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  Q:($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)&('OK)&
          ('$G(IBONE))  I $G(IBONE),$G(OK) Q
         . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)  ; No procedure '0' node.
         . I $G(IBPROCHK)'="" Q:$P(^DGCR(399,IBIFN,"CP",IBPROCP,0),U,1)'[IBPROCHK
         . I '$D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","C","OPERATING")) S OK=0 Q  ; No line OPERATING PROVIDER for this procedure.
         . S IBLPIEN=$O(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","C","OPERATING",0))
         . I 'IBLPIEN S OK=0 Q  ; No line provider IEN for this line provider function.
         . I '($D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBLPIEN,0))#10) S OK=0 Q  ; No '0' node for line level provider.
         . S IBLNPROV=$P(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBLPIEN,0),U,2)
         . I 'IBLNPROV S OK=0 Q  ; No line provider for this line provider function.
         . ; At this point we have line level provider of type OPERATING.
         . ; S OK=1 for this claim line. OK can be changed back to '0', for FALSE, if claim line fails condition.
         . ; We would not get to this point if any line level provider with provider function OPERATING didn't exist.
         . S OK=1
         . Q
         ;

*****   INDEX OF IBCBB12   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   CLOK         OPPROVCK+32~,OPPROVCK+36*,OPPROVCK+37,OPPROVCK+40*,OPPROVCK+41*,OPPROVCK+44,OPPROVCK+62*,OPPROVCK+63*,OPPROVCK+64
   IBCLPIEN     CLPRV2+18~,CLPRV2+20*,CLPRV2+21,CLPRV2+22,CLOPPRV1+11~,CLOPPRV1+15*,CLOPPRV1+16,CLOPPRV1+17
   IBCLPROV     CLPRV2+18~,CLPRV2+22*,CLPRV2+23,CLPRV2+24,CLOPPRV1+11~,CLOPPRV1+17*,CLOPPRV1+18
   IBCLPRV      LNPROV+28~,LNPROV+49,LNPROV+51*,LNPROV+52,CLPRV2~
   IBCLPRV(     LNPROV+51,CLPRV2+24*
>> IBER         LNPROV+54*
   IBFT         LNPROV+29*,LNPROV+31,LNPROV+32,LNPROV+33,LNPROV+34,LNPROV+36,LNPROV+37,OPPROVCK+28*,OPPROVCK+30,UBPRVCK+33~
                UBPRVCK+34*,UBPRVCK+36
   IBIFN        LNPROV~,LNPROV+27,LNPROV+29,LNPROV+37,LNPROV+47,LNPRV2+19,LNPRV2+20,LNPRV2+21,LNPRV2+22,LNPRV2+24,LNPRV2+25
                CLPRV2+20,CLPRV2+21,CLPRV2+22,OPPROVCK~,OPPROVCK+27,OPPROVCK+28,OPPROVCK+41,CLOPPRV1+14,CLOPPRV1+15,CLOPPRV1+16
                CLOPPRV1+17
                LNOPPRV1+18,LNOPPRV1+19,LNOPPRV1+20,LNOPPRV1+21,LNOPPRV1+22,LNOPPRV1+24,LNOPPRV1+25,UBPRVCK~,UBPRVCK+28,UBPRVCK+34
                UBPRVCK1+16,UBPRVCK1+17,UBPRVCK1+18,UBPRVCK1+19,UBPRVCK1+20,UBPRVCK1+22,UBPRVCK1+23
   IBLNFLAG     OPPROVCK+32~,LNOPPRV1~,LNOPPRV1+31
   IBLNPROV     LNPRV2+18~,LNPRV2+25*,LNPRV2+26,LNPRV2+27,LNOPPRV1+17~,LNOPPRV1+25*,LNOPPRV1+26,UBPRVCK1+15~,UBPRVCK1+23*
                UBPRVCK1+24
   IBLNPRV      LNPROV+28~,LNPROV+46,LNPRV2~,OPPROVCK+32~,OPPROVCK+47!,OPPROVCK+48,OPPROVCK+51,LNOPPRV1~
   IBLNPRV(     LNPROV+52,LNPRV2+27*,LNPRV2+31
   IBLNPRV("PROC" 
                OPPROVCK+55,OPPROVCK+56,LNOPPRV1+31*
   IBLNPRV("PRVFUN" 
                OPPROVCK+49,OPPROVCK+53,LNOPPRV1+31*
   IBLPIEN      LNPRV2+18~,LNPRV2+22*,LNPRV2+23,LNPRV2+24,LNPRV2+25,LNOPPRV1+17~,LNOPPRV1+22*,LNOPPRV1+23,LNOPPRV1+24,LNOPPRV1+25
                UBPRVCK1+15~,UBPRVCK1+20*,UBPRVCK1+21,UBPRVCK1+22,UBPRVCK1+23
   IBONE        UBPRVCK1~,UBPRVCK1+16
   IBPROCHK     LNOPPRV1~,LNOPPRV1+20,UBPRVCK1~,UBPRVCK1+18
   IBPROCP      LNPRV2+18~,LNPRV2+19*,LNPRV2+20,LNPRV2+21,LNPRV2+22,LNPRV2+24,LNPRV2+25,OPPROVCK+54~,OPPROVCK+55*,OPPROVCK+56
                LNOPPRV1+17~,LNOPPRV1+18*,LNOPPRV1+19,LNOPPRV1+20,LNOPPRV1+21,LNOPPRV1+22,LNOPPRV1+24,LNOPPRV1+25,LNOPPRV1+31
                UBPRVCK1+15~
                UBPRVCK1+16*,UBPRVCK1+17,UBPRVCK1+18,UBPRVCK1+19,UBPRVCK1+20,UBPRVCK1+22,UBPRVCK1+23
   IBPRVFUN     LNPROV+28~,LNPROV+36*,LNPROV+37,LNPROV+46,LNPROV+47,LNPROV+49,LNPROV+51,LNPROV+52,LNPROV+54,LNPRV2~,LNPRV2+21
                LNPRV2+22,LNPRV2+27,LNPRV2+31,CLPRV2~,CLPRV2+20,CLPRV2+24,OPPROVCK+32~,OPPROVCK+36*,OPPROVCK+41*,OPPROVCK+44*
                OPPROVCK+48*
                OPPROVCK+51*,OPPROVCK+63*,CLOPPRV1~,CLOPPRV1+14,CLOPPRV1+15,LNOPPRV1~,LNOPPRV1+21,LNOPPRV1+22,LNOPPRV1+31
   LNOK         OPPROVCK+32~,OPPROVCK+43*,OPPROVCK+44*,OPPROVCK+46*,OPPROVCK+48*,OPPROVCK+51*,OPPROVCK+52*,OPPROVCK+55,OPPROVCK+56*
                OPPROVCK+57*,OPPROVCK+60
   OK           LNPROV+25~,LNPROV+26*,LNPROV+27,LNPROV+31,LNPROV+53*,LNPROV+58,LNPRV2+18~,LNPRV2+19,LNPRV2+21*,LNPRV2+23*
                LNPRV2+24*,LNPRV2+26*,LNPRV2+30,LNPRV2+31*,LNPRV2+32*,LNPRV2+33,CLPRV2+18~,CLPRV2+19*,CLPRV2+20,CLPRV2+25*
                CLPRV2+28,CLPRV2+29*
                CLPRV2+30,OPPROVCK+25~,OPPROVCK+26*,OPPROVCK+27,OPPROVCK+30,OPPROVCK+37,OPPROVCK+38*,OPPROVCK+44*,OPPROVCK+49*
                OPPROVCK+60*,OPPROVCK+64*,OPPROVCK+66*,OPPROVCK+67,CLOPPRV1+11~,CLOPPRV1+12*,CLOPPRV1+15,CLOPPRV1+19*,CLOPPRV1+23
                LNOPPRV1+14~
                LNOPPRV1+15*,LNOPPRV1+18,LNOPPRV1+21*,LNOPPRV1+23*,LNOPPRV1+24*,LNOPPRV1+26*,LNOPPRV1+30*,LNOPPRV1+34,UBPRVCK+26~
                UBPRVCK+28*,UBPRVCK+30*,UBPRVCK+31,UBPRVCK+35*,UBPRVCK+36,UBPRVCK+40*,UBPRVCK+42,UBPRVCK1+12~,UBPRVCK1+13*
                UBPRVCK1+16
                UBPRVCK1+19*,UBPRVCK1+21*,UBPRVCK1+22*,UBPRVCK1+24*,UBPRVCK1+28*
   PRVFUN       LNPROV+28~
   PRVFUN(      LNPROV+36
   PRVFUN("CNT" LNPROV+36*
   PRVFUN(2     LNPROV+32*
   PRVFUN(3     LNPROV+33*
   PRVFUN(7     LNPROV+34*
   U            CLOPPRV1+17,LNOPPRV1+20,LNOPPRV1+25,UBPRVCK1+18,UBPRVCK1+23

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399           LNPROV+37,LNPROV+47,LNPRV2+19,LNPRV2+20,LNPRV2+21,LNPRV2+22,LNPRV2+24,LNPRV2+25,CLPRV2+20,CLPRV2+21
                       CLPRV2+22,OPPROVCK+41,CLOPPRV1+14,CLOPPRV1+15,CLOPPRV1+16,CLOPPRV1+17,LNOPPRV1+18,LNOPPRV1+19,LNOPPRV1+20
                       LNOPPRV1+21,LNOPPRV1+22,LNOPPRV1+24
                       LNOPPRV1+25,UBPRVCK+28,UBPRVCK1+16,UBPRVCK1+17,UBPRVCK1+18,UBPRVCK1+19,UBPRVCK1+20,UBPRVCK1+22,UBPRVCK1+23

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$CLOPPRV1   OPPROVCK+36,OPPROVCK+41,OPPROVCK+63,UBPRVCK+30
   $$CLPRV2     LNPROV+49
   $$LNOPPRV1   OPPROVCK+44,OPPROVCK+48,OPPROVCK+51
   $$LNPRV2     LNPROV+37,LNPROV+46
   $$UBPRVCK1   UBPRVCK+40

External References
   WARN^IBCBB11        LNPROV+43
   $$FT^IBCEF          LNPROV+29,OPPROVCK+28,UBPRVCK+34

*****   END   *****


IBCBB13  * *  143 Lines,  8284 Bytes, Checksum: B52019184                                             Mar 20, 2019@15:10:13 page 4
              1670 bytes in comments
IBCBB13  ;ALB/BI - PROCEDURE AND LINE LEVEL PROVIDER EDITS ;5-OCT-2011
         ;;2.0;INTEGRATED BILLING;**447,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         Q
         ;
IBLNTOT(IBIFN) --
            ; Calculate Line total charges.  IB*2.0*447 BI
         N X,SUM S SUM=0
         S X=0 F  S X=$O(^DGCR(399,IBIFN,"RC",X)) Q:+X=0  D
         . S SUM=SUM+$P($G(^DGCR(399,IBIFN,"RC",X,0)),"^",4)
         Q SUM
         ;
IBSYEI(IBIFN) --
            ; Test for valid EIN/SY ID Values. IB*2.0*447 BI
         N X12CODE,RESULT,IBPIEN,IBWIEN,IBLIEN
         S RESULT=0
         ; Check Claim Level Providers
         S IBWIEN=IBIFN_","
         S X12CODE=$$GET1^DIQ(355.97,$$GET1^DIQ(399,IBWIEN,128,"I")_",",.03)
         I ((X12CODE="SY")!(X12CODE="EI")),$TR($$GET1^DIQ(399,IBWIEN,122),"-","")'?9N S RESULT=1 Q RESULT
         S X12CODE=$$GET1^DIQ(355.97,$$GET1^DIQ(399,IBWIEN,129,"I")_",",.03)
         I ((X12CODE="SY")!(X12CODE="EI")),$TR($$GET1^DIQ(399,IBWIEN,123),"-","")'?9N S RESULT=1 Q RESULT
         S X12CODE=$$GET1^DIQ(355.97,$$GET1^DIQ(399,IBWIEN,130,"I")_",",.03)
         I ((X12CODE="SY")!(X12CODE="EI")),$TR($$GET1^DIQ(399,IBWIEN,124),"-","")'?9N S RESULT=1 Q RESULT
         ; Check Claim Level Providers
         S IBPIEN=0 F  S IBPIEN=$O(^DGCR(399,IBIFN,"PRV",IBPIEN)) Q:+IBPIEN=0  Q:RESULT=1  D
         .S IBWIEN=IBPIEN_","_IBIFN_","
         .; Test for each provider listed.
         .S X12CODE=$$GET1^DIQ(355.97,$$GET1^DIQ(399.0222,IBWIEN,.12,"I")_",",.03)
         .I ((X12CODE="SY")!(X12CODE="EI")),$TR($$GET1^DIQ(399.0222,IBWIEN,.05),"-","")'?9N S RESULT=1 Q
         .S X12CODE=$$GET1^DIQ(355.97,$$GET1^DIQ(399.0222,IBWIEN,.13,"I")_",",.03)
         .I ((X12CODE="SY")!(X12CODE="EI")),$TR($$GET1^DIQ(399.0222,IBWIEN,.06),"-","")'?9N S RESULT=1 Q 
         .S X12CODE=$$GET1^DIQ(355.97,$$GET1^DIQ(399.0222,IBWIEN,.14,"I")_",",.03)
         .I ((X12CODE="SY")!(X12CODE="EI")),$TR($$GET1^DIQ(399.0222,IBWIEN,.07),"-","")'?9N S RESULT=1 Q
         ; Check Line Level Providers
         ; For each charge code / line.
         S IBLIEN=0 F  S IBLIEN=$O(^DGCR(399,IBIFN,"CP",IBLIEN)) Q:+IBLIEN=0  Q:RESULT=1  D
         .; For each provider associated with the line.
         .S IBPIEN=0 F  S IBPIEN=$O(^DGCR(399,IBIFN,"CP",IBLIEN,"LNPRV",IBPIEN)) Q:+IBPIEN=0  Q:RESULT=1  D
         ..S IBWIEN=IBPIEN_","_IBLIEN_","_IBIFN_","
         ..; Test for each provider listed.
         ..S X12CODE=$$GET1^DIQ(355.97,$$GET1^DIQ(399.0404,IBWIEN,.12,"I")_",",.03)
         ..I ((X12CODE="SY")!(X12CODE="EI")),$TR($$GET1^DIQ(399.0404,IBWIEN,.05),"-","")'?9N S RESULT=1 Q
         ..S X12CODE=$$GET1^DIQ(355.97,$$GET1^DIQ(399.0404,IBWIEN,.13,"I")_",",.03)
         ..I ((X12CODE="SY")!(X12CODE="EI")),$TR($$GET1^DIQ(399.0404,IBWIEN,.06),"-","")'?9N S RESULT=1 Q
         ..S X12CODE=$$GET1^DIQ(355.97,$$GET1^DIQ(399.0404,IBWIEN,.14,"I")_",",.03)
         ..I ((X12CODE="SY")!(X12CODE="EI")),$TR($$GET1^DIQ(399.0404,IBWIEN,.07),"-","")'?9N S RESULT=1 Q
         Q RESULT
         ;
IBMICN(IBIFN) --
            ; Test for a missing ICN. IB*2.0*447 BI
         N IBTFOB ; TIMEFRAME OF BILL
         N IBCBPS ; CURRENT BILL PAYER SEQUENCE, P-PRI, S-SEC, T-TER, A-PATIENT
         S IBTFOB=$$GET1^DIQ(399,IBIFN_",",.06,"I")
         I '((IBTFOB=7)!(IBTFOB=8)) Q 0
         S IBCBPS=$$GET1^DIQ(399,IBIFN_",",.21,"I")
         I IBCBPS="P",$$GET1^DIQ(399,IBIFN_",",101)'="",$$GET1^DIQ(399,IBIFN_",",453)="" Q 1
         I IBCBPS="S",$$GET1^DIQ(399,IBIFN_",",102)'="",$$GET1^DIQ(399,IBIFN_",",454)="" Q 1
         I IBCBPS="T",$$GET1^DIQ(399,IBIFN_",",103)'="",$$GET1^DIQ(399,IBIFN_",",455)="" Q 1
         Q 0
         ;
IBRCCHK(IBIFN) --
            ; Test for a ZERO charge amounts. IB*2.0*447 BI
         N IBN0
         N IBRCCNT S IBRCCNT=0
         N IBRCCHG S IBRCCHG=0
         F  S IBRCCNT=$O(^DGCR(399,IBIFN,"RC",IBRCCNT)) Q:+IBRCCNT=0  Q:IBRCCHG=1  D
         .S IBN0=$G(^DGCR(399,IBIFN,"RC",IBRCCNT,0))
         .I $P(IBN0,U,1)'="",+$P(IBN0,U,4)=0 S IBRCCHG=1
         Q IBRCCHG
         ;
IBPRV3(IBIFN) --
            ; Test for missing "Patient reason for visit". IB*2.0*447 BI
         I $$GET1^DIQ(399,IBIFN_",",249)="",$$GET1^DIQ(399,IBIFN_",",250)="",$$GET1^DIQ(399,IBIFN_",",251)="" Q 1
         Q 0
         ;
IBMPID(IBIFN) --
            ; Test for multiple payers. IB*2.0*447 BI
         N IBPAY1 S IBPAY1=$$GET1^DIQ(399,IBIFN_",",101,"I")
         N IBPAY2 S IBPAY2=$$GET1^DIQ(399,IBIFN_",",102,"I")
         N IBPAY3 S IBPAY3=$$GET1^DIQ(399,IBIFN_",",103,"I")
         N IBCNT S IBCNT=0
         S:IBPAY1 IBCNT=IBCNT+1 S:IBPAY2 IBCNT=IBCNT+1 S:IBPAY3 IBCNT=IBCNT+1 I IBCNT<2 Q 0
         N IBINSTIT S IBINSTIT=$$INSPRF^IBCEF(IBIFN)
         I IBPAY1,$S(IBINSTIT:$$GET1^DIQ(36,IBPAY1_",",3.04),1:$$GET1^DIQ(36,IBPAY1_",",3.02))="" Q 1
         I IBPAY2,$S(IBINSTIT:$$GET1^DIQ(36,IBPAY2_",",3.04),1:$$GET1^DIQ(36,IBPAY2_",",3.02))="" Q 1
         I IBPAY3,$S(IBINSTIT:$$GET1^DIQ(36,IBPAY3_",",3.04),1:$$GET1^DIQ(36,IBPAY3_",",3.02))="" Q 1
         Q 0
         ;
CMNCHK(IBIFN) --
          ;JRA;IB*2.0*608 Check for missing required Certificate of Medical Necessity (CMN) data
         ; Input : IBIFN = IEN of the Bill/Claim (D399)
         ; Output: IBER  = NULL if no errors      
         ;               = String of IB Error Message codes delimited by ';'
         ;               => Note that the return value is appended to the 'IBER' variable in routine ^IBCBB1
         Q:IBIFN="" ""
         N CERTYP,CMNNODE,CMNREQ,DA,DIE,ERR,FRMNAM,FRMIEN,FORM,FRMTYP,IBER,IBPROCP,PROCNUM
         S IBER=""
         ;Set up array of each existing Form Type (i.e. Form IENs) and associated ^DGCR data node.
         S FRMNAM="" F  S FRMNAM=$O(^IBE(399.6,"B",FRMNAM)) Q:FRMNAM=""  S FRMIEN=+$O(^IBE(399.6,"B",FRMNAM,"")) I FRMIEN D
         . S FORM(FRMIEN)=$P($G(^IBE(399.6,FRMIEN,0)),U,4)
         ;Loop thru all procedures on the claim searching for missing CMN data
         S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  Q:IBER]""
         . ;If "CMN Required?" is NULL then QUIT w/out further checking
         . S CMNREQ=$$CVALCHK(IBPROCP,23,,"I") Q:CMNREQ=""
         . I 'CMNREQ,$D(FORM)>1 D  Q  ;"CMN Required?" flagged as "NO" so check if data node(s) exist anyway for at least 1 form
         . . S ERR=0,FRMIEN="" F  S FRMIEN=$O(FORM(FRMIEN)) Q:FRMIEN=""  I FORM(FRMIEN)]"" D  Q:ERR
         . . . S CMNNODE="^DGCR(399,"_IBIFN_",""CP"","_IBPROCP_","""_FORM(FRMIEN)_""")" I $D(@CMNNODE) S ERR=1,IBER=IBER_"IB901;"
         . S FRMTYP=$$CVALCHK(IBPROCP,24,"IB902","I") Q:'FRMTYP  ;Check for "CMN FORM TYPE" (Internal value)
         . I $G(FORM(FRMTYP))]"" D  Q:ERR
         . . ;Check if any data exists at the node specific to the Form Type
         . . S ERR=0,CMNNODE="^DGCR(399,"_IBIFN_",""CP"","_IBPROCP_","""_FORM(FRMTYP)_""")"
         . . I '$D(@CMNNODE) S ERR=1,IBER=IBER_"IB903;" Q
         . . Q:FORM(FRMTYP)'[10126
         . . N ND10126
         . . S ND10126=@CMNNODE
         . . I $P(ND10126,U,17)]"" S $P(ND10126,U,17)="" I $TR(ND10126,U)="" S ERR=1,IBER=IBER_"IB903;"
         . ;Check if any data exists for at least 1 node other than that associated with the Form Type 
         . S ERR=0,FRMIEN="" F  S FRMIEN=$O(FORM(FRMIEN)) Q:FRMIEN=""  I FRMIEN'=FRMTYP,FORM(FRMIEN)]"" D  Q:ERR
         . . S CMNNODE="^DGCR(399,"_IBIFN_",""CP"","_IBPROCP_","""_FORM(FRMIEN)_""")" I $D(@CMNNODE) S ERR=1,IBER=IBER_"IB904;"
         . ;Check for Required fields at the data node common to all forms (node 'CMN')
         . S CERTYP=$$CVALCHK(IBPROCP,24.01,"IB905","I") Q:CERTYP=""  ;Check for "CMN CERTIFICATION TYPE"
         . D CVALCHK(IBPROCP,24.05,"IB907","I")  ;Check for "CMN DATE THERAPY STARTED"
         . D CVALCHK(IBPROCP,24.06,"IB908","I")  ;Check for "CMN LAST CERTIFICATION DATE"
         . ;IF Certificate Type is "RENEWAL" (R) or "REVISED" (S) then "CMN RECERTIFICATION/REVISN DT" is Required.
         . I CERTYP="R"!(CERTYP="S") D CVALCHK(IBPROCP,24.07,"IB909","I")
         . ;
         . ;Check for required fields specific to the CMN-484 form
         . I FORM(FRMTYP)[484 D  ;Check for required fields/dates
         . . I $$CVALCHK(IBPROCP,24.1,,"I")]""!($$CVALCHK(IBPROCP,24.102,,"I")]"") D CVALCHK(IBPROCP,24.103,"IB912","I")
         . . I $$CVALCHK(IBPROCP,24.111,,"I")]""!($$CVALCHK(IBPROCP,24.113,,"I")]"") D CVALCHK(IBPROCP,24.114,"IB914","I")
         . ;
         . ;Check for required fields specific to the CMN-10126 form
         . I FORM(FRMTYP)[10126 D
         . . D CVALCHK(IBPROCP,24.217,"IB906","I")
         . . N PROCMSG
         . . S PROCMSG="CMN ""Procedure ",PROCMSG(1)=""" has no associated Calories."
         . . I $$CVALCHK(IBPROCP,24.204,,"I")]"",'$$CVALCHK(IBPROCP,24.203,,"I") D WARN^IBCBB11(PROCMSG_"A"_PROCMSG(1))
         . . I $$CVALCHK(IBPROCP,24.219,,"I")]"",'$$CVALCHK(IBPROCP,24.218,,"I") D WARN^IBCBB11(PROCMSG_"B"_PROCMSG(1))
         ;
         I IBER]"" S IBER="IB915;"_IBER
         Q IBER
         ;
CVALCHK(IBPROCP,FLD,ERROR,FLG) --
          ;JRA;IB*2.0*608 Check value of CMN field & append Error Code (if any) to list of errors
         Q:($G(FLD)=""!('$G(IBPROCP)))
         N VAL
         S VAL=$$CMNDATA^IBCEF31(IBIFN,IBPROCP,FLD,$G(FLG))
         I $G(ERROR)]"",VAL="" S IBER=IBER_ERROR_";"
         Q VAL
         ;

*****   INDEX OF IBCBB13   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   CERTYP       CMNCHK+6~,CMNCHK+31*,CMNCHK+35
   CMNNODE      CMNCHK+6~,CMNCHK+17*,CMNCHK+21*,CMNCHK+22,CMNCHK+25,CMNCHK+29*
   CMNREQ       CMNCHK+6~,CMNCHK+14*,CMNCHK+15
   DA           CMNCHK+6~
   DIE          CMNCHK+6~
   ERR          CMNCHK+6~,CMNCHK+16*,CMNCHK+17*,CMNCHK+19,CMNCHK+21*,CMNCHK+22*,CMNCHK+26*,CMNCHK+28*,CMNCHK+29*
   ERROR        CVALCHK~,CVALCHK+4
   FLD          CVALCHK~,CVALCHK+1,CVALCHK+3
   FLG          CVALCHK~,CVALCHK+3
   FORM         CMNCHK+6~,CMNCHK+15
   FORM(        CMNCHK+10*,CMNCHK+16,CMNCHK+17,CMNCHK+19,CMNCHK+21,CMNCHK+23,CMNCHK+28,CMNCHK+29,CMNCHK+38,CMNCHK+43
   FRMIEN       CMNCHK+6~,CMNCHK+9*,CMNCHK+10,CMNCHK+16*,CMNCHK+17,CMNCHK+28*,CMNCHK+29
   FRMNAM       CMNCHK+6~,CMNCHK+9*
   FRMTYP       CMNCHK+6~,CMNCHK+18*,CMNCHK+19,CMNCHK+21,CMNCHK+23,CMNCHK+28,CMNCHK+38,CMNCHK+43
   IBCBPS       IBMICN+2~,IBMICN+5*,IBMICN+6,IBMICN+7,IBMICN+8
   IBCNT        IBMPID+4~*,IBMPID+5*
   IBER         CMNCHK+6~,CMNCHK+7*,CMNCHK+12,CMNCHK+17*,CMNCHK+22*,CMNCHK+26*,CMNCHK+29*,CMNCHK+50*,CMNCHK+51,CVALCHK+4*
   IBIFN        IBLNTOT~,IBLNTOT+2,IBLNTOT+3,IBSYEI~,IBSYEI+4,IBSYEI+12,IBSYEI+13,IBSYEI+23,IBSYEI+25,IBSYEI+26,IBMICN~,IBMICN+3
                IBMICN+5,IBMICN+6,IBMICN+7,IBMICN+8,IBRCCHK~,IBRCCHK+4,IBRCCHK+5,IBPRV3~,IBPRV3+1,IBMPID~,IBMPID+1,IBMPID+2
                IBMPID+3,IBMPID+6
                CMNCHK~,CMNCHK+5,CMNCHK+12,CMNCHK+17,CMNCHK+21,CMNCHK+29,CVALCHK+3
   IBINSTIT     IBMPID+6~*,IBMPID+7,IBMPID+8,IBMPID+9
   IBLIEN       IBSYEI+1~,IBSYEI+23*,IBSYEI+25,IBSYEI+26
   IBN0         IBRCCHK+1~,IBRCCHK+5*,IBRCCHK+6
   IBPAY1       IBMPID+1~*,IBMPID+5,IBMPID+7
   IBPAY2       IBMPID+2~*,IBMPID+5,IBMPID+8
   IBPAY3       IBMPID+3~*,IBMPID+5,IBMPID+9
   IBPIEN       IBSYEI+1~,IBSYEI+12*,IBSYEI+13,IBSYEI+25*,IBSYEI+26
   IBPROCP      CMNCHK+6~,CMNCHK+12*,CMNCHK+14,CMNCHK+17,CMNCHK+18,CMNCHK+21,CMNCHK+29,CMNCHK+31,CMNCHK+32,CMNCHK+33,CMNCHK+35
                CMNCHK+39,CMNCHK+40,CMNCHK+44,CMNCHK+47,CMNCHK+48,CVALCHK~,CVALCHK+1,CVALCHK+3
   IBRCCHG      IBRCCHK+3~*,IBRCCHK+4,IBRCCHK+6*,IBRCCHK+7
   IBRCCNT      IBRCCHK+2~*,IBRCCHK+4*,IBRCCHK+5
   IBTFOB       IBMICN+1~,IBMICN+3*,IBMICN+4
   IBWIEN       IBSYEI+1~,IBSYEI+4*,IBSYEI+5,IBSYEI+6,IBSYEI+7,IBSYEI+8,IBSYEI+9,IBSYEI+10,IBSYEI+13*,IBSYEI+15,IBSYEI+16,IBSYEI+17
                IBSYEI+18,IBSYEI+19,IBSYEI+20,IBSYEI+26*,IBSYEI+28,IBSYEI+29,IBSYEI+30,IBSYEI+31,IBSYEI+32,IBSYEI+33
   ND10126      CMNCHK+24~,CMNCHK+25*,CMNCHK+26*
   PROCMSG      CMNCHK+45~,CMNCHK+46*,CMNCHK+47,CMNCHK+48
   PROCMSG(1    CMNCHK+46*,CMNCHK+47,CMNCHK+48
   PROCNUM      CMNCHK+6~
   RESULT       IBSYEI+1~,IBSYEI+2*,IBSYEI+6*,IBSYEI+8*,IBSYEI+10*,IBSYEI+12,IBSYEI+16*,IBSYEI+18*,IBSYEI+20*,IBSYEI+23,IBSYEI+25
                IBSYEI+29*,IBSYEI+31*,IBSYEI+33*,IBSYEI+34
   SUM          IBLNTOT+1~*,IBLNTOT+3*,IBLNTOT+4
   U            IBRCCHK+6,CMNCHK+10,CMNCHK+26
   VAL          CVALCHK+2~,CVALCHK+3*,CVALCHK+4,CVALCHK+5
   X            IBLNTOT+1~,IBLNTOT+2*,IBLNTOT+3
   X12CODE      IBSYEI+1~,IBSYEI+5*,IBSYEI+6,IBSYEI+7*,IBSYEI+8,IBSYEI+9*,IBSYEI+10,IBSYEI+15*,IBSYEI+16,IBSYEI+17*,IBSYEI+18
                IBSYEI+19*,IBSYEI+20,IBSYEI+28*,IBSYEI+29,IBSYEI+30*,IBSYEI+31,IBSYEI+32*,IBSYEI+33

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399           IBLNTOT+2,IBLNTOT+3,IBSYEI+12,IBSYEI+23,IBSYEI+25,IBRCCHK+4,IBRCCHK+5,CMNCHK+12
   ^IBE(399.6          CMNCHK+9,CMNCHK+10

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$CVALCHK    CMNCHK+14,CMNCHK+18,CMNCHK+31,CMNCHK+39,CMNCHK+40,CMNCHK+47,CMNCHK+48
   CVALCHK      CMNCHK+32,CMNCHK+33,CMNCHK+35,CMNCHK+39,CMNCHK+40,CMNCHK+44

External References
   $$GET1^DIQ          IBSYEI+5,IBSYEI+6,IBSYEI+7,IBSYEI+8,IBSYEI+9,IBSYEI+10,IBSYEI+15,IBSYEI+16,IBSYEI+17,IBSYEI+18,IBSYEI+19
                       IBSYEI+20,IBSYEI+28,IBSYEI+29,IBSYEI+30,IBSYEI+31,IBSYEI+32,IBSYEI+33,IBMICN+3,IBMICN+5,IBMICN+6,IBMICN+7
                       IBMICN+8,IBPRV3+1,IBMPID+1
                       IBMPID+2,IBMPID+3,IBMPID+7,IBMPID+8,IBMPID+9
   WARN^IBCBB11        CMNCHK+47,CMNCHK+48
   $$INSPRF^IBCEF      IBMPID+6
   $$CMNDATA^IBCEF31   CVALCHK+3

*****   END   *****


IBCCC2   * *  290 Lines,  15492 Bytes, Checksum: B139322972                                           Mar 20, 2019@15:10:13 page 5
              3291 bytes in comments
IBCCC2   ;ALB/AAS - CANCEL AND CLONE A BILL - CONTINUED ;6/6/03 9:56am
         ;;2.0;INTEGRATED BILLING;**80,106,124,138,51,151,137,161,182,211,245,155,296,320,348,349,371,400,433,432,447,516,577,592,60
          8**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
         ;MAP TO DGCRCC2
         ;
         ;STEP 5 - get remainder of data to move and store in MCCR then x-ref
         ;STEP 6 - go to screens, come out to IBB1 or something like that
         ;
STEP5    S IBIFN1=$P(^DGCR(399,IBIFN,0),"^",15) G END:$S(IBIFN1="":1,'$D(^DGCR(399,IBIFN1,0)):1,1:0)
         ; NOTE:  any new or changed data nodes may also need to be updated in IBNCPDP5
         ;move pure data nodes
         ; MRD;IB*2.0*516 - Added "In7" nodes.
         F I="I1","I17","I2","I27","I3","I37","M1" I $D(^DGCR(399,IBIFN1,I)) S ^DGCR(399,IBIFN,I)=^DGCR(399,IBIFN1,I)
         ;
         ;move top level data node. ;Do not move 'TX' node EXCEPT piece 8 (added with IB*2.0*432)
         ;F I="U","U1","U2","U3","UF2","UF3","UF31","C","M" I $D(^DGCR(399,IBIFN1,I)) S IBND(I)=^(I) D @I
         ; add new data nodes introduced with IB*2.0*432
         F I="TX","U","U1","U2","U3","U4","U5","U6","U7","U8","UF2","UF3","UF31","UF32","C","M" I $D(^DGCR(399,IBIFN1,I)) S IBND(I)=
          ^(I) D @I
         ;
         ;move multiple level data
         ;F I="CC","OC","OP","OT","RC","CP","CV","PRV" I $D(^DGCR(399,IBIFN1,I,0)) D @I
         ; add new data nodes introduced with IB*2.0*447 BI
         F I="CC","OC","OP","OT","RC","CP","CV","PRV","U9" I $D(^DGCR(399,IBIFN1,I,0)) D @I
         ;
         ;JWS;IB*2.0*592;add new Dental Claim fields; IA# 3820
         I $D(^DGCR(399,IBIFN1,"DEN")) S ^DGCR(399,IBIFN,"DEN")=^DGCR(399,IBIFN1,"DEN")
         I $D(^DGCR(399,IBIFN1,"DEN1",0)) S ^DGCR(399,IBIFN,"DEN1",0)=^DGCR(399,IBIFN1,"DEN1",0) D
         . S K=0 F  S K=$O(^DGCR(399,IBIFN1,"DEN1",K)) Q:'K  S ^DGCR(399,IBIFN,"DEN1",K,0)=^DGCR(399,IBIFN1,"DEN1",K,0)
         I $D(^DGCR(399,IBIFN1,"DEN2")) S ^DGCR(399,IBIFN,"DEN2")=^DGCR(399,IBIFN1,"DEN2")
         ;
         ; IB*2.0*432  ADDED IBSILENT flag so that this can be processed in background
         D FTPRV^IBCEU5(IBIFN,$G(IBSILENT)) ; Ask change prov type if form type not the same
         D COBCHG(IBIFN,,.IBCOB)
         ;
         D ^IBCCC3 ; copy table files (362.3)
         ;
         S I=$G(^DGCR(399,IBIFN1,0)) I $P(I,U,13)=7,$P(I,U,20)=1 D COPYB^IBCDC(IBIFN1,IBIFN) ; update auto bill files
         D PRIOR(IBIFN) ; add new bill to previous bills in series, primary/secondary
         ;
         I +$G(IBCTCOPY) N IBAUTO S IBAUTO=1 D PROC^IBCU7A(IBIFN),BILL^IBCRBC(IBIFN),CPTMOD26^IBCU73(IBIFN) D RECALL^DILFD(399,IBIFN
          _",",DUZ) G END
         ;
STEP6    N IBGOEND
         ; need to kill CRD flag prior to entering billing screens in case a copy for corresponding claim is needed
         K IBCNCRD
         ; don't call IB bill edit screens if this is non-MRA background processing
         I $G(IBSTSM)=1 G END
         I '$G(IBCE("EDI"))!$G(IBCE("EDI","NEW")),'$G(IBCEAUTO) D IBSCEDT G END:$G(IBGOEND)
         ;
         ;
END      K DFN,IB,IBA,IBA2,IBAD,IBADD1,IBBNO,IBCAN,IBCCC,IBDA,IBDPT,IBDR,IBDT,IBI,IBI1,IBIDS,IBIFN,IBIFN1,IBND,IBQUIT,IBU,IBUN,IBARS
          T,IBCOB,IBCNCOPY,IBCBCOPY,IBCNCRD,IBKEY
         K IBV,IBV1,IBW,IBWW,IBYN,IBZZ,PRCASV,PRCAERCD,PRCAERR,PRCASVC,PRCAT,IBBT,IBCH,IBNDS,IBOA,IBREV,IBX,DGXRF1,VAEL,VAERR,IBAC,I
          BCCC,IBDD1,IBIN,DGREV,DGREV00,DGREVHDR,IBCHK
         K IBBS,IBLS,DGPCM,IBIP,IBND0,IBNDU,IBO,IBPTF,IBST,IBUC,IBDD,D,%,%DT,DIC,VA,VADM,X,X1,X2,X3,X4,Y,I,J,K,DGRVRCAL,DDH,DGACTDT,
          DGAMNT,DGBR,DGBRN,DGBSI,DGBSLOS,IBA1,IBOD,IBINS,IBN,IBPROC,DGFUNC,DGIFN
         Q
         ;
         ;
IBSCEDT  ; call the IB bill edit screens and validate the data
         N IBV,IBPAR,IBAC,IBHV,IBH,IBCIREDT
         ; if the user came from CBW->PC and this is a non-MRA claim w/a paper EOB, set force print flag IB*2.0*432
         ; also, if the user came from CBW->PC and this is a non-MRA claim and the only EEOB we have has filing errors, set force pr
          int flag
         I $G(IBMRANOT)=1,$$COBN^IBCEF(IBIFN)>1,$G(IBFROM)=2 D 
         .I $G(IBDA)="" D FORCEPRT^IBCAPP($G(IBIFN)) Q
         .I $D(^IBM(361.1,IBDA,"ERR")) D FORCEPRT^IBCAPP($G(IBIFN)) Q
         D RECALL^DILFD(399,IBIFN_",",DUZ)
ST1      S IBV=0 D ^IBCSCU,^IBCSC1 I $G(IBPOPOUT) S IBGOEND=1 G IBSCX
         S IBAC=1
         D ^IBCB1
         I $G(IBCIREDT) G ST1
IBSCX    ;
         Q
         ;
         ;
TX       F J=8 I $P(IBND("TX"),"^",J)]"" S $P(^DGCR(399,IBIFN,"TX"),"^",J)=$P(IBND("TX"),"^",J)
         Q
U        F J=3,4,6:1:17,20 I $P(IBND("U"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U"),"^",J)=$P(IBND("U"),"^",J)
         Q
U1       F J=1:1:3,15 I $P(IBND("U1"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U1"),"^",J)=$P(IBND("U1"),"^",J)
         Q
U2       F J=1:1:19 I $P(IBND("U2"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U2"),"^",J)=$P(IBND("U2"),"^",J)
         Q
U3       F J=1:1:11 I $P(IBND("U3"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U3"),"^",J)=$P(IBND("U3"),"^",J)
         Q
UF2      F J=1,3 I $P(IBND("UF2"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF2"),"^",J)=$P(IBND("UF2"),"^",J)
         Q
UF3      F J=4:1:6 I $P(IBND("UF3"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF3"),"^",J)=$P(IBND("UF3"),"^",J)
         Q
U4       F J=1:1:14 I $P(IBND("U4"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U4"),"^",J)=$P(IBND("U4"),"^",J)
         Q
U5       F J=1:1:6 I $P(IBND("U5"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U5"),"^",J)=$P(IBND("U5"),"^",J)
         Q
U6       F J=1:1:6 I $P(IBND("U6"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U6"),"^",J)=$P(IBND("U6"),"^",J)
         Q
U7       F J=1:1:5 I $P(IBND("U7"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U7"),"^",J)=$P(IBND("U7"),"^",J)
         Q
U8       F J=1:1:3 I $P(IBND("U8"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U8"),"^",J)=$P(IBND("U8"),"^",J)
         Q
UF31     F J=3 I $P(IBND("UF31"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF31"),"^",J)=$P(IBND("UF31"),"^",J)
         Q
UF32     F J=1:1:3 I $P(IBND("UF32"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF32"),"^",J)=$P(IBND("UF32"),"^",J)
         Q
C        F J=10 I $P(IBND("C"),"^",J)]"" S $P(^DGCR(399,IBIFN,"C"),"^",J)=$P(IBND("C"),"^",J)
         I '$D(^DGCR(399,IBIFN1,"CP")) D CP1
         Q
M        F J=1:1:9,11:1:14 I $P(IBND("M"),"^",J)]"" S $P(^DGCR(399,IBIFN,"M"),"^",J)=$P(IBND("M"),"^",J)
         Q
CC       S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
         S IBDD=399.04 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$
          P(^(0),"^")
OP       S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
         S IBDD=399.043 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=
          $P(^(0),"^")
         Q
OC       S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
         S IBDD=399.041 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=
          $P(^(0),"^")
         Q
OT       S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
         S IBDD=399.048 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=
          $P(^(0),"^")
         Q
CV       ; Don't copy value codes from inpatient inst to inpatient prof bills
         I $$FT^IBCEF(IBIFN1)'=2,$$FT^IBCEF(IBIFN)=2 Q
         S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
         S IBDD=399.047 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=
          $P(^(0),"^")
         Q
RC       S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
         S IBDD=399.042 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S IBND("RC")=^(0) F K=1:1:16 S $P(^DGCR(399,IBIFN,I
          ,J,0),"^",K)=$P(IBND("RC"),"^",K),X=$P(IBND("RC"),"^",K)
         Q
CP       S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
         I +$G(IBNOCPT) Q
         S IBDD=399.0304 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S IBND("CP")=^(0),IBND("CP1")=$G(^(1)),IBND("CP2")
          =$G(^(2)),IBND("CP-AUX")=$G(^("AUX")) D
         . F K=1:1:7,9:1:14,16:1:22 S $P(^DGCR(399,IBIFN,I,J,0),"^",K)=$P(IBND("CP"),"^",K)
         . ; IB*2.0*432 add new 1 node
         . ; MRD;IB*2.0*516 - Added pieces 7 & 8 (NDC, Units) to 1-node.
         . F K=1:1:8 S $P(^DGCR(399,IBIFN,I,J,1),"^",K)=$P(IBND("CP1"),"^",K)
         . ; WCJ;IB*2.0*577 - Added piece 1 (UNITS/BASIS OF MEASUREMENT) to 2-node.
         . F K=1:1:1 S $P(^DGCR(399,IBIFN,I,J,2),"^",K)=$P(IBND("CP2"),"^",K)
         . ; esg - 11/2/06 - IB*2*348 - 50.09 field was added - AUX piece [9]
         . I IBND("CP-AUX")'="" F K=1:1:9 S $P(^DGCR(399,IBIFN,I,J,"AUX"),"^",K)=$P(IBND("CP-AUX"),"^",K)
         . ; IB*2.0*432 add new LNPRV multiple
         . I $D(^DGCR(399,IBIFN1,I,J,"LNPRV",0)) S ^DGCR(399,IBIFN,I,J,"LNPRV",0)=^DGCR(399,IBIFN1,I,J,"LNPRV",0) D
         .. S K=0 F  S K=$O(^DGCR(399,IBIFN1,I,J,"LNPRV",K)) Q:'K  D
         ... S ^DGCR(399,IBIFN,I,J,"LNPRV",K,0)=^DGCR(399,IBIFN1,I,J,"LNPRV",K,0)
         . I $D(^DGCR(399,IBIFN1,I,J,"MOD",0)) S ^DGCR(399,IBIFN,I,J,"MOD",0)=^DGCR(399,IBIFN1,I,J,"MOD",0) D
         .. S K=0 F  S K=$O(^DGCR(399,IBIFN1,I,J,"MOD",K)) Q:'K  D
         ... I $G(IBNOTC),$P($$MOD^ICPTMOD(+$P($G(^DGCR(399,IBIFN1,I,J,"MOD",K,0)),U,2),"I"),U,2)="TC" Q  ; Don't copy TC modifier f
          rom inst to prof bill
         ... S ^DGCR(399,IBIFN,I,J,"MOD",K,0)=^DGCR(399,IBIFN1,I,J,"MOD",K,0)
         . ;JWS;IB*2.0*592;add new Dental claim form fields
         . I $D(^DGCR(399,IBIFN1,I,J,"DEN")) S ^DGCR(399,IBIFN,I,J,"DEN")=^DGCR(399,IBIFN1,I,J,"DEN")
         . I $D(^DGCR(399,IBIFN1,I,J,"DEN1",0)) S ^DGCR(399,IBIFN,I,J,"DEN1",0)=^DGCR(399,IBIFN1,I,J,"DEN1",0) D
         .. N IBDL
         .. S K=0 F  S K=$O(^DGCR(399,IBIFN1,I,J,"DEN1",K)) Q:'K  D
         ... S ^DGCR(399,IBIFN,I,J,"DEN1",K,0)=^DGCR(399,IBIFN1,I,J,"DEN1",K,0)
         ... ;JWS;IB*2.0*592;If DENT file 228.2 link, remove it from old invoice.
         ... S IBDL=$P($G(^DGCR(399,IBIFN1,I,J,"DEN1",K,0)),"^",7)
         ... I IBDL K ^DGCR(399,"ADT",IBDL,IBIFN1)
         . ;JRA;IB*2.0*608 Add CMN info - Node 'CMN-10126' contains data specific to only the CMS-10126 form, node 'CMN-484' contain
          s data specific to
         . ; only the CMN-484 form, and node 'CMN' contains data common to both forms.
         . I $D(^DGCR(399,IBIFN1,I,J,"CMN")) S ^DGCR(399,IBIFN,I,J,"CMN")=^DGCR(399,IBIFN1,I,J,"CMN")
         . I $D(^DGCR(399,IBIFN1,I,J,"CMN-10126")) S ^DGCR(399,IBIFN,I,J,"CMN-10126")=^DGCR(399,IBIFN1,I,J,"CMN-10126")
         . I $D(^DGCR(399,IBIFN1,I,J,"CMN-484")) S ^DGCR(399,IBIFN,I,J,"CMN-484")=^DGCR(399,IBIFN1,I,J,"CMN-484")
CP1      S IBCOD=$P($G(^DGCR(399,IBIFN,0)),"^",9) Q:IBCOD=""!('$D(^DGCR(399,IBIFN1,"C")))
         I IBCOD=9 F DGI=4,5,6 I $P(^DGCR(399,IBIFN1,"C"),"^",DGI) S X=$P(^("C"),"^",DGI)_";ICD0(",DGPROCDT=$P(^("C"),"^",DGI+7) D F
          ILE
         I IBCOD=4 F DGI=1,2,3 I $P(^DGCR(399,IBIFN1,"C"),"^",DGI) S X=$P(^("C"),"^",DGI)_";ICPT(",DGPROCDT=$P(^("C"),"^",DGI+10) D 
          FILE
         I IBCOD=5 F DGI=7,8,9 I $P(^DGCR(399,IBIFN1,"C"),"^",DGI) S X=$P(^("C"),"^",DGI)_";ICPT(",DGPROCDT=$P(^("C"),"^",DGI+4) D F
          ILE
         Q
         ;
PRV      ; Copy providers for cloned claim
         N Z,Z0,CNT
         S Z=$P($G(^DGCR(399,IBIFN,0)),U,19),Z0=$P($G(^DGCR(399,IBIFN1,0)),U,19),CNT=0
         S IBDD=399.0222 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) D
         . I $$GETNPI^IBCEF73A($P(^DGCR(399,IBIFN1,I,J,0),U,2))="" Q  ;Don't file provider if no NPI - IB*2*516
         . S CNT=CNT+1,^DGCR(399,IBIFN,I,CNT,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
         . I Z'=Z0,$S(X=3:Z0=3,X=4:Z0=2,1:0) S $P(^DGCR(399,IBIFN,I,CNT,0),U)=(Z0+1)
         I CNT S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0),$P(^DGCR(399,IBIFN,I,0),U,3)=CNT,$P(^DGCR(399,IBIFN,I,0),U,4)=CNT
         Q
         ;
U9       ; Added for new data elements in IB*2.0*447 BI
         M ^DGCR(399,IBIFN,I)=^DGCR(399,IBIFN1,I)
         Q
         ;
COB      S J=0 F  S J=$O(IBCOB(I,J)) Q:'J  S $P(^DGCR(399,IBIFN,I),U,J)=IBCOB(I,J)
         Q
         ;
FILE     N DIC,DIE,DR,DA,X,Y,DLAYGO,DD,DO
         I '$D(^DGCR(399,IBIFN,"CP",0)) S DIC("P")=$$GETSPEC^IBEFUNC(399,304)
         S DIC(0)="L",DLAYGO=399,DA(1)=IBIFN,DIC="^DGCR(399,"_DA(1)_",""CP""," Q:X=""  D FILE^DICN K DO,DD Q:+Y<1  S DA=+Y
         S DIE="^DGCR(399,"_DA(1)_",""CP"",",DR="1///"_DGPROCDT D ^DIE
         K DGPROCDT
         Q
         ;
INDEX    ;index entire file (set logic)
         N IBMAED D SAVERC(IBIFN,.IBMAED)  ; IB*2.0*447 BI - Save the value of piece 16 of each RC node before re-indexing.
         S DIK="^DGCR(399,",DA=IBIFN D IX1^DIK K DA,DIK
         D RESTRC(IBIFN,.IBMAED)  ; IB*2.0*447 BI - Restore the value of piece 16 of each RC node before re-indexing.
         Q
         ;
PRIOR(IBIFN) --
          ; set Secondary/Tertiary Bill #s on prior bills, if the bill is cancelled remove it from prior bills
         N IBSEQ,IBSEQN,IBM1,I,IBIFN1
         S IBSEQ=$$COB^IBCEF(IBIFN)
         S IBSEQN=$S(IBSEQ="S":6,IBSEQ="T":7,1:"") Q:'IBSEQN
         ;
         S IBM1=$G(^DGCR(399,IBIFN,"M1")) I +$P(^DGCR(399,IBIFN,0),U,13)=7 S IBIFN=""
         F I=5,6 I I<IBSEQN  S IBIFN1=+$P(IBM1,U,I) I +IBIFN1,$D(^DGCR(399,+IBIFN1,0)) S $P(^DGCR(399,IBIFN1,"M1"),U,IBSEQN)=IBIFN
         Q
         ;
COBCHG(IBIFN,IBINS,IBCOB) --
          ; Make changes for a new COB payer for bill
         ; IBIFN = ien of bill in file 399
         ; IBINS = ien of bill's current insurance (optional)
         ; IBCOB = array subscripted by node,piece of COB data field change
         ;
         N I,IBFRMTYP,IBTAXLST
         ; Subtract the Prior Payments from the bill's Offset (these are re-added by triggers)
         F I=4,5,6  S $P(^DGCR(399,IBIFN,"U1"),U,2)=$P($G(^DGCR(399,IBIFN,"U1")),U,2)-$P($G(^DGCR(399,IBIFN,"U2")),U,I)
         ;
         I $G(IBINS),$$MCRWNR^IBEFUNC(IBINS) D
         . ;MCRWNR is current insurance ... move payer only
         . N IBCOBN,IBX
         . S IBCOBN=$$COBN^IBCEF(IBIFN)
         . S IBCOB(0,21)=$P("S^T^",U,IBCOBN)
         . S IBCOB("M1",IBCOBN+4)=IBIFN
         . S IBCOB("TX",1)="",IBCOB("TX",2)=""
         . S IBX=$$REQMRA^IBEFUNC(IBIFN)
         . I IBX=0 S IBCOB("TX",5)=0                         ; MRA not needed
         . I IBX["R" S IBCOB("TX",5)="A"                     ; MRA skipped
         . I IBX=1,$$CHK^IBCEMU1(IBIFN) S IBCOB("TX",5)="C"  ; MRA on file
         . I $G(IBPRCOB) S IBCOB("TX",5)="C"                 ; MRA being proc'd
         . D PRIOR(IBIFN)
         . Q
         ;
         ;reset fields for next Sequence Payer
         F I=0,"M1","U2","TX" I $D(IBCOB(I)) D COB
         ;
         ; IB*2.0*211
         ; save off Form Type
         S IBFRMTYP=$P($G(^DGCR(399,IBIFN,0)),U,19)
         ; Save off Taxonomies for providers.
         S I=0 F  S I=$O(^DGCR(399,IBIFN,"PRV",I)) Q:'I  S IBTAXLST(I)=$P($G(^DGCR(399,IBIFN,"PRV",I,0)),U,15)
         ;
         ; fire xrefs set logic
         D INDEX
         ;
         ; Restore Form Type if changed, but don't restore Form Type if
         ;   creating CMS-1500 claim from CTCOPY1^IBCCCB
         I $G(IBCTCOPY)'=1,IBFRMTYP'=$P($G(^DGCR(399,IBIFN,0)),U,19) N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR=".19////"_IBFRMTYP D
           ^DIE
         ;
         ; Restore Claim MRA Status field since triggers in fields 101 & 102
         ;   will overwrite the correct value when processing the MRA/EOB.
         ; If we're processing the MRA/EOB, then a valid MRA has been received.
         I $G(IBPRCOB) N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR="24////C" D ^DIE
         ;
         ; Only if cloning, then restore Taxonomies in fields 243 and 244 and 252.
         I '$G(IBINS),'$G(IBPRCOB) D
         . S I=$P($G(IBND("U3")),U,2)
         . I I'=$P($G(^DGCR(399,IBIFN,"U3")),U,2) D
         .. N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR="243////"_$S(I'="":I,1:"@") D ^DIE
         . ;
         . S I=$P($G(IBND("U3")),U,3)
         . I I'=$P($G(^DGCR(399,IBIFN,"U3")),U,3) D
         .. N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR="244////"_$S(I'="":I,1:"@") D ^DIE
         . ;
         . S I=$P($G(IBND("U3")),U,11)
         . I I'=$P($G(^DGCR(399,IBIFN,"U3")),U,11) D
         .. N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR="252////"_$S(I'="":I,1:"@") D ^DIE
         . Q
         ;
         ; Restore Taxonomies in field .15 in sub-file 399.0222.
         S IBTAXLST=0 F  S IBTAXLST=$O(IBTAXLST(IBTAXLST)) Q:'IBTAXLST  D
         . S I=IBTAXLST(IBTAXLST)
         . I I=$P($G(^DGCR(399,IBIFN,"PRV",IBTAXLST,0)),U,15) Q  ; No change
         . N DA,DIE,DR
         . S DA(1)=IBIFN,DA=IBTAXLST
         . S DIE="^DGCR(399,"_DA(1)_",""PRV"",",DR=".15////"_$S(I'="":I,1:"@")
         . D ^DIE
         . Q
         ;
         K IBCOB("TX")
         Q
         ;
SAVERC(IBIFN,IBMAED) --
           ; IB*2.0*447 BI - Save the value of piece 16 of each RC node before re-indexing.
         Q:$G(IBCTCOPY)=1  Q:$G(IBCTCOPY)=2
         N IBCNT S IBCNT=0
         Q:'$G(IBIFN)  Q:'$D(^DGCR(399,IBIFN,"RC"))
         F  S IBCNT=$O(^DGCR(399,IBIFN,"RC",IBCNT)) Q:+IBCNT=0  D
         . S IBMAED(IBCNT)=$P($G(^DGCR(399,IBIFN,"RC",IBCNT,0)),U,16)
         Q
         ;
RESTRC(IBIFN,IBMAED) --
           ; IB*2.0*447 BI - Restore the value of piece 16 of each RC node after re-indexing.
         Q:$G(IBCTCOPY)=1  Q:$G(IBCTCOPY)=2
         N IBCNT S IBCNT=0
         Q:'$G(IBIFN)  Q:'$D(^DGCR(399,IBIFN,"RC"))
         F  S IBCNT=$O(IBMAED(IBCNT)) Q:+IBCNT=0  D
         . S $P(^DGCR(399,IBIFN,"RC",IBCNT,0),U,16)=IBMAED(IBCNT)
         Q

*****   INDEX OF IBCCC2   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   %            END+2!
   %DT          END+2!
   CNT          PRV+1~,PRV+2*,PRV+5*,PRV+6,PRV+7
   D            END+2!
   DA           FILE~,FILE+2*,INDEX+2*!,COBCHG+38~*,COBCHG+43~*,COBCHG+49~*,COBCHG+53~*,COBCHG+57~*,COBCHG+64~,COBCHG+65*
   DA(1         FILE+2*,FILE+3,COBCHG+65*,COBCHG+66
   DD           FILE~,FILE+2!
   DDH          END+2!
   DFN          END!
   DGACTDT      END+2!
   DGAMNT       END+2!
   DGBR         END+2!
   DGBRN        END+2!
   DGBSI        END+2!
   DGBSLOS      END+2!
   DGFUNC       END+2!
>> DGI          CP1+1*,CP1+2*,CP1+3*
   DGIFN        END+2!
   DGPCM        END+2!
   DGPROCDT     CP1+1*,CP1+2*,CP1+3*,FILE+3,FILE+4!
   DGREV        END+1!
   DGREV00      END+1!
   DGREVHDR     END+1!
   DGRVRCAL     END+2!
   DGXRF1       END+1!
   DIC          END+2!,FILE~,FILE+2*
   DIC("P"      FILE+1*
   DIC(0        FILE+2*
   DIE          FILE~,FILE+3*,COBCHG+38~*,COBCHG+43~*,COBCHG+49~*,COBCHG+53~*,COBCHG+57~*,COBCHG+64~,COBCHG+66*
   DIK          INDEX+2*!
   DLAYGO       FILE~,FILE+2*
   DO           FILE~,FILE+2!
   DR           FILE~,FILE+3*,COBCHG+38~*,COBCHG+43~*,COBCHG+49~*,COBCHG+53~*,COBCHG+57~*,COBCHG+64~,COBCHG+66*
   DUZ          STEP5+31,IBSCEDT+7
   I            STEP5+4*,STEP5+9*,STEP5+14*,STEP5+28*,END+2!,CC,CC+1,OP,OP+1,OC,OC+1,OT,OT+1,CV+2,CV+3,RC,RC+1,CP,CP+2,CP+3,CP+6
                CP+8,CP+10,CP+12,CP+13,CP+14,CP+15,CP+16,CP+17,CP+18,CP+20,CP+21,CP+23,CP+24,CP+26,CP+30,CP+31,CP+32,PRV+3,PRV+4
                PRV+5
                PRV+6,PRV+7,U9+1,COB,PRIOR+1~,PRIOR+6*,COBCHG+5~,COBCHG+7*,COBCHG+25*,COBCHG+31*,COBCHG+47*,COBCHG+48,COBCHG+49
                COBCHG+51*,COBCHG+52,COBCHG+53,COBCHG+55*,COBCHG+56,COBCHG+57,COBCHG+62*,COBCHG+63,COBCHG+66
   IB           END!
   IBA          END!
   IBA1         END+2!
   IBA2         END!
   IBAC         END+1!,IBSCEDT+1~,ST1+1*
   IBAD         END!
   IBADD1       END!
   IBARST       END!
   IBAUTO       STEP5+31~*
   IBBNO        END!
   IBBS         END+2!
   IBBT         END+1!
   IBCAN        END!
   IBCBCOPY     END!
   IBCCC        END!,END+1!
>> IBCE("EDI"   STEP6+5
>> IBCEAUTO     STEP6+5
   IBCH         END+1!
   IBCHK        END+1!
   IBCIREDT     IBSCEDT+1~,ST1+3
   IBCNCOPY     END!
   IBCNCRD      STEP6+2!,END!
   IBCNT        SAVERC+2~*,SAVERC+4*,SAVERC+5,RESTRC+2~*,RESTRC+4*,RESTRC+5
   IBCOB        STEP5+24,END!,COBCHG~
   IBCOB(       COB,COBCHG+25
   IBCOB("M1"   COBCHG+14*
   IBCOB("TX"   COBCHG+15*,COBCHG+17*,COBCHG+18*,COBCHG+19*,COBCHG+20*,COBCHG+70!
   IBCOB(0      COBCHG+13*
   IBCOBN       COBCHG+11~,COBCHG+12*,COBCHG+13,COBCHG+14
>> IBCOD        CP1*,CP1+1,CP1+2,CP1+3
>> IBCTCOPY     STEP5+31,COBCHG+38,SAVERC+1,RESTRC+1
   IBDA         END!,IBSCEDT+5,IBSCEDT+6
   IBDD         END+2!,CC+1*,OP+1*,OC+1*,OT+1*,CV+3*,RC+1*,CP+2*,PRV+3*
   IBDD1        END+1!
   IBDL         CP+22~,CP+26*,CP+27
   IBDPT        END!
   IBDR         END!
   IBDT         END!
   IBFRMTYP     COBCHG+5~,COBCHG+29*,COBCHG+38
>> IBFROM       IBSCEDT+4
   IBGOEND      STEP6~,STEP6+5,ST1*
   IBH          IBSCEDT+1~
   IBHV         IBSCEDT+1~
   IBI          END!
   IBI1         END!
   IBIDS        END!
   IBIFN        STEP5,STEP5+4,STEP5+17,STEP5+18,STEP5+19,STEP5+20,STEP5+23,STEP5+24,STEP5+28,STEP5+29,STEP5+31,END!,IBSCEDT+4
                IBSCEDT+5,IBSCEDT+6,IBSCEDT+7,TX,U,U1,U2,U3,UF2,UF3,U4,U5,U6,U7,U8,UF31,UF32,C,M,CC,CC+1,OP,OP+1,OC,OC+1,OT,OT+1
                CV+1,CV+2
                CV+3,RC,RC+1,CP,CP+3,CP+6,CP+8,CP+10,CP+12,CP+14,CP+15,CP+18,CP+20,CP+21,CP+24,CP+30,CP+31,CP+32,CP1,PRV+2,PRV+5
                PRV+6,PRV+7,U9+1,COB,FILE+1,FILE+2,INDEX+1,INDEX+2,INDEX+3,PRIOR~,PRIOR+2,PRIOR+5*,PRIOR+6,COBCHG~,COBCHG+7
                COBCHG+12
                COBCHG+14,COBCHG+16,COBCHG+19,COBCHG+21,COBCHG+29,COBCHG+31,COBCHG+38,COBCHG+43,COBCHG+48,COBCHG+49,COBCHG+52
                COBCHG+53,COBCHG+56,COBCHG+57,COBCHG+63,COBCHG+65,SAVERC~,SAVERC+3,SAVERC+4,SAVERC+5,RESTRC~,RESTRC+3,RESTRC+5
   IBIFN1       STEP5*,STEP5+4,STEP5+9,STEP5+14,STEP5+17,STEP5+18,STEP5+19,STEP5+20,STEP5+28,END!,C+1,CC,CC+1,OP,OP+1,OC,OC+1,OT
                OT+1,CV+1,CV+2,CV+3,RC,RC+1,CP,CP+2,CP+12,CP+13,CP+14,CP+15,CP+16,CP+17,CP+18,CP+20,CP+21,CP+23,CP+24,CP+26,CP+27
                CP+30
                CP+31,CP+32,CP1,CP1+1,CP1+2,CP1+3,PRV+2,PRV+3,PRV+4,PRV+5,PRV+7,U9+1,PRIOR+1~,PRIOR+6*
   IBIN         END+1!
   IBINS        END+2!,COBCHG~,COBCHG+9,COBCHG+46
   IBIP         END+2!
   IBKEY        END!
   IBLS         END+2!
   IBM1         PRIOR+1~,PRIOR+5*,PRIOR+6
   IBMAED       INDEX+1~,INDEX+3,SAVERC~,RESTRC~
   IBMAED(      SAVERC+5*,RESTRC+4,RESTRC+5
>> IBMRANOT     IBSCEDT+4
   IBN          END+2!
   IBND         END!
   IBND(        STEP5+9*
   IBND("C"     C
   IBND("CP"    CP+2*,CP+3
   IBND("CP-AUX" 
                CP+2*,CP+10
   IBND("CP1"   CP+2*,CP+6
   IBND("CP2"   CP+2*,CP+8
   IBND("M"     M
   IBND("RC"    RC+1*
   IBND("TX"    TX
   IBND("U"     U
   IBND("U1"    U1
   IBND("U2"    U2
   IBND("U3"    U3,COBCHG+47,COBCHG+51,COBCHG+55
   IBND("U4"    U4
   IBND("U5"    U5
   IBND("U6"    U6
   IBND("U7"    U7
   IBND("U8"    U8
   IBND("UF2"   UF2
   IBND("UF3"   UF3
   IBND("UF31"  UF31
   IBND("UF32"  UF32
   IBND0        END+2!
   IBNDS        END+1!
   IBNDU        END+2!
>> IBNOCPT      CP+1
>> IBNOTC       CP+17
   IBO          END+2!
   IBOA         END+1!
   IBOD         END+2!
   IBPAR        IBSCEDT+1~
>> IBPOPOUT     ST1
>> IBPRCOB      COBCHG+20,COBCHG+43,COBCHG+46
   IBPROC       END+2!
   IBPTF        END+2!
   IBQUIT       END!
   IBREV        END+1!
   IBSEQ        PRIOR+1~,PRIOR+2*,PRIOR+3
   IBSEQN       PRIOR+1~,PRIOR+3*,PRIOR+6
>> IBSILENT     STEP5+23
   IBST         END+2!
>> IBSTSM       STEP6+4
   IBTAXLST     COBCHG+5~,COBCHG+61*,COBCHG+62,COBCHG+63,COBCHG+65
   IBTAXLST(    COBCHG+31*,COBCHG+61,COBCHG+62
   IBU          END!
   IBUC         END+2!
   IBUN         END!
   IBV          END+1!,IBSCEDT+1~,ST1*
   IBV1         END+1!
   IBW          END+1!
   IBWW         END+1!
   IBX          END+1!,COBCHG+11~,COBCHG+16*,COBCHG+17,COBCHG+18,COBCHG+19
   IBYN         END+1!
   IBZZ         END+1!
   J            END+2!,TX*,U*,U1*,U2*,U3*,UF2*,UF3*,U4*,U5*,U6*,U7*,U8*,UF31*,UF32*,C*,M*,CC+1*,OP+1*,OC+1*,OT+1*,CV+3*,RC+1*,CP+2*
                CP+3,CP+6,CP+8,CP+10,CP+12,CP+13,CP+14,CP+15,CP+16,CP+17,CP+18,CP+20,CP+21,CP+23,CP+24,CP+26,CP+30,CP+31,CP+32
                PRV+3*
                PRV+4,PRV+5,COB*
   K            STEP5+19*,END+2!,RC+1*,CP+3*,CP+6*,CP+8*,CP+10*,CP+13*,CP+14,CP+16*,CP+17,CP+18,CP+23*,CP+24,CP+26
   PRCAERCD     END+1!
   PRCAERR      END+1!
   PRCASV       END+1!
   PRCASVC      END+1!
   PRCAT        END+1!
   U            STEP5+28,CP+17,PRV+2,PRV+4,PRV+6,PRV+7,COB,PRIOR+5,PRIOR+6,COBCHG+7,COBCHG+13,COBCHG+29,COBCHG+31,COBCHG+38
                COBCHG+47,COBCHG+48,COBCHG+51,COBCHG+52,COBCHG+55,COBCHG+56,COBCHG+63,SAVERC+5,RESTRC+5
   VA           END+2!
   VADM         END+2!
   VAEL         END+1!
   VAERR        END+1!
   X            END+2!,CC+1*,OP+1*,OC+1*,OT+1*,CV+3*,RC+1*,CP1+1*,CP1+2*,CP1+3*,PRV+5*,PRV+6,FILE~,FILE+2
   X1           END+2!
   X2           END+2!
   X3           END+2!
   X4           END+2!
   Y            END+2!,FILE~,FILE+2
   Z            PRV+1~,PRV+2*,PRV+6
   Z0           PRV+1~,PRV+2*,PRV+6

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399           STEP5,STEP5+4*,STEP5+9,STEP5+14,STEP5+17*,STEP5+18*,STEP5+19*,STEP5+20*,STEP5+28,TX*,U*,U1*,U2*,U3*,UF2*
                       UF3*,U4*,U5*,U6*,U7*,U8*,UF31*,UF32*,C*,C+1,M*,CC*,CC+1*,OP*,OP+1*,OC*,OC+1*,OT*,OT+1*,CV+2*,CV+3*,RC*,RC+1*
                       CP*,CP+2,CP+3*,CP+6*
                       CP+8*,CP+10*,CP+12*,CP+13,CP+14*,CP+15*,CP+16,CP+17,CP+18*,CP+20*,CP+21*,CP+23,CP+24*,CP+26,CP+27!,CP+30*
                       CP+31*,CP+32*,CP1,CP1+1,CP1+2,CP1+3,PRV+2,PRV+3,PRV+4,PRV+5*,PRV+6*,PRV+7*,U9+1*,COB*,FILE+1,PRIOR+5
                       PRIOR+6*,COBCHG+7*,COBCHG+29
                       COBCHG+31,COBCHG+38,COBCHG+48,COBCHG+52,COBCHG+56,COBCHG+63,SAVERC+3,SAVERC+4,SAVERC+5,RESTRC+3,RESTRC+5*
   ^IBM(361.1          IBSCEDT+6

Naked Globals
   ^(           STEP5+9,CC+1,OP+1,OC+1,OT+1,CV+3,RC+1,CP+2,PRV+3
   ^("AUX"      CP+2
   ^("C"        CP1+1,CP1+2,CP1+3
   ^(0          CC+1,OP+1,OC+1,OT+1,CV+3,RC+1,CP+2,PRV+5
   ^(1          CP+2
   ^(2          CP+2

Cache Objects
   NONE

Marked Items
   NONE

Label References
   @(           STEP5+9,STEP5+14
   COB          COBCHG+25
   COBCHG       STEP5+24
   CP1          C+1
   END          STEP5,STEP5+31,STEP6+4,STEP6+5
   FILE         CP1+1,CP1+2,CP1+3
   IBSCEDT      STEP6+5
   IBSCX        ST1
   INDEX        COBCHG+34
   PRIOR        STEP5+29,COBCHG+21
   RESTRC       INDEX+3
   SAVERC       INDEX+1
   ST1          ST1+3

External References
   FILE^DICN           FILE+2
   ^DIE                FILE+3,COBCHG+38,COBCHG+43,COBCHG+49,COBCHG+53,COBCHG+57,COBCHG+67
   IX1^DIK             INDEX+2
   RECALL^DILFD        STEP5+31,IBSCEDT+7
   FORCEPRT^IBCAPP     IBSCEDT+5,IBSCEDT+6
   ^IBCB1              ST1+2
   ^IBCCC3             STEP5+26
   COPYB^IBCDC         STEP5+28
   $$COB^IBCEF         PRIOR+2
   $$COBN^IBCEF        IBSCEDT+4,COBCHG+12
   $$FT^IBCEF          CV+1
   $$GETNPI^IBCEF73A   PRV+4
   $$CHK^IBCEMU1       COBCHG+19
   FTPRV^IBCEU5        STEP5+23
   BILL^IBCRBC         STEP5+31
   ^IBCSC1             ST1
   ^IBCSCU             ST1
   CPTMOD26^IBCU73     STEP5+31
   PROC^IBCU7A         STEP5+31
   $$GETSPEC^IBEFUNC   FILE+1
   $$MCRWNR^IBEFUNC    COBCHG+9
   $$REQMRA^IBEFUNC    COBCHG+16
   $$MOD^ICPTMOD       CP+17

*****   END   *****


IBCE837B * *  32 Lines,  1786 Bytes, Checksum: B4349124                                               Mar 20, 2019@15:10:13 page 6
              832 bytes in comments
IBCE837B ;ALB/TMP - OUTPUT FOR 837 TRANSMISSION (cont) ;24-APR-01
         ;;2.0;INTEGRATED BILLING;**137,191,197,320,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
QTXMT(IBSITE8) --
          ; Run now or queue EDI bill transmit (part of nightly job)
         ; IBSITE8 = the '8' node of the site parameters file (350.9)
         I $P(IBSITE8,U,6)="" D
         . D EN1("",1)
         E  D
         . N Z,Z0
         . F Z=1:1:4 S Z0=$P($P(IBSITE8,U,6),";",Z) Q:Z0=""  D
         .. S IBQDT=$S($E(($$NOW^XLFDT()#1*10000\1)_"0000",1,4)>Z0:$$FMADD^XLFDT(DT,1),1:DT)_"."_Z0  ; If time to queue is after the
           current time, queue for the next day
         .. D EN1("",1,+IBQDT)
         Q
         ;
EN1(IBZTSK,IBNOASK,IBQDT,IBABORT,IBRSBTST) --
          ;Txmit 837's for bills waiting transmission
         ; Pass IBZTSK by ref to get task # if job is tasked
         ; IBNOASK = flag: 0 = ask to queue,  1 = no ask to queue
         ; IBQDT = if IBNOASK=1, this can be the date/time to queue the job
         ; Pass IBABORT by reference to determine if user aborted process
         ;
         ; IBRSBTST = 1 /IB*2*608 (vd) Instituted this variable for US2486 to indicate
         ;                  a claim is being resubmitted and should be handled special
         ;                  concerning the COB, OFFSET, PRIOR PAYMENTS calculation by the
         ;                  OUTPUT FORMATTER. This is for "TEST" only.
         ;
         N Z S Z=$O(^IBE(353,"B","IB 837 TRANSMISSION",0)),Z=$S($P($G(^IBE(353,+Z,2)),U,8):$P(^(2),U,8),1:Z)
         I Z D
         . ;/IB*2*608 (vd) - US2486 added the parameter IBRSBTST to the following 2 lines.
         . I $D(^TMP("IBRESUBMIT",$J))!($G(IBNOASK)) D FORM^IBCEFG7(Z,$P($G(^IBE(350.9,1,8)),U),+$G(IBNOASK),$S($G(IBNOASK):$G(IBQDT
          ),1:""),.IBZTSK,.IBABORT,$G(IBRSBTST)) Q
         . D FORM^IBCEFG7(Z,$P($G(^IBE(350.9,1,8)),U),+$G(IBNOASK),$S($G(IBNOASK):$G(IBQDT),1:""),"",.IBABORT,$G(IBRSBTST))
         Q

*****   INDEX OF IBCE837B   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   DT           QTXMT+7
   IBABORT      EN1~,EN1+14,EN1+15
   IBNOASK      EN1~,EN1+14,EN1+15
   IBQDT        QTXMT+7*,QTXMT+8,EN1~,EN1+14,EN1+15
   IBRSBTST     EN1~,EN1+14,EN1+15
   IBSITE8      QTXMT~,QTXMT+2,QTXMT+6
   IBZTSK       EN1~,EN1+14
   U            QTXMT+2,QTXMT+6,EN1+11,EN1+14,EN1+15
   Z            QTXMT+5~,QTXMT+6*,EN1+11~*,EN1+12,EN1+14,EN1+15
   Z0           QTXMT+5~,QTXMT+6*,QTXMT+7

Global Variables  ( * Changed  ! Killed)
   ^IBE(350.9          EN1+14,EN1+15
   ^IBE(353            EN1+11
   ^TMP("IBRESUBMIT"   EN1+14

Naked Globals
   ^(2          EN1+11

Cache Objects
   NONE

Marked Items
   NONE

Label References
   EN1          QTXMT+3,QTXMT+8

External References
   FORM^IBCEFG7        EN1+14,EN1+15
   $$FMADD^XLFDT       QTXMT+7
   $$NOW^XLFDT         QTXMT+7

*****   END   *****


IBCEF11  * *  287 Lines,  13412 Bytes, Checksum: B100824598                                           Mar 20, 2019@15:10:13 page 7
              5700 bytes in comments
IBCEF11  ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS - CONT ;30-JAN-96
         ;;2.0;INTEGRATED BILLING;**51,137,155,309,335,348,349,371,432,447,473,516,577,592,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
BOX24D(A,IB) --
          ; Returns the lines for boxes 19-24 of the CMS-1500 display
         ; IB = flag is 1 if only box 24 is needed
         Q $S('$G(IB):"36",1:"44")_"^55"
         ;
RCBOX()  ; Returns the lines for revenue code boxes of the UB-04 display
         Q "19^41"
         ;
OUTPT(IBIFN,IBPRINT) --
          ; Returns an array of service line data from
         ;                 CMS-1500 box 24.  Output is in IBXDATA(n)
         ; IBPRINT = print flag  1: return print fields
         ;                       0: return EDI fields
         ; Uses diagnosis array ^TMP("IBXSAVE",$J,"DX",IBIFN,DIAG CODE)=SEQ #
         ;   if it already exists. If not, it builds it from N-DIAGNOSES element
         ;
         ; For EDI call: Returns IBXDATA(n)=
         ;   begin date(YYYYMMDD) ^ end date(YYYYMMDD) ^ pos ^ tos ^
         ;   proc code/revenue code - if no procedure (not the pointers) ^
         ;   type of code ^ dx pointer(s ) ^ unit charge ^ units ^ modifiers separated by ;
         ;   ^ purchased charge amount ^ anesthesia minutes ^ emergency indicator ^
         ;   lab-type service flag ^ NDC ^ Units/Quantity ^ Unit/Basis of Measurement (vd/IB*2*577)
         ;
         ;   Also Returns IBXDATA(IBI,"COB",COB,m) with COB data for each line
         ;      item found in an accepted EOB for the bill and = the reference
         ;      line in the first '^' piece followed by the '0' node data of file
         ;      361.115 (LINE LEVEL ADJUSTMENTS)
         ;       COB = COB sequence # of adjustment's ins co, m = seq #
         ;         -- AND --
         ;    IBXDATA(IBI,"COB",COB,m,z,p)=
         ;           the data on the '0' node for each subordinate entry of file
         ;           361.11511 (REASONS) (Only first 3 pieces for 837 output)
         ;       z = group code, sometimes preceeded by a space   p = seq #
         ;
         ; For Print call: Returns begin date(DDMMYYYY)^end date(DDMMYYYY) or
         ;   null if equal to begin date^pos^tos^bedsection name(if no procedure)
         ;   or procedure code(not the pointer)^ ... refer to EDI call results
         ;   Also, IBXDATA(n,"TEXT")=the text to print on first line of box 24,
         ;   If no procedure code, returns IBXDATA(n,"A")=rev code abbrev
         ;
         ;  For both calls, returns IBXDATA(n,item type,item ptr)=""
         ;      -- AND --
         ;   IBXDATA(n,"RX")=RX#^drug name^NDC^refill #^(re)fill date^qty^days
         ;                   ^chrge^ien of file 362.4^NDC format
         ;           If line references a prescription
         ;      -- AND --
         ;   If no revenue code for a prescription, returns IBXDATA(n,"ARX")=""
         ;      -- AND --
         ;   IBXDATA(n,"AUX")='AUX' node of the procedure entry
         ;
         ; Also returns IBXDATA(n,"CPLNK") = soft link to corresponding entry in PROCEDURES multiple of file 399
         ;
         N IB,IBI,IBJ,IBFLD,IBDXI,IBXIEN,Z,IBXTRA,IBRX,IBRX0,IBRX1,Z0,Z1
         ;
         K ^TMP($J,"IBITEM")
         S ^TMP($J,"IBITEM")=""
         ; Build diagnosis array if not already built
         I $O(^TMP("IBXSAVE",$J,"DX",IBIFN,""))="",$O(^IBA(362.3,"AIFN"_IBIFN,"")) D
         .N Z,IBXDATA D F^IBCEF("N-DIAGNOSES",,,IBIFN)
         .S Z="" F  S Z=$O(IBXDATA(Z)) K:$O(IBXDATA(0))=""&(Z="") IBXDATA Q:Z=""  S:$P(IBXDATA(Z),U,2) ^TMP("IBXSAVE",$J,"DX",IBIFN,
          $P(IBXDATA(Z),U,2))=Z
         ;
         S IB(0)=$G(^DGCR(399,IBIFN,0)),IB("U")=$G(^("U")),IB("U1")=$G(^("U1"))
         S IBI="" F  S IBI=$O(^TMP("IBXSAVE",$J,"DX",IBIFN,IBI)) Q:IBI=""  S IBDXI(IBI)=^(IBI)
         I '$G(IBPRINT) D RVCE^IBCF23(IBIFN,IBIFN)
         I $G(IBPRINT) D RVCE^IBCF23(,IBIFN)
         ; Returns IBFLD(24) = begin date ^ end date ^ pos ^ tos ^
         ;     proc/bedsection/revenue code ^ dx pointer ^ unit charge ^
         ;     units ^ modifiers ^ purchased charge amount ^ anesthesia minutes ^
         ;     emergency indicator ^ soft pointer to PROCEDURES multiple in file 399 ^
         ;     NDC ^ Units
         ;         IBFLD(24,n,type,item)=""
         ;         IBFLD(24,n_"A") = revenue code abbreviation if no procedure
         ;         IBFLD(24,n,"AUX") = 'AUX' node of line item 
         ;         IBFLD(24,n,"RX") = soft pointer to file 362.4 from 'item' fld
         ;                            (can be null)
         ;
         D SET^IBCSC5A(IBIFN,.IBRX) ;prescriptions
         ; IBRX1(ien 362.4)=RX#^drug ien^NDC^refil #^(re)fil date^qty^days^chrge
         I IBRX S IBRX="" F  S IBRX=$O(IBRX(IBRX)) Q:IBRX=""  S IBRX0=0 F  S IBRX0=$O(IBRX(IBRX,IBRX0)) Q:'IBRX0  D
         . N IBRXH
         . S IBRXH=IBRX(IBRX,IBRX0)
         . ; **IB*2.0*432** added _U_$P(IBRXH,U,9) (Rx Date) to Output Formatter
         . S IBRX1(+IBRXH)=IBRX_U_$P(IBRXH,U,2)_U_$P(IBRXH,U,5)_U_$P(IBRXH,U,7)_U_IBRX0_U_$P(IBRXH,U,4)_U_$P(IBRXH,U,3)_U_$P(IBRXH,U
          ,6)_U_+IBRXH_U_$P(IBRXH,U,8)_U_$P(IBRXH,U,9)
         K IBRX
         ;
         ; for EDI, remove any $0 line items from the IBFLD array before 
         ; dropping down into the next loop (IB*2*371)
         ; Start IB*2.0*447 BI - Code removed to allow 0 dollars to print.
         ;I '$G(IBPRINT) D
         ;. NEW IBZ,IBI,Z
         ;. M IBZ=IBFLD K IBFLD
         ;. S (IBI,Z)=0
         ;. F  S IBI=$O(IBZ(24,IBI)) Q:IBI'=+IBI  D
         ;.. I $P(IBZ(24,IBI),U,7)*$P(IBZ(24,IBI),U,8)'>0 Q
         ;.. S Z=Z+1
         ;.. M IBFLD(24,Z)=IBZ(24,IBI)
         ;.. S IBFLD(24)=Z
         ;.. Q
         ;. Q
         ; End IB*2.0*447 BI
         ;
         S IBI=0
         F  S IBI=$O(IBFLD(24,IBI)) Q:IBI'=+IBI  D
         . S IBRX1=0
         . S IBXDATA(IBI)=$P(IBFLD(24,IBI),U)_U_$P(IBFLD(24,IBI),U,$S($P(IBFLD(24,IBI),U,2)=""&'$G(IBPRINT):1,1:2))
         . S $P(IBXDATA(IBI),U,3,5)=$P(IBFLD(24,IBI),U,3,5)
         . S $P(IBXDATA(IBI),U,6)=$S($D(IBFLD(24,IBI_"X")):"CJ",1:"HC")
         . S $P(IBXDATA(IBI),U,7,13)=$P(IBFLD(24,IBI),U,6,12)
         . S $P(IBXDATA(IBI),U,14)=+$$ISLAB(IBXDATA(IBI))
         . ; MRD;IB*2.0*516 - Added NDC and Units to line level of claim,
         . ; pieces 14 & 15 of IBFLD, pieces 15 & 16 of IBXDATA. Print
         . ; in Box 24 by setting in IBXDATA(IBI,"TEXT").
         . ;S $P(IBXDATA(IBI),U,15,16)=$P(IBFLD(24,IBI),U,14,15)
         . ;I $P(IBFLD(24,IBI),U,14)'="" S IBXDATA(IBI,"TEXT")="N4"_$P(IBFLD(24,IBI),U,14)_" UN"_$P(IBFLD(24,IBI),U,15)
         . ; vd/IB*2*577 - Added Unit/Basis of Measurement to line level of claim,
         . ; piece 16 of IBFLD, piece 17 of IBXDATA.
         . ; Print in Box 24 by setting in IBXDATA(IBI,"TEXT").
         . S $P(IBXDATA(IBI),U,15,17)=$P(IBFLD(24,IBI),U,14,16)
         . I $P(IBFLD(24,IBI),U,14)'="" S IBXDATA(IBI,"TEXT")="N4"_$P(IBFLD(24,IBI),U,14)_" "_$P(IBFLD(24,IBI),U,16)_$P(IBFLD(24,IBI
          ),U,15)
         . ;
         . I $D(IBFLD(24,IBI,"RX")) D  ;Rx
         .. S IBRX1=1
         .. I $P($G(IBFLD(24,IBI,"AUX")),U,8)'="" S $P(IBFLD(24,IBI,"AUX"),U,8)="",$P(IBFLD(24,IBI,"AUX"),U,9)=""  ;No free text all
          owed for rx's
         .. I $D(IBRX1(+IBFLD(24,IBI,"RX"))) D  Q  ;Soft link exists
         ...D ZERO^IBRXUTL(+$P(IBRX1(+IBFLD(24,IBI,"RX")),U,2))
         ... S IBXDATA(IBI,"RX")=IBRX1(+IBFLD(24,IBI,"RX")),$P(IBXDATA(IBI,"RX"),U,2)=$E($G(^TMP($J,"IBDRUG",+$P(IBRX1(+IBFLD(24,IBI
          ,"RX")),U,2),.01)),1,30)
         ... K IBRX1(+IBFLD(24,IBI,"RX"))
         ... ; No soft link - must find the first Rx with the same charge
         .. S IBRX="" F  S IBRX=$O(IBRX1(IBRX)) Q:'IBRX  I +$P(IBRX1(IBRX),U,8)=+$P(IBXDATA(IBI),U,8) D  Q
         ... D ZERO^IBRXUTL(+$P(IBRX1(IBRX),U,2))
         ... S IBXDATA(IBI,"RX")=IBRX1(IBRX),$P(IBXDATA(IBI,"RX"),U,2)=$E($G(^TMP($J,"IBDRUG",+$P(IBRX1(IBRX),U,2),.01)),1,30) K IBR
          X1(IBRX) Q
         ... Q
         .. Q
         . ;
         . ; MRD;IB*2.0*516 - If additional service line comments to appear in
         . ; Box 24, concatenate to front if something (NDC) is already there.
         . I $G(IBFLD(24,IBI,"AUX"))'="" D
         .. I $G(IBPRINT),$P(IBFLD(24,IBI,"AUX"),U,8)'="" D
         ... I $G(IBXDATA(IBI,"TEXT"))'="" S IBXDATA(IBI,"TEXT")=$E($P(IBFLD(24,IBI,"AUX"),U,8)_" "_IBXDATA(IBI,"TEXT"),1,59)
         ... E  S IBXDATA(IBI,"TEXT")=$P(IBFLD(24,IBI,"AUX"),U,8)
         ... S $P(IBFLD(24,IBI,"AUX"),U,8)=""
         ... Q
         .. S IBXDATA(IBI,"AUX")=IBFLD(24,IBI,"AUX")
         .. Q
         . ;
         . ;JWS;IB*2.0*592:US131
         . I $G(IBFLD(24,IBI,"DEN"))'="" S IBXDATA(IBI,"DEN")=IBFLD(24,IBI,"DEN")
         . I $G(IBFLD(24,IBI,"DEND"))'="" S IBXDATA(IBI,"DEND")=$P(IBFLD(24,IBI,"DEND"),"^",4)
         . I $O(IBFLD(24,IBI,"DEN1",0)) M IBXDATA(IBI,"DEN1")=IBFLD(24,IBI,"DEN1")
         . ;end - ;JWS;IB*2.0*592:US131
         . I $G(IBPRINT) D
         .. ; START IB*2.0*447 BI ZERO DOLLAR CHANGES
         .. ; I '$P(IBXDATA(IBI),U,8),'$G(IBXDATA(IBI,"RX")) D  Q
         .. I $P(IBXDATA(IBI),U,8)="",'$G(IBXDATA(IBI,"RX")) D  Q
         ... ; END IB*2.0*447 BI ZERO DOLLAR CHANGES
         ... I $G(IBNOSHOW) Q    ; don't show errors/warnings
         ... S IBXDATA(IBI,"TEXT")="Warning:** REV CODE UNITS < #PROCEDURES, THEY MUST BE ="
         ... I $D(IBXDATA(IBI,"AUX")) S $P(IBXDATA(IBI,"AUX"),U,9)=""
         ... Q
         .. ;
         .. I $G(IBFLD(24,IBI_"A"))'="" D  Q
         ... S IBXDATA(IBI,"A")=IBFLD(24,IBI_"A")
         ... I $G(IBNOSHOW) Q    ; don't show errors/warnings
         ... S IBXDATA(IBI,"TEXT")="Warning:** REV CODE UNITS > #PROCEDURES, THEY MUST BE=: "_IBFLD(24,IBI_"A")
         ... I $D(IBXDATA(IBI,"AUX")) S $P(IBXDATA(IBI,"AUX"),U,9)=""
         ... Q
         .. ;
         .. S IBRX=$G(IBXDATA(IBI,"RX"))
         .. I IBRX'="" D  ;Format Rx detail
         ... N Z
         ... S Z=$P(IBRX,U)
         ... S Z=$S(Z'="":"Rx#"_Z_" ",1:"RX: ")
         ... S IBXDATA(IBI,"TEXT")=Z_$S($P(IBRX,U,3)'="":"NDC: "_$P(IBRX,U,3),1:"NOC: "_$P(IBRX,U,2))_" Qty: "_$P(IBRX,U,6)_" Days: 
          "_$P(IBRX,U,7)
         ... S $P(IBXDATA(IBI,"AUX"),U,9)="N4"   ; service line comment qualifier for RX's
         ... Q
         .. Q
         . S IBXDATA(IBI,"CPLNK")=$P(IBFLD(24,IBI),U,13)
         . I '$G(IBPRINT) D COBLINE^IBCEU6(IBIFN,IBI,.IBXDATA,,.IBXTRA)
         . Q
         ;
         I $G(IBPRINT) D
         . S IBRX=0 F  S IBRX=$O(IBRX1(IBRX)) Q:'IBRX  D
         .. S IBI=+$O(IBXDATA(""),-1)+1
         .. S IBXDATA(IBI)=$$DATE($P(IBRX1(IBRX),U,5))
         .. S IBXDATA(IBI,"TEXT")="**** ERROR - NO PROC LINK TO REV CODE FOR DRUG: RX#: "_$P(IBRX1(IBRX),U)_"  NDC #: "_$P(IBRX1(IBR
          X),U,3)
         .. I $D(IBXDATA(IBI,"AUX")) S $P(IBXDATA(IBI,"AUX"),U,9)=""
         .. S IBXDATA(IBI,"ARX")=""
         .. D ZERO^IBRXUTL(+$P(IBRX1(IBRX),U,2))
         .. S IBXDATA(IBI,"RX")=IBRX1(IBRX),$P(IBXDATA(IBI,"RX"),U,2)=$E($G(^TMP($J,"IBDRUG",+$P(IBRX1(IBRX),U,2),.01)),1,30) K IBRX
          1(IBRX)
         .. Q
         . Q
         ;
         I '$G(IBPRINT),$D(IBXTRA) D COMBO^IBCEU2(.IBXDATA,.IBXTRA,0) ;Handle bundled/unbundled lines
         K ^TMP($J,"IBDRUG")
         Q
         ;
ISLAB(LDATA) --
          ; Returns 0/1 if line item data indicates the item is a lab (1)
         ; 'LAB' is defined here as type of service = 5
         Q $E($P(LDATA,U,4))="5"
         ;
FMT(DATA,DLEN,FLEN) --
          ; Returns a string in DATA with a max length of DLEN
         ;  and a field length of FLEN
         Q $E($E(DATA,1,DLEN)_$J("",FLEN),1,FLEN)
         ;
DATE(X,DEL) --
          ;  Returns FM date in X as MMxDDxYYYY  where x=DEL
         S DEL=$G(DEL)
         S X=$$DATE^IBCF2(X,1,1)
         I X'="" S X=$E(X,1,2)_DEL_$E(X,3,4)_DEL_$E(X,5,8)
         Q X
         ;
BATCH()  ; Sets up record for and stores/returns the next batch number
         N NUM,FAC,DO,DD,DLAYGO,DIC,X,Y
         ;Keep latest batch number for view/print edi bill extract data option
         I $D(IBVNUM) S NUM=IBVNUM G BATCHQ
         ;Check for batch resubmit - if yes, use same number as original batch
         I $P($G(^TMP("IBRESUBMIT",$J)),U,3)=1 S NUM=$P(^($J),U) G BATCHQ
         L +^IBA(364.1,0):5 I '$T Q 0
         S FAC=+$P($$SITE^VASITE(),U,3),NUM=$O(^IBA(364.1,"B",""),-1)
         I $D(^IBA(364.1,+NUM,0)),$P(^(0),U,2)="" F  D  Q:'NUM!($P($G(^IBA(364.1,+NUM,0)),U,2)'="")
         . I $D(^IBA(364.1,NUM,0)) S DA=NUM,DIK="^IBA(364.1," D ^DIK
         . S NUM=$O(^IBA(364.1,"B",""),-1)
         F  S NUM=$S($P(NUM,FAC,2)'="":NUM+1,1:FAC_"0000001") Q:'$D(^IBA(364.1,"B",NUM))
         K DO,DD S DIC="^IBA(364.1,",DLAYGO=364.1,DIC(0)="L",X=NUM D FILE^DICN K DD,DO I Y'>0 S NUM=0
         L -^IBA(364.1,0)
BATCHQ   Q NUM
         ;
GETLDAT(IBXIEN) --
          ; Extract data for 837 transmission LDAT record
         ; IBXIEN - ien in file 399
         ; Sets up IBXSAVE("LDAT",n) array:
         ; Attachment report type ^ Attachment report transmission code ^ Attachment control number ^ 
         ; OB Anesthesia Additional Units ^ Purchase Service Provider ID ^ Purchase Service Amount ^
         N CPIEN,FTYPE,IBXDATA,IDS,IBIDS,NODE1,PSAMNT,PSPID,Z,PCE1,LINE
         I '+$G(IBXIEN) Q
         K IBXSAVE("LDAT")
         S FTYPE=$$FT^IBCEF(IBXIEN)
         ;JWS;IB*2.0*592; added Dental form
         I FTYPE=2!(FTYPE=7) D OUTPT(IBXIEN,0)
         I FTYPE=3 D HOS^IBCEF2(IBXIEN)
         D ALLIDS^IBCEFP(IBXIEN,.IDS,1)
         S (PSPID,PSAMNT)=""
         ; IB*2.0*473/TAZ - Convert PROVIDER code to function call to PSID^IBCEFP
         I $$SUB1OK^IBCEP8A(IBXIEN),(FTYPE=2) D
         . D PSID^IBCEFP(IBXIEN,.IDS,.IBIDS)
         . S PSPID=$G(IBIDS(0)) I PSPID="" S PSPID=$P($G(IBIDS(1)),U,1)
         ;IB*2.0*473/TAZ - END
         S Z=0 F  S Z=$O(IBXDATA(Z)) Q:'Z  D
         . S CPIEN=+$G(IBXDATA(Z,"CPLNK")) ;I 'CPIEN Q
         . I FTYPE=2,$$SUB1OK^IBCEP8A(IBXIEN) S PSAMNT=$$DOLLAR^IBCEFG1($P($G(IBXDATA(Z)),U,11))
         . S (PCE1,NODE1)=""
         . I CPIEN D
         . . S NODE1=$G(^DGCR(399,IBXIEN,"CP",CPIEN,1))
         . . S PCE1=$$GET1^DIQ(399.0304,CPIEN_","_IBXIEN_",",71)
         . . Q
         . ; MRD;IB*2.0*516 - Added addl. procedure description as piece 7 
         . ; of IBXSAVE, which will exist only if the procedure ends in '99'
         . ; or is an 'NOC/NOS' procedure.
         . ;JWS;IB*2.0*592;do not include NOC description here for Dental claims
         . S IBXSAVE("LDAT",Z)=PCE1_U_$P(NODE1,U,3)_U_$P(NODE1,U)_U_$P(NODE1,U,5)_U_$G(PSPID)_U_$G(PSAMNT)_U_$S(FTYPE=7:"",1:$P(NODE
          1,U,4))
         . Q
         Q
         ;
         ;/Beginning of IB*2.0*608 (US9) - vd
LDAT     ;
         N Z K IBXDATA
         S Z=0 F  S Z=$O(IBXSAVE("LDAT",Z)) Q:'Z  D
         . S IBXDATA(Z)=Z D:Z>1 ID^IBCEF2(Z,"LDAT")
         ;
         I +$G(VC80) D
         . S Z=$O(IBXDATA(""),-1)+1
         . D ID^IBCEF2(Z,"LDAT")
         . D VC80L(IBXIEN,Z)  ; Process for 'SNF' claims & the last claim line
         . S A=Z
         . S IBXDATA(Z)=A
         Q
         ;
VC80L(IBIFN,LN) --
          ; Extracts the data for the "LDAT" record for VALUE CODE 80 Line item.
         ; IBIFN = Claims internal id number
         ;    LN = 
         N VC80LN
         S VC80LN=LN
         S $P(IBXSAVE("LDAT",VC80LN),U,11)="6R"
         S $P(IBXSAVE("LDAT",VC80LN),U,12)=VC80LN_"_"_$$GET1^DIQ(399,IBIFN_", ",.01)
         Q
         ;/Ending of IB*2.0*608 - vd
         ;

*****   INDEX OF IBCEF11   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   A            BOX24D~,LDAT+9*,LDAT+10
   CPIEN        GETLDAT+5~,GETLDAT+20*,GETLDAT+23,GETLDAT+24,GETLDAT+25
>> DA           BATCH+9*
   DATA         FMT~,FMT+2
   DD           BATCH+1~,BATCH+12!
   DEL          DATE~,DATE+1*,DATE+3
   DIC          BATCH+1~,BATCH+12*
   DIC(0        BATCH+12*
>> DIK          BATCH+9*
   DLAYGO       BATCH+1~,BATCH+12*
   DLEN         FMT~,FMT+2
   DO           BATCH+1~,BATCH+12!
   FAC          BATCH+1~,BATCH+7*,BATCH+11
   FLEN         FMT~,FMT+2
   FTYPE        GETLDAT+5~,GETLDAT+8*,GETLDAT+10,GETLDAT+11,GETLDAT+15,GETLDAT+21,GETLDAT+31
   IB           BOX24D~,BOX24D+2,OUTPT+43~
   IB("U"       OUTPT+52*
   IB("U1"      OUTPT+52*
   IB(0         OUTPT+52*
   IBDXI        OUTPT+43~
   IBDXI(       OUTPT+53*
   IBFLD        OUTPT+43~
   IBFLD(24     OUTPT+93,OUTPT+95,OUTPT+96,OUTPT+97,OUTPT+98,OUTPT+108,OUTPT+109,OUTPT+111,OUTPT+113*,OUTPT+114,OUTPT+115,OUTPT+116
                OUTPT+117,OUTPT+127,OUTPT+128,OUTPT+129,OUTPT+130,OUTPT+131*,OUTPT+133,OUTPT+137,OUTPT+138,OUTPT+139,OUTPT+151
                OUTPT+152
                OUTPT+154,OUTPT+167
   IBI          OUTPT+43~,OUTPT+53*,OUTPT+92*,OUTPT+93*,OUTPT+95,OUTPT+96,OUTPT+97,OUTPT+98,OUTPT+99,OUTPT+108,OUTPT+109,OUTPT+111
                OUTPT+113,OUTPT+114,OUTPT+115,OUTPT+116,OUTPT+117,OUTPT+119,OUTPT+121,OUTPT+127,OUTPT+128,OUTPT+129,OUTPT+130
                OUTPT+131
                OUTPT+133,OUTPT+137,OUTPT+138,OUTPT+139,OUTPT+144,OUTPT+147,OUTPT+148,OUTPT+151,OUTPT+152,OUTPT+154,OUTPT+155
                OUTPT+158,OUTPT+163,OUTPT+164,OUTPT+167,OUTPT+168,OUTPT+173*,OUTPT+174,OUTPT+175,OUTPT+176,OUTPT+177,OUTPT+179
   IBIDS        GETLDAT+5~,GETLDAT+16
   IBIDS(0      GETLDAT+17
   IBIDS(1      GETLDAT+17
   IBIFN        OUTPT~,OUTPT+48,OUTPT+49,OUTPT+50,OUTPT+52,OUTPT+53,OUTPT+54,OUTPT+55,OUTPT+67,OUTPT+168,VC80L~,VC80L+6
   IBJ          OUTPT+43~
>> IBNOSHOW     OUTPT+146,OUTPT+153
   IBPRINT      OUTPT~,OUTPT+54,OUTPT+55,OUTPT+95,OUTPT+128,OUTPT+141,OUTPT+168,OUTPT+171,OUTPT+183
   IBRX         OUTPT+43~,OUTPT+67,OUTPT+69*,OUTPT+71,OUTPT+73,OUTPT+74!,OUTPT+119*,OUTPT+120,OUTPT+121,OUTPT+158*,OUTPT+159
                OUTPT+161,OUTPT+163,OUTPT+172*,OUTPT+174,OUTPT+175,OUTPT+178,OUTPT+179
   IBRX(        OUTPT+69,OUTPT+71
   IBRX0        OUTPT+43~,OUTPT+69*,OUTPT+71,OUTPT+73
   IBRX1        OUTPT+43~,OUTPT+94*,OUTPT+112*
   IBRX1(       OUTPT+73*,OUTPT+114,OUTPT+115,OUTPT+116,OUTPT+117!,OUTPT+119,OUTPT+120,OUTPT+121!,OUTPT+172,OUTPT+174,OUTPT+175
                OUTPT+178,OUTPT+179!
   IBRXH        OUTPT+70~,OUTPT+71*,OUTPT+73
>> IBVNUM       BATCH+3
   IBXDATA      OUTPT+49~,OUTPT+50!,OUTPT+168,OUTPT+183,GETLDAT+5~,LDAT+1!
   IBXDATA(     OUTPT+50,OUTPT+95*,OUTPT+96*,OUTPT+97*,OUTPT+98*,OUTPT+99*,OUTPT+108*,OUTPT+109*,OUTPT+116*,OUTPT+119,OUTPT+121*
                OUTPT+129*,OUTPT+130*,OUTPT+133*,OUTPT+137*,OUTPT+138*,OUTPT+139*,OUTPT+144,OUTPT+147*,OUTPT+148*,OUTPT+152*
                OUTPT+154*
                OUTPT+155*,OUTPT+158,OUTPT+163*,OUTPT+164*,OUTPT+167*,OUTPT+174*,OUTPT+175*,OUTPT+176*,OUTPT+177*,OUTPT+179*
                GETLDAT+19,GETLDAT+20,GETLDAT+21,LDAT+3*,LDAT+10*
   IBXDATA(""   OUTPT+173,LDAT+6
   IBXDATA(0    OUTPT+50
   IBXIEN       OUTPT+43~,GETLDAT~,GETLDAT+6,GETLDAT+8,GETLDAT+10,GETLDAT+11,GETLDAT+12,GETLDAT+15,GETLDAT+16,GETLDAT+21,GETLDAT+24
                GETLDAT+25,LDAT+8
>> IBXSAVE("LDAT" 
                GETLDAT+7!,GETLDAT+31*,LDAT+2,VC80L+5*,VC80L+6*
   IBXTRA       OUTPT+43~,OUTPT+168,OUTPT+183
   IDS          GETLDAT+5~,GETLDAT+12,GETLDAT+16
   LDATA        ISLAB~,ISLAB+2
   LINE         GETLDAT+5~
   LN           VC80L~,VC80L+4
   NODE1        GETLDAT+5~,GETLDAT+22*,GETLDAT+24*,GETLDAT+31
   NUM          BATCH+1~,BATCH+3*,BATCH+5*,BATCH+7*,BATCH+8,BATCH+9,BATCH+10*,BATCH+11*,BATCH+12*,BATCHQ
   PCE1         GETLDAT+5~,GETLDAT+22*,GETLDAT+25*,GETLDAT+31
   PSAMNT       GETLDAT+5~,GETLDAT+13*,GETLDAT+21*,GETLDAT+31
   PSPID        GETLDAT+5~,GETLDAT+13*,GETLDAT+17*,GETLDAT+31
   U            OUTPT+50,OUTPT+73,OUTPT+95,OUTPT+96,OUTPT+97,OUTPT+98,OUTPT+99,OUTPT+108,OUTPT+109,OUTPT+113,OUTPT+115,OUTPT+116
                OUTPT+119,OUTPT+120,OUTPT+121,OUTPT+128,OUTPT+129,OUTPT+130,OUTPT+131,OUTPT+144,OUTPT+148,OUTPT+155,OUTPT+161
                OUTPT+163
                OUTPT+164,OUTPT+167,OUTPT+174,OUTPT+175,OUTPT+176,OUTPT+178,OUTPT+179,ISLAB+2,BATCH+5,BATCH+7,BATCH+8,GETLDAT+17
                GETLDAT+21,GETLDAT+31,VC80L+5,VC80L+6
>> VC80         LDAT+5
   VC80LN       VC80L+3~,VC80L+4*,VC80L+5,VC80L+6
   X            DATE~,DATE+2*,DATE+3*,DATE+4,BATCH+1~,BATCH+12*
   Y            BATCH+1~,BATCH+12
   Z            OUTPT+43~,OUTPT+49~,OUTPT+50*,OUTPT+160~,OUTPT+161*,OUTPT+162*,OUTPT+163,GETLDAT+5~,GETLDAT+19*,GETLDAT+20
                GETLDAT+21,GETLDAT+31,LDAT+1~,LDAT+2*,LDAT+3,LDAT+6*,LDAT+7,LDAT+8,LDAT+9,LDAT+10
   Z0           OUTPT+43~
   Z1           OUTPT+43~

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399           OUTPT+52,GETLDAT+24
   ^IBA(362.3          OUTPT+48
   ^IBA(364.1          BATCH+6,BATCH+7,BATCH+8,BATCH+9,BATCH+10,BATCH+11,BATCH+13
   ^TMP("IBRESUBMIT"   BATCH+5
   ^TMP("IBXSAVE"      OUTPT+48,OUTPT+50*,OUTPT+53
   ^TMP($J             OUTPT+45!,OUTPT+46*,OUTPT+116,OUTPT+121,OUTPT+179,OUTPT+184!

Naked Globals
   ^(           OUTPT+53
   ^("U"        OUTPT+52
   ^("U1"       OUTPT+52
   ^($J         BATCH+5
   ^(0          BATCH+8

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$DATE       OUTPT+174
   $$ISLAB      OUTPT+99
   BATCHQ       BATCH+3,BATCH+5
   OUTPT        GETLDAT+10
   VC80L        LDAT+8

External References
   FILE^DICN           BATCH+12
   ^DIK                BATCH+9
   $$GET1^DIQ          GETLDAT+25,VC80L+6
   $$FT^IBCEF          GETLDAT+8
   F^IBCEF             OUTPT+49
   HOS^IBCEF2          GETLDAT+11
   ID^IBCEF2           LDAT+3,LDAT+7
   $$DOLLAR^IBCEFG1    GETLDAT+21
   ALLIDS^IBCEFP       GETLDAT+12
   PSID^IBCEFP         GETLDAT+16
   $$SUB1OK^IBCEP8A    GETLDAT+15,GETLDAT+21
   COMBO^IBCEU2        OUTPT+183
   COBLINE^IBCEU6      OUTPT+168
   $$DATE^IBCF2        DATE+2
   RVCE^IBCF23         OUTPT+54,OUTPT+55
   SET^IBCSC5A         OUTPT+67
   ZERO^IBRXUTL        OUTPT+115,OUTPT+120,OUTPT+178
   $$SITE^VASITE       BATCH+7

*****   END   *****


IBCEF2   * *  356 Lines,  15693 Bytes, Checksum: B140185497                                           Mar 20, 2019@15:10:13 page 8
              6432 bytes in comments
IBCEF2   ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS ;8/6/03 10:54am
         ;;2.0;INTEGRATED BILLING;**52,85,51,137,232,155,296,349,403,400,432,488,461,547,592,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
HOS(IBIFN) --
          ; Extract rev codes for inst. episode into IBXDATA
         ; Moved for space
         D HOS^IBCEF22(IBIFN)
         Q
         ;
OTHINS(IBIFN) --
          ;Determine 'other insurance' node (I1,I2)
         ; If primary bill, other ins is secondary
         ; If sec or tert bill, other ins is primary
         ;IBIFN = bill ien
         N Z
         S Z=$$COBN^IBCEF(IBIFN)
         Q "I"_$S(Z=1:2,1:1)
         ;
OTHINS1(IBIFN) --
          ; Returns the COB #'s of all 'other insurance' as a string
         ;IBIFN = bill ien
         N IBC,Z
         S Z=$$COBN^IBCEF(IBIFN)
         I Z=1 S IBC=$S($D(^DGCR(399,IBIFN,"I2")):$S($D(^DGCR(399,IBIFN,"I3")):23,1:2),1:"") ;Primary=>2 or 23
         I Z=2 S IBC="1"_$S($D(^DGCR(399,IBIFN,"I3")):3,1:"") ;Secondary=>1 or 13
         I Z=3 S IBC="12" ;Tertiary =>12
OTHQ     Q IBC
         ;
RECVR(IBIFN) --
          ; Returns the V.A. internal routing id of the current ins
         ; co for 837
         ;IBIFN = bill ien
         N MCR,NUM,IBPH
         ;JWS;IB*2.0*592:Dental form #7
         S IBPH=$P("P^H^^^^DENTAL",U,$$FT^IBCEF(IBIFN)-1)
         S NUM=$S($$FT^IBCEF(IBIFN)=7:IBPH,1:"ENVOY"_IBPH)
         ; If rate type is CHAMPVA, send 'CHAMVA'
         I $P($G(^DGCR(399.3,+$P($G(^DGCR(399,IBIFN,0)),U,7),0)),U)="CHAMPVA" S NUM="CHAMV"_IBPH
         I NUM["ENVOY",$$MCRWNR^IBEFUNC(+$$CURR(IBIFN)) D
         . ;JWS;IB*2.0*592:Dental form #7
         . S MCR=$P("B^A^^^^B",U,$$FT^IBCEF(IBIFN)-1)    ; PART A/B for MEDICARE
         . S NUM="PART"_MCR
         Q NUM
         ;
ALLPAYID(IBIFN,IBXDATA,SEQ) --
          ; Returns clearinghouse id for all (SEQ="")
         ;  or a specific (SEQ=1,2,3) ins co's for 837 in IBXDATA(n) for bill ien
         ;  IBIFN
         ; EJK *296* Add IBMRA - MRA Claim type. 
         ; EJK *296* Add IBEBI - Electronic Billing ID
         ;
         ;WCJ;IB*2.0*547 - added IBM2
         ;N Z,Z0,Z1,A,IBM,IBINST,IBMCR,IBX,IBMRA,IBEBI
         N Z,Z0,Z1,A,IBM,IBM2,IBINST,IBMCR,IBX,IBMRA,IBEBI
         ;S IBXDATA="",IBM=$G(^DGCR(399,IBIFN,"M"))
         S IBXDATA="",IBM=$G(^DGCR(399,IBIFN,"M")),IBM2=$G(^DGCR(399,IBIFN,"M2"))
         F Z=1:1:3 I $S('$G(SEQ):1,1:Z=SEQ) S Z0=$P(IBM,U,Z) I Z0 D  S:A'="" IBXDATA(Z)=A
         . S A=""
         . ;WCJ;IB*2.0*547
         . I $P(IBM2,U,Z*2)]"" S A=$P(IBM2,U,Z*2) Q  ; grab new alternate payer IDs from bill if they exist
         . ;
         . S IBINST=($$FT^IBCEF(IBIFN)=3) ;Is bill UB-04?
         . ; EJK *296* Get IBEBI based on Prof. or Inst. claim
         . I IBINST S IBEBI=$P($G(^DIC(36,Z0,3)),U,4)
         . I 'IBINST S IBEBI=$P($G(^DIC(36,Z0,3)),U,2)
         . ;JWS;IB*2.0*592;Dental payer id;IA# 5292
         . I $$FT^IBCEF(IBIFN)=7 S IBEBI=$P($G(^DIC(36,Z0,3)),U,15)
         . S IBEBI=$$UP^XLFSTR(IBEBI)
         . ; EJK *296* If this is a Medicare claim, it may be printed or transmitted. 
         . S IBMRA=$$MRASEC^IBCEF4(IBIFN)   ;Is claim 2ndary to an MRA? 
         . S IBMCR=$$MCRONBIL^IBEFUNC(IBIFN),Z1=$G(^DGCR(399,IBIFN,"TX"))
         . Q:$P(Z1,U,8)=1!$S('$P(Z1,U,9):0,1:$$MRASEC^IBCEF4(IBIFN))  ;Force local prnt
         . ;JWS;IB*2.0*592;9/1/17 add Dental Payer ID;IA# 5292
         . S A=$S($P(Z1,U,8)'=2:$P($G(^DIC(36,Z0,3)),U,$S(IBINST:4,$$FT^IBCEF(IBIFN)=7:15,1:2)),1:"")
         . S A=$$UP^XLFSTR(A)
         . ;
         . ; RPRNT = CMS-1500 Rx bills
         . ; IPRNT = Inst MRA secondary claims
         . ; PPRNT = Prof MRA secondary claims
         . ; HPRNT = inst printed bills (non-MRA, force print at clearinghouse)
         . ; SPRNT = prof printed bills (non-MRA, force print at clearinghouse)
         . ;
         . ; Default to appropriate 'xPRNT' if Rx bill or COB bill or forced to
         . ;    print - claims must print at clearinghouse
         . ;
         . ; Rx bills on CMS-1500
         . ;IB*2.0*432/TAZ Claims no longer print at clearinghouse
         . ;I 'IBINST,$$ISRX^IBCEF1(IBIFN) S A="RPRNT" Q
         . ;
         . ; Claim forced to print at clearinghouse (Field #27)
         . I $P(Z1,U,8)=2 S A=$S(IBINST:"H",1:"S")_"PRNT" Q
         . ;
         . ; EJK *296* Send IBEBI for MRA secondary claims if it exists
         . I Z>1,IBMRA,IBEBI'="" S A=IBEBI Q
         . ;
         . ; MRA secondary claim
         . I Z>1,IBMCR=1,$P(Z1,U,5)="C" S A=$S(IBINST:"I",1:"P")_"PRNT" Q
         . ;
         . ; Medicare is current payer (MRA request claim)
         . I $$WNRBILL^IBEFUNC(IBIFN,Z) S A=$S(IBINST:"12M61",1:"SMTX1") Q
         . ;
         . ; IB*296 - Do not modify the payer ID for CHAMPVA (HAC)
         . I A=84146 Q
         . I A=84147 Q
         . ;
         . ; If not a primary bill force to print
         . ;IB*2.0*432/TAZ secondary bills will now be processed
         . ;I Z>1,Z=$$COBN^IBCEF(IBIFN) S A=$S(IBINST:"H",1:"S")_"PRNT" Q
         . Q
         ;
         Q
         ;
PAYERID(IBIFN) --
          ; Returns clearinghouse id for current ins co
         ; IBIFN = bill ien
         N NUM,IBSEQ
         ; Determine the current ins co's # to identify at WEBMD
         ; Envoy changed to WEBMD in patch 232
         S IBSEQ=+$$COBN^IBCEF(IBIFN)
         D ALLPAYID(IBIFN,.NUM,IBSEQ) S NUM=$G(NUM(IBSEQ))
         Q $G(NUM)
         ;
CURR(IBIFN) --
          ; Returns ien of the current insurance
         ; company for bill ien IBIFN
         Q $$FINDINS^IBCEF1(IBIFN)
         ;
ADMDT(IBIFN,NOOUTCK) --
          ; Calculate admission/start of care date/time
         D ADMDT^IBCEF21(IBIFN,$G(NOOUTCK))      ; Moved for space
         Q
         ;
DISDT(IBIFN) --
          ; Calculate discharge date
         D DISDT^IBCEF21(IBIFN)                  ; Moved for space
         Q
         ;
INDTS(IBIFN) --
          ; Function returns the admit ^ discharge date/time of admission if patient is an inpatient on bill's event date
         N Z,Z0,DFN,VAINDT,VAIN S Z0=""
         S Z=$G(^DGCR(399,+$G(IBIFN),0)),DFN=$P(Z,U,2),VAINDT=$P(Z,U,3)
         I +DFN,+VAINDT D INP^VADPT I +VAIN(1) S Z0=+VAIN(7)_U_+$G(^DGPM(+$P($G(^DGPM(+VAIN(1),0)),U,17),0))
         Q Z0
         ;
TXMT(IBIFN) --
          ; Function moved - use new call in IBCEF4
         Q $$TXMT^IBCEF4(IBIFN)
         ;
         ;
ID(LN,VAL) --
          ; Set EXTRACT GLOBAL for multi-valued record
         ; ids for Austin
         ; LN = the line # being extracted
         ; VAL = the value of the element being extracted
         ;
         ; Assumes IBXPG exists
         ;
         Q:LN<2
         D SETGBL^IBCEFG(IBXPG,LN,1,VAL,.IBXSIZE)
         Q
         ;
ID1(LN,DX,CT,DCT,ECT) --
          ;Special entry point for diagnoses to 'save' the fact
         ;   a dx code is an e-code.
         ; LN is last entry # output, returned as the entry # (IBXLINE) to assign to this entry
         ; DX = the actual Dx code array(RECORD ID). Pass by reference, DX returned null if
         ;      dx was not output
         ; CT = the ct on the 'DC' entry.  pass by reference, returned null if
         ;      the end of the valid dx codes has been reached
         ; DCT= Count of regular DX codes. UB-04 can have 25 non External Cause codes.
         ; ECT= Count of External Cause codes. UB-04 can have 12 External Cause codes.
         ; External Cause of Injury codes and qualifier changed with ICD-10: E-codes in ICD-9, V,X,W,Y-codes in ICD-10
         N IBINS,VAL,CNT,DXIEN,DXQ,EDX,I,POA,ICDV
         S IBINS=($$FT^IBCEF(IBXIEN)=3)
         S VAL="DC"_CT
         S VAL=$E(VAL_" ",1,4)
         S DCT=+$G(DCT),ECT=+$G(ECT) ;Make sure variables are initialized.
         ;
         S EDX=0,DX=$G(DX)
         S ICDV=$$ICD9VER^IBACSV(+$G(DX(CT)))
         I ICDV=1,$E(DX)="E" S EDX=1 ; TRUE if ECI ICD-9 Dx (e-code)
         I ICDV=30,"VWXY"[$E(DX) S EDX=1 ; TRUE if ECI ICD-10 Dx
         ;
         S I=$S(EDX:3,1:2)
         ;
         S:'EDX DXQ=$S(+$G(^TMP("DCX",$J,2))>0:"BF",1:"BK") ; first non e-code DX is principal (qualifier "BK"), the rest have quali
          fier "BF"
         ;
         I IBINS D  I DX="" G IDX1
         .;I CT>28 S CT="" Q     ; Max of 28 codes for institutional/UB
         .I EDX S ECT=ECT+1 I ECT>12 S DX="" Q  ;Only 12 E-codes allowed
         .I 'EDX S DCT=DCT+1 I DCT>25 S DX="" Q  ;Only 25 DX codes allowed
         .S DXIEN=$P(DX(CT),U,2) Q:DXIEN=""
         .; IB*2.0*547 - no longer stuff a 1 for POA, send a blank if null
         .S POA=$P($G(^IBA(362.3,DXIEN,0)),U,4) ; I POA="",$$INPAT^IBCEF(IBXIEN) S POA=1 ; POA indicator defaults to "1", if not pre
          sent on inpatient claim
         .S:EDX DXQ="BN" ; e-code DX qualifier
         .Q
         ;
         I 'IBINS S:EDX DXQ="BF" S POA="" ; on CMS-1500 e-code DX qualifiers are "BF" and there's no POA
         ;
         I ICDV=30 S DXQ="A"_DXQ ; adjust Qualifier for ICD-10 codes
         ;
         ;Changed 8 to 12 so we can transmit 12 codes. BAA *488*
         I 'IBINS,CT>12 S ^TMP("IBXSAVE",$J,"DX",IBXIEN)=$G(^TMP("IBXSAVE",$J,"DX",IBXIEN))+1,^TMP("IBXSAVE",$J,"DX",IBXIEN,$P(DX(+^
          TMP("IBXSAVE",$J,"DX",IBXIEN)),U,2))=$G(^TMP("IBXSAVE",$J,"DX",IBXIEN)) S DX="" Q
         ;
         I CT'="",DX'="" D
         .; populate ^TMP("DCX") scratch global
         .S ^TMP("DCX",$J,1)=CT,CNT=$G(^TMP("DCX",$J,I))+1,^TMP("DCX",$J,I)=CNT
         .S (^TMP("DCX",$J,I,CNT),^TMP("DCX",$J,1,CT))=DX_U_DXQ_U_POA
         .S LN=LN+1 D ID(LN,VAL) S ^TMP("IBXSAVE",$J,"DX",IBXIEN,$P(DX(LN),U,2))=LN,^TMP("IBXSAVE",$J,"DX",IBXIEN)=CT,CT=CT+1
         .Q
         ;
IDX1     ;
         Q
         ;
M(CT)    ; Calculate multi-valued field for 837 extract
         ; CT = passed by reference/the record ID counter
         S CT=CT+1
         ;IB*2.0*547/TAZ Increase counter to 25
         ;Q $E(CT#12+$S(CT#12:0,1:12)_" ",1,2)
         Q $E(CT#25+$S(CT#25:0,1:25)_" ",1,2)
         ;
SVITM(IBA,LINE) --
          ; Saves the linked items from the bill data extract into
         ; an array the formatter will use to link Rxs and prosthetics
         ; to an SV1 or SV2 line item, if possible.  Kills off IBA array entries
         ; after they are 'moved'
         ; IBA = array that contains the data to be saved
         ;   subscripts are (line #,item type,item pointer)=ct
         N Z0,Z1
         S Z0="" F  S Z0=$O(IBA("OUTPT",LINE,Z0)) Q:Z0=""  I Z0?1N.N  S Z1="" F  S Z1=$O(IBA("OUTPT",LINE,Z0,Z1)) Q:Z1=""  S ^TMP($J
          ,"IBITEM",Z0,Z1,LINE)=IBA("OUTPT",LINE,Z0,Z1) K IBA("OUTPT",LINE,Z0,Z1)
         Q
         ;
LINK(IBTYP,IBDATA) --
          ; Link the item with a service line, if possible
         ; IBTYP = the code for the type of item
         ;         returned incremented if no link is made
         ; IBDATA = the extracted data string that identifies the item. 
         ; Returns the line to link to or null if no link
         N IBLN,IBKEY,Z
         S IBLN=""
         S IBKEY=$S(IBTYP=3:$P(IBDATA,U,9),IBTYP=5:$P(IBDATA,U,4),1:"") Q:IBKEY=""
         I $D(^TMP($J,"IBITEM",IBTYP,IBKEY)) D  G:IBLN LINKQ
         .S Z=0 F  S Z=$O(^TMP($J,"IBITEM",IBTYP,IBKEY,Z)) Q:'Z  I ^TMP($J,"IBITEM",IBTYP,IBKEY,Z) S IBLN=Z,^TMP($J,"IBITEM",IBTYP,I
          BKEY,Z)=^TMP($J,"IBITEM",IBTYP,IBKEY,Z)-1 Q
         I $D(^TMP($J,"IBITEM",IBTYP,0)) S IBKEY=0 D
         .S Z=0 F  S Z=$O(^TMP($J,"IBITEM",IBTYP,IBKEY,Z)) Q:'Z  I ^TMP($J,"IBITEM",IBTYP,IBKEY,Z) S IBLN=Z,^TMP($J,"IBITEM",IBTYP,I
          BKEY,Z)=^TMP($J,"IBITEM",IBTYP,IBKEY,Z)-1 Q
LINKQ    Q IBLN
         ;
COID(IBIFN) --
          ; Claim office ID - moved for space
         Q $$COID^IBCEF21(IBIFN)
         ;
PPOL(IBIFN,COB) --
          ; return IFN of patient policy on a bill defined by COB (fields 399,112-114)
         N X,Y,PPOL S PPOL=""
         I +$G(IBIFN) S X=$G(^DGCR(399,+IBIFN,"M")) I +$G(COB),COB<4 S Y=COB+11,PPOL=$P(X,U,Y)
         Q PPOL
         ;
LADJ(SUB,LINE,SEQ1,GRP,IBXSAVE,PIECE) --
          ; Extract line level adjustments
         ; SUB     = 1st subscript in IBXSAVE array to use
         ; LINE    = 2nd subscript
         ; SEQ1    = 4th subscript
         ; GRP     = 5th subscript
         ; IBXSAVE = array that has the data for COB line level adjustments
         ; PIECE   = # of the piece on the 0-node of the line level
         ;           adjustment reason to be extracted
         ;
         N A,B
         S (A,B)=0
         F  S A=$O(IBXSAVE(SUB,LINE,"COB",SEQ1,GRP,A)) Q:'A  D
         . S B=B+1,IBXDATA(B)=$P(IBXSAVE(SUB,LINE,"COB",SEQ1,GRP,A),U,PIECE)
         Q
         ;
ESGHPST(IBIFN,COB) --
          ; return insureds employ status if bill policy defined by COB is an Employer Sponsored Group Health Plan
         Q $$ESGHPST^IBCEF21(IBIFN,COB) ;Tag moved
         ;
ESGHPNL(IBIFN,COB) --
          ; return employer name and location if bill policy defined by COB is an Employer Sponsored Group Health Plan
         Q $$ESGHPNL^IBCEF21(IBIFN,COB) ;Tag moved
         ;
AMTOUT(A,B,C,IBXSAVE) --
          ; format output amount
         ;
         N Z,K,IBZ,IBARR K IBXDATA S (IBZ,K)=0,IBARR="IBXSAVE("""_A_""")" F  S IBZ=$O(@IBARR@(IBZ)) Q:'IBZ  S K=K+1,Z=0 F  S Z=$O(@I
          BARR@(IBZ,Z)) Q:'Z  I $P($G(@IBARR@(IBZ,Z,B)),U,C) S IBXDATA(K)=$$DOLLAR^IBCEFG1($G(IBXDATA(K))+$P(@IBARR@(IBZ,Z,B),U,C))
         Q
         ;
         ;/Beginning of IB*2.0*608 (US9) - vd
SNF(IBIFN) --
          ; Check to see if the claim is a SNF (Skilled Nursing Facility) Claim.
         ;   Returned Values:
         ;    SNF = 0 if claim is not a SNF Claim.
         ;    SNF = 1 if claim is a SNF Claim.
         N SNF
         S SNF=0
         I $$GET1^DIQ(399,IBIFN_", ",.24,"I")=2 S SNF=1   ; Claim is a SNF Claim
         Q SNF
         ;
VC80CK(IBIFN) --
          ; Determine if the Claim is eligible for Value Code 80 Revenue Code Claim Lines.
         N BLTYPX,COB,IB0,NUM,PPAYID,RCVRID,VC80SW
         S VC80SW=0
         I '$$SNF(IBIFN) Q VC80SW   ; Not a SNF Claim.
         S RCVRID=$$RECVR^IBCEF2(IBIFN) I "^ENVOYH^PARTA^"'[(U_RCVRID_U) Q VC80SW   ; Not ENVOYH or PARTA
         S COB=$$COB^IBCEF(IBIFN) I COB'="P" Q VC80SW   ; Payer Responsibility Sequence not equal to "P".
         D ALLPAYID(IBIFN,.NUM,1) S PPAYID=$G(NUM(1))  Q:(PPAYID'="12M61") VC80SW  ; Primary Payer not equal to "12M61"
         S IB0=$G(^DGCR(399,IBIFN,0))
         S BLTYPX=$P(IB0,U,24)_$P(IB0,U,5)
         I BLTYPX<21!(BLTYPX>23) Q VC80SW  ; Not a valid Bill Type.
         S VC80SW=1   ; If we got this far.the claim is eligible for Value Code 80 Revenue Code Claim Lines.
         Q VC80SW
         ;
INS      ; Called by the Output Formatter [#364.7, 176]
         N A,Z
         S Z=0,A=$G(^TMP($J,"IBLCT"))
         F  S Z=$O(IBXDATA(Z)) D  Q:'Z
         . K:'Z&($D(IBXDATA)=1) IBXDATA
         . S:'Z ^TMP($J,"IBLCT")=A Q:'Z
         . S A=A+1 M IBXSAVE("INPT",Z)=IBXDATA(Z)
         . K IBXDATA(Z) S IBXDATA(Z)=A
         . D:Z>1 ID^IBCEF2(Z,"INS ")
         ;
         I +$G(VC80) D
         . S Z=$O(IBXDATA(""),-1)+1
         . D ID^IBCEF2(Z,"INS ")
         . ;D VC80I^IBCEF22(A,$G(IBXSV("VC80",A)))  ; Process for 'SNF' claims & the last claim line
         . D VC80I^IBCEF22(A)   ; Process for 'SNF' claims & the last claim line.
         . S A=A+1
         . S IBXDATA(Z)=A
         Q
         ;
INS05    ; Called by the Output Formatter [#364.7, 178]
         ;K IBXDATA S IBXNOREQ='$$REQ^IBCEF1(3,"",IBXIEN) N Z S Z=0 F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  S:$P(IBXSAVE("INPT",Z),U,4)'=
          "" IBXDATA(Z)=$P(IBXSAVE("INPT",Z),U,4)
         K IBXDATA
         S IBXNOREQ='$$REQ^IBCEF1(3,"",IBXIEN)
         N LAST,Z S (LAST,Z)=0
         F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  D  Q:LAST
         . I +$G(VC80) S:$O(IBXSAVE("INPT",Z))="" LAST=1,IBXDATA(Z)=$P(IBXSAVE("INPT",Z),U,4) Q:LAST
         . S:$P(IBXSAVE("INPT",Z),U,4)'="" IBXDATA(Z)=$P(IBXSAVE("INPT",Z),U,4)
         Q
         ;
INS07    ; Called by the Output Formatter [#364.7, 181]
         ;N Z S Z=0 F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  S:$P(IBXSAVE("INPT",Z),U,9)'=""&($P(IBXSAVE("INPT",Z),U,2)'="") IBXSAVE("PMOD
          ",Z)=$P(IBXSAVE("INPT",Z),U,9),IBXDATA(Z)=$P(IBXSAVE("PMOD",Z),",")
         N LAST,Z S (LAST,Z)=0
         F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  D  Q:LAST
         . I +$G(VC80) S:$O(IBXSAVE("INPT",Z))="" LAST=1,IBXDATA(Z)="" Q:LAST
         . S:$P(IBXSAVE("INPT",Z),U,9)'=""&($P(IBXSAVE("INPT",Z),U,2)'="") IBXSAVE("PMOD",Z)=$P(IBXSAVE("INPT",Z),U,9),IBXDATA(Z)=$P
          (IBXSAVE("PMOD",Z),",")
         Q
         ;
INS09    ; Called by the Output Formatter [#364.7, 180]
         ;K IBXDATA N Z S Z=0 F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  S IBXDATA(Z)=$S($P(IBXSAVE("INPT",Z),U,5)="":$$DOLLAR^IBCEFG1("0.00
          "),1:$$DOLLAR^IBCEFG1($P(IBXSAVE("INPT",Z),U,5)))
         K IBXDATA
         N LAST,Z S (LAST,Z)=0
         F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  D  Q:LAST
         . I +$G(VC80) S:$O(IBXSAVE("INPT",Z))="" LAST=1,IBXDATA(Z)=0 Q:LAST
         . S IBXDATA(Z)=$S($P(IBXSAVE("INPT",Z),U,5)="":$$DOLLAR^IBCEFG1("0.00"),1:$$DOLLAR^IBCEFG1($P(IBXSAVE("INPT",Z),U,5)))
         Q
         ;
INS12    ; Called by the Output Formatter [#364.7, 482]
         ;K IBXDATA N Z S Z=0 F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  S:$P(IBXSAVE("INPT",Z),U,6)'="" IBXDATA(Z)=$$DOLLAR^IBCEFG1($P(IBXS
          AVE("INPT",Z),U,6))
         K IBXDATA
         N LAST,Z S (LAST,Z)=0
         F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  D  Q:LAST
         . I +$G(VC80) S:$O(IBXSAVE("INPT",Z))="" LAST=1,IBXDATA(Z)="" Q:LAST
         . S:$P(IBXSAVE("INPT",Z),U,6)'="" IBXDATA(Z)=$$DOLLAR^IBCEFG1($P(IBXSAVE("INPT",Z),U,6))
         Q
         ;
INS13    ; Called by the Output Formatter [#364.7, 805]
         ;K IBXDATA N Z,Z0 S Z=0 F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  S:$P(IBXSAVE("INPT",Z),U)'="" Z0=$P(IBXSAVE("INPT",Z),U) S IBXDA
          TA(Z)=$S(Z0="":"",Z0'<100&(Z0'>219):"DA",1:"UN") K:IBXDATA(Z)="" IBXDATA(Z) K IBXDATA
         K IBXDATA
         N LAST,Z,Z0 S (LAST,Z)=0
         F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  D  Q:LAST
         . I +$G(VC80) S:$O(IBXSAVE("INPT",Z))="" LAST=1,IBXDATA(Z)=$P(IBXSAVE("INPT",Z),U,13) Q:LAST
         . S:$P(IBXSAVE("INPT",Z),U)'="" Z0=$P(IBXSAVE("INPT",Z),U)
         . S IBXDATA(Z)=$S(Z0="":"",Z0'<100&(Z0'>219):"DA",1:"UN") K:IBXDATA(Z)="" IBXDATA(Z)
         Q
         ;/End IB*2.0*608 (US9) - vd
         ;

*****   INDEX OF IBCEF2   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   A            ALLPAYID+8~,ALLPAYID+11,ALLPAYID+12*,ALLPAYID+14*,ALLPAYID+28*,ALLPAYID+29*,ALLPAYID+45*,ALLPAYID+48*,ALLPAYID+51*
                ALLPAYID+54*,ALLPAYID+57,ALLPAYID+58,LADJ+9~,LADJ+10*,LADJ+11*,LADJ+12,AMTOUT~,AMTOUT+2,INS+1~,INS+2*,INS+5,INS+6*
                INS+7
                INS+14,INS+15*,INS+16
   B            LADJ+9~,LADJ+10*,LADJ+12*,AMTOUT~,AMTOUT+2
   BLTYPX       VC80CK+1~,VC80CK+8*,VC80CK+9
   C            AMTOUT~,AMTOUT+2
   CNT          ID1+10~,ID1+44*,ID1+45
   COB          PPOL~,PPOL+2,ESGHPST~,ESGHPST+1,ESGHPNL~,ESGHPNL+1,VC80CK+1~,VC80CK+5*
   CT           ID1~,ID1+12,ID1+17,ID1+29,ID1+40,ID1+42,ID1+44,ID1+45,ID1+46*,M~,M+2*,M+5
   DCT          ID1~,ID1+14*,ID1+28*
   DFN          INDTS+1~,INDTS+2*,INDTS+3
   DX           ID1~,ID1+16*,ID1+18,ID1+19,ID1+25,ID1+27*,ID1+28*,ID1+40*,ID1+42,ID1+45
   DX(          ID1+17,ID1+29,ID1+40,ID1+46
   DXIEN        ID1+10~,ID1+29*,ID1+31
   DXQ          ID1+10~,ID1+23*,ID1+32*,ID1+35*,ID1+37*,ID1+45
   ECT          ID1~,ID1+14*,ID1+27*
   EDX          ID1+10~,ID1+16*,ID1+18*,ID1+19*,ID1+21,ID1+23,ID1+27,ID1+28,ID1+32,ID1+35
   GRP          LADJ~,LADJ+11,LADJ+12
   I            ID1+10~,ID1+21*,ID1+44,ID1+45
   IB0          VC80CK+1~,VC80CK+7*,VC80CK+8
   IBA          SVITM~
   IBA("OUTPT"  SVITM+7!
   IBARR        AMTOUT+2~*
   IBC          OTHINS1+2~,OTHINS1+4*,OTHINS1+5*,OTHINS1+6*,OTHQ
   IBDATA       LINK~,LINK+7
   IBEBI        ALLPAYID+8~,ALLPAYID+18*,ALLPAYID+19*,ALLPAYID+21*,ALLPAYID+22*,ALLPAYID+48
   IBIFN        HOS~,HOS+2,OTHINS~,OTHINS+5,OTHINS1~,OTHINS1+3,OTHINS1+4,OTHINS1+5,RECVR~,RECVR+5,RECVR+6,RECVR+8,RECVR+9,RECVR+11
                ALLPAYID~,ALLPAYID+10,ALLPAYID+16,ALLPAYID+21,ALLPAYID+24,ALLPAYID+25,ALLPAYID+26,ALLPAYID+28,ALLPAYID+54,PAYERID~
                PAYERID+5
                PAYERID+6,CURR~,CURR+2,ADMDT~,ADMDT+1,DISDT~,DISDT+1,INDTS~,INDTS+2,TXMT~,TXMT+1,COID~,COID+1,PPOL~,PPOL+2,ESGHPST~
                ESGHPST+1,ESGHPNL~,ESGHPNL+1,SNF~,SNF+6,VC80CK~,VC80CK+3,VC80CK+4,VC80CK+5,VC80CK+6,VC80CK+7
   IBINS        ID1+10~,ID1+11*,ID1+25,ID1+35,ID1+40
   IBINST       ALLPAYID+8~,ALLPAYID+16*,ALLPAYID+18,ALLPAYID+19,ALLPAYID+28,ALLPAYID+45,ALLPAYID+51,ALLPAYID+54
   IBKEY        LINK+5~,LINK+7*,LINK+8,LINK+9,LINK+10*,LINK+11
   IBLN         LINK+5~,LINK+6*,LINK+8,LINK+9*,LINK+11*,LINKQ
   IBM          ALLPAYID+8~,ALLPAYID+10*,ALLPAYID+11
   IBM2         ALLPAYID+8~,ALLPAYID+10*,ALLPAYID+14
   IBMCR        ALLPAYID+8~,ALLPAYID+25*,ALLPAYID+51
   IBMRA        ALLPAYID+8~,ALLPAYID+24*,ALLPAYID+48
   IBPH         RECVR+3~,RECVR+5*,RECVR+6,RECVR+8
   IBSEQ        PAYERID+2~,PAYERID+5*,PAYERID+6
   IBTYP        LINK~,LINK+7,LINK+8,LINK+9,LINK+10,LINK+11
   IBX          ALLPAYID+8~
   IBXDATA      ALLPAYID~,ALLPAYID+10*,AMTOUT+2!,INS+4!,INS05+2!,INS09+2!,INS12+2!,INS13+2!
   IBXDATA(     ALLPAYID+11*,LADJ+12*,AMTOUT+2*,INS+3,INS+6,INS+7!*,INS+16*,INS05+6*,INS05+7*,INS07+4*,INS07+5*,INS09+5*,INS09+6*
                INS12+5*,INS12+6*,INS13+5*,INS13+7*!
   IBXDATA(""   INS+11
>> IBXIEN       ID1+11,ID1+40,ID1+46,INS05+3
>> IBXNOREQ     INS05+3*
>> IBXPG        ID+8
   IBXSAVE      LADJ~,AMTOUT~
   IBXSAVE(     LADJ+11,LADJ+12
   IBXSAVE("INPT" 
                INS+6*,INS05+5,INS05+6,INS05+7,INS07+3,INS07+4,INS07+5,INS09+4,INS09+5,INS09+6,INS12+4,INS12+5,INS12+6,INS13+4
                INS13+5,INS13+6
   IBXSAVE("PMOD" 
                INS07+5*
>> IBXSIZE      ID+8
   IBZ          AMTOUT+2~*
   ICDV         ID1+10~,ID1+17*,ID1+18,ID1+19,ID1+37
   K            AMTOUT+2~*
   LAST         INS05+4~*,INS05+5,INS05+6*,INS07+2~*,INS07+3,INS07+4*,INS09+3~*,INS09+4,INS09+5*,INS12+3~*,INS12+4,INS12+5*
                INS13+3~*,INS13+4,INS13+5*
   LINE         SVITM~,SVITM+7,LADJ~,LADJ+11,LADJ+12
   LN           ID~,ID+7,ID+8,ID1~,ID1+46*
   MCR          RECVR+3~,RECVR+11*,RECVR+12
   NOOUTCK      ADMDT~,ADMDT+1
   NUM          RECVR+3~,RECVR+6*,RECVR+8*,RECVR+9,RECVR+12*,RECVR+13,PAYERID+2~,PAYERID+6*,PAYERID+7,VC80CK+1~,VC80CK+6
   NUM(         PAYERID+6
   NUM(1        VC80CK+6
   PIECE        LADJ~,LADJ+12
   POA          ID1+10~,ID1+31*,ID1+35*,ID1+45
   PPAYID       VC80CK+1~,VC80CK+6*
   PPOL         PPOL+1~*,PPOL+2*,PPOL+3
   RCVRID       VC80CK+1~,VC80CK+4*
   SEQ          ALLPAYID~,ALLPAYID+11
   SEQ1         LADJ~,LADJ+11,LADJ+12
   SNF          SNF+4~,SNF+5*,SNF+6*,SNF+7
   SUB          LADJ~,LADJ+11,LADJ+12
   U            RECVR+5,RECVR+8,RECVR+11,ALLPAYID+11,ALLPAYID+14,ALLPAYID+18,ALLPAYID+19,ALLPAYID+21,ALLPAYID+26,ALLPAYID+28
                ALLPAYID+45,ALLPAYID+51,INDTS+2,INDTS+3,ID1+29,ID1+31,ID1+40,ID1+45,ID1+46,LINK+7,PPOL+2,LADJ+12,AMTOUT+2,VC80CK+4
                VC80CK+8
                INS05+6,INS05+7,INS07+5,INS09+6,INS12+6,INS13+5,INS13+6
   VAIN         INDTS+1~
   VAIN(1       INDTS+3
   VAIN(7       INDTS+3
   VAINDT       INDTS+1~,INDTS+2*,INDTS+3
   VAL          ID~,ID+8,ID1+10~,ID1+12*,ID1+13*,ID1+46
>> VC80         INS+10,INS05+6,INS07+4,INS09+5,INS12+5,INS13+5
   VC80SW       VC80CK+1~,VC80CK+2*,VC80CK+3,VC80CK+4,VC80CK+5,VC80CK+6,VC80CK+9,VC80CK+10*,VC80CK+11
   X            PPOL+1~,PPOL+2*
   Y            PPOL+1~,PPOL+2*
   Z            OTHINS+4~,OTHINS+5*,OTHINS+6,OTHINS1+2~,OTHINS1+3*,OTHINS1+4,OTHINS1+5,OTHINS1+6,ALLPAYID+8~,ALLPAYID+11*
                ALLPAYID+14,ALLPAYID+48,ALLPAYID+51,ALLPAYID+54,INDTS+1~,INDTS+2*,LINK+5~,LINK+9*,LINK+11*,AMTOUT+2~*,INS+1~,INS+2*
                INS+3*,INS+4
                INS+5,INS+6,INS+7,INS+8,INS+11*,INS+12,INS+16,INS05+4~*,INS05+5*,INS05+6,INS05+7,INS07+2~*,INS07+3*,INS07+4,INS07+5
                INS09+3~*,INS09+4*,INS09+5,INS09+6,INS12+3~*,INS12+4*,INS12+5,INS12+6,INS13+3~*,INS13+4*,INS13+5,INS13+6,INS13+7
   Z0           ALLPAYID+8~,ALLPAYID+11*,ALLPAYID+18,ALLPAYID+19,ALLPAYID+21,ALLPAYID+28,INDTS+1~*,INDTS+3*,INDTS+4,SVITM+6~
                SVITM+7*,INS13+3~,INS13+6*,INS13+7
   Z1           ALLPAYID+8~,ALLPAYID+25*,ALLPAYID+26,ALLPAYID+28,ALLPAYID+45,ALLPAYID+51,SVITM+6~,SVITM+7*

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399           OTHINS1+4,OTHINS1+5,RECVR+8,ALLPAYID+10,ALLPAYID+25,INDTS+2,PPOL+2,VC80CK+7
   ^DGCR(399.3         RECVR+8
   ^DGPM(              INDTS+3
   ^DIC(36             ALLPAYID+18,ALLPAYID+19,ALLPAYID+21,ALLPAYID+28
   ^IBA(362.3          ID1+31
   ^TMP("DCX"          ID1+23,ID1+44*,ID1+45*
   ^TMP("IBXSAVE"      ID1+40*,ID1+46*
   ^TMP($J             SVITM+7*,LINK+8,LINK+9*,LINK+10,LINK+11*,INS+2,INS+5*

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$CURR       RECVR+9
   $$SNF        VC80CK+3
   ALLPAYID     PAYERID+6,VC80CK+6
   ID           ID1+46
   IDX1         ID1+25
   LINKQ        LINK+8

External References
   $$GET1^DIQ          SNF+6
   $$ICD9VER^IBACSV    ID1+17
   $$COB^IBCEF         VC80CK+5
   $$COBN^IBCEF        OTHINS+5,OTHINS1+3,PAYERID+5
   $$FT^IBCEF          RECVR+5,RECVR+6,RECVR+11,ALLPAYID+16,ALLPAYID+21,ALLPAYID+28,ID1+11
   $$FINDINS^IBCEF1    CURR+2
   $$REQ^IBCEF1        INS05+3
   $$RECVR^IBCEF2      VC80CK+4
   ID^IBCEF2           INS+8,INS+12
   $$COID^IBCEF21      COID+1
   $$ESGHPNL^IBCEF21   ESGHPNL+1
   $$ESGHPST^IBCEF21   ESGHPST+1
   ADMDT^IBCEF21       ADMDT+1
   DISDT^IBCEF21       DISDT+1
   HOS^IBCEF22         HOS+2
   VC80I^IBCEF22       INS+14
   $$MRASEC^IBCEF4     ALLPAYID+24,ALLPAYID+26
   $$TXMT^IBCEF4       TXMT+1
   SETGBL^IBCEFG       ID+8
   $$DOLLAR^IBCEFG1    AMTOUT+2,INS09+6,INS12+6
   $$MCRONBIL^IBEFUNC  ALLPAYID+25
   $$MCRWNR^IBEFUNC    RECVR+9
   $$WNRBILL^IBEFUNC   ALLPAYID+54
   INP^VADPT           INDTS+3
   $$UP^XLFSTR         ALLPAYID+22,ALLPAYID+29

*****   END   *****


IBCEF22  * *  245 Lines,  13359 Bytes, Checksum: B107716996                                           Mar 20, 2019@15:10:13 page 9
              3722 bytes in comments
IBCEF22  ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS ;06-FEB-96
         ;;2.0;INTEGRATED BILLING;**51,137,135,155,309,349,389,432,488,516,577,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
         ;  OVERFLOW FROM ROUTINE IBCEF2
HOS(IBIFN) --
          ; Extract rev codes for episode billed on a UB-04 into IBXDATA
         ; IBIFN = bill ien
         ; Format: IBXDATA(n) =
         ;  rev cd ptr ^ CPT CODE ptr ^ unit chg ^ units ^ tot charge
         ;    ^ tot uncov ^ FL49 value
         ;    ^ ien of rev code multiple entry(s) (separated by ";")
         ;    ^ modifiers specific to rev code/proc (separated by ",")
         ;    ^ rev code date, if it can be determined by a corresponding proc
         ;    ^ NDC from "CP" node of claim ^ Units/Quantity from "CP" node  - vd/IB*2*577
         ;    ^ Units/Basis of Measurement for Drugs  - vd/IB*2*577
         ;
         ;   Also Returns IBXDATA(IBI,"COB",COB,m) with COB data for each line
         ;      item found in an accepted EOB for the bill and = the reference
         ;      line in the first '^' piece followed by the '0' node of file
         ;      361.115 (LINE LEVEL ADJUSTMENTS)
         ;       COB = COB seq # of adjustment's ins co, m = seq #
         ;         -- AND --
         ;    IBXDATA(IBI,"COB",COB,m,z,p)=
         ;           the '0' node for each subordinate entry of file
         ;           361.11511 (REASONS) (Only first 3 pieces for 837)
         ;       z = group code, sometimes preceeded by a space   p = seq #
         ;
         ;         -- AND --
         ;    IBXDATA(n,"CPLNK") = soft link to corresponding entry in PROCEDURES multiple of file 399
         ;
         N IBDA,IBCOMB,IBINPAT,IBLN,IBX,IBY,IBZ,IBS,IBSS,IBXTRA,IBX1,IBXS,IBP,IBPO,IBP1,IBDEF,Z,Z0,Z1,ZX,QQ,IBMOD,LST
         S IBINPAT=$$INPAT^IBCEF(IBIFN,1)
         I 'IBINPAT D F^IBCEF("N-STATEMENT COVERS FROM DATE","IBZ",,IBIFN)
         S IBDEF=$G(IBZ),LST=""
         ;
         ; Loop through lines of claim beneath ^DGCR(399,IBIFN,"CP") and build
         ; the array IBP to be used below.
         ;    IBP(Procedure ^ Modifiers, Print Order, Line#) = Procedure Date
         ;
         S IBDA=0 F  S IBDA=$O(^DGCR(399,IBIFN,"CP",IBDA)) Q:'IBDA  S IBZ=$G(^(IBDA,0)) I IBZ D
         . S IBP(+$P(IBZ,U)_U_$$GETMOD^IBEFUNC(IBIFN,IBDA,1),$S($P(IBZ,U,4):$P(IBZ,U,4),1:999),IBDA)=$P(IBZ,U,2)
         ;
         ; Loop through the revenue codes beneath ^DGCR(399,IBIFN,"RC") and
         ; build the array IBX to be used below.
         ;    IBX(" "_Revenue Code, Print Order, Revenue Line#) =
         ;          ^DGCR(399.2, Revenue Code IEN, 0)
         ;    IBX(" "_Revenue Code, Print Order, Revenue Line#, "DT") = Procedure Date
         ;    IBX(" "_Revenue Code, Print Order, Revenue Line#, "MOD") = Modifiers
         ;
         S IBDA=0 F  S IBDA=$O(^DGCR(399,IBIFN,"RC",IBDA)) Q:'IBDA  S IBZ=$G(^(IBDA,0)) I IBZ S IBMOD="" D
         . S IBX=$G(^DGCR(399.2,+IBZ,0)),IBX1="",IBPO=0
         . ; Auto-added procedure charge
         . I $P(IBZ,U,10)=4,$P(IBZ,U,11) D  ; Soft link to proc
         .. S Z=$G(^DGCR(399,IBIFN,"CP",$P(IBZ,U,11),0))
         .. Q:Z=""
         .. S ZX=+Z_U_$$GETMOD^IBEFUNC(IBIFN,$P(IBZ,U,11),1)
         .. Q:'$O(IBP(ZX,0))&'$O(IBP1(ZX,0))
         .. I $P(IBZ,U,6) Q:$S($P(Z,U)'["ICPT":1,1:+$P(Z,U)'=$P(IBZ,U,6))
         .. S Z0=$S($D(IBP(ZX)):$O(IBP(ZX,0)),1:$O(IBP1(ZX,0)))
         .. S:'Z0 Z0=999
         .. Q:'$D(IBP(ZX,+Z0,$P(IBZ,U,11)))&'$D(IBP1(ZX,+Z0,$P(IBZ,U,11)))
         .. I '$D(IBP1(ZX,+Z0,$P(IBZ,U,11))) S IBP1(ZX,+Z0,$P(IBZ,U,11))=IBP(ZX,+Z0,$P(IBZ,U,11)) K IBP(ZX,+Z0,$P(IBZ,U,11))
         .. S IBX1=$P(Z,U,2),IBPO=+Z0,IBMOD=$P(ZX,U,2)
         . ; Manually added charge with a procedure
         . I $P(IBZ,U,6),$S($P(IBZ,U,10)=4:'$P(IBZ,U,11),1:1),+$O(IBP($P(IBZ,U,6)))=$P(IBZ,U,6) D
         .. ; No direct link, but a proc exists on rev code and in procedure mult without and then with modifiers
         .. S ZX=$O(IBP($P(IBZ,U,6)))
         .. F QQ=1,2 Q:IBPO  S Z="" F  S Z=$O(IBP(ZX,Z),-1) Q:'Z!(IBPO)  S Z0=0 F  S Z0=$O(IBP(ZX,Z,Z0)) Q:'Z0  S Z1=$G(^DGCR(399,IB
          IFN,"CP",Z0,0)) D  Q:IBPO
         ... ; Ignore if not a CPT or a modifier exists and this is first pass
         ... S IBMOD=$$GETMOD^IBEFUNC(IBIFN,Z0,1)
         ... Q:$S($P(Z1,U)'["ICPT":1,QQ=1:IBMOD'="",1:0)
         ... S IBPO=+$P(Z1,U,4),IBX1=$P(Z1,U,2)
         ... K IBP(+Z1_U_IBMOD,Z,Z0)
         . ;
         . I IBX'="" D  ; revenue code is valid
         .. S LST=$S(LST="":900,1:LST+1)
         .. F Z=LST:1 S Z0=$S(IBPO:IBPO,$D(IBX(" "_$P(IBX,U),Z)):0,1:Z) I Z0 S (LST,IBPO)=Z0 Q
         .. S IBX(" "_$P(IBX,U),IBPO,IBDA)=IBX,IBX(" "_$P(IBX,U),IBPO,IBDA,"DT")=$S(IBX1:IBX1,1:IBDEF),IBX(" "_$P(IBX,U),IBPO,IBDA,"
          MOD")=IBMOD
         ;
         ; Loop through revenue codes in IBX and build the array IBX1.
         ;
         S IBS="" F  S IBS=$O(IBX(IBS)) Q:IBS=""  S IBPO=0 F  S IBPO=$O(IBX(IBS,IBPO)) Q:'IBPO  D
         . S IBDA=0 F  S IBDA=$O(IBX(IBS,IBPO,IBDA)) Q:'IBDA  S IBX=$G(IBX(IBS,IBPO,IBDA)),IBZ=$G(^DGCR(399,IBIFN,"RC",IBDA,0)) I IB
          X'="" D
         .. ;S IBXS=$P(IBZ,U,2)_U_$P(IBZ,U,6)_U_$G(IBX(IBS,IBPO,IBDA,"MOD"))
         .. S IBXS=U_$P(IBZ,U,6)_U_$G(IBX(IBS,IBPO,IBDA,"MOD")) ;combine same proc and modifiers regardless of rate
         .. S:IBPO'<900&'$$ACCRV($P(IBS," ",2))&$S(IBINPAT:$P(IBZ,U,6),1:1) IBCOMB(IBS,IBXS,IBPO)=IBDA
         .. S:'$D(IBX1(IBS,IBPO,IBXS,1)) IBX1(IBS,IBPO,IBXS,1)=IBX,IBX1(IBS,IBPO,IBXS,2)=IBZ
         .. S $P(IBX1(IBS,IBPO,IBXS),U)=$P($G(IBX1(IBS,IBPO,IBXS)),U)+$P(IBZ,U,3)
         .. S $P(IBX1(IBS,IBPO,IBXS),U,2)=$P($G(IBX1(IBS,IBPO,IBXS)),U,2)+$P(IBZ,U,4)
         .. S IBX1(IBS,IBPO,IBXS,"DT")=$G(IBX(IBS,IBPO,IBDA,"DT")),IBX1(IBS,IBPO,IBXS,"IEN")=$G(IBX1(IBS,IBPO,IBXS,"IEN"))_$S($G(IBX
          1(IBS,IBPO,IBXS,"IEN")):";",1:"")_IBDA
         ;
         S IBS="" F  S IBS=$O(IBX1(IBS)) Q:IBS=""  S IBPO=899 F  S IBPO=$O(IBX1(IBS,IBPO)) Q:'IBPO  D  ; Check to combine like rev c
          odes without print order
         . N Q,Q0,Q1,Z,Z0,Z1,Z2,IBZ1,IBZ2
         . S Z=""
         . N IBACC
         . F  S Z=$O(IBX1(IBS,IBPO,Z)) Q:Z=""  S Q=IBPO F  S Q=$O(IBCOMB(IBS,Z,Q)) Q:'Q  I Q'=IBPO S IBZ1=$G(IBX1(IBS,IBPO,Z,1)),IBZ
          2=$G(IBX1(IBS,IBPO,Z,2)) D
         .. Q:$G(IBX1(IBS,IBPO,Z,1))'=$G(IBX1(IBS,Q,Z,1))
         .. S Q1=1,IBACC=$$ACCRV(+$P(IBS," ",2))
         .. F Q0=1,5:1:7,10:1:13,15 D  Q:'Q1
         ... I IBACC Q:Q0=5!(Q0>6)
         ... I (Q0=11!(Q0=15))&($P($G(IBX1(IBS,Q,Z,2)),U,10)=3) Q
         ... I Q0=5,'IBINPAT Q
         ... I $P($G(IBX1(IBS,IBPO,Z,2)),U,Q0)'=$P($G(IBX1(IBS,Q,Z,2)),U,Q0) S Q1=0
         .. Q:'Q1
         .. S $P(IBX1(IBS,IBPO,Z,2),U,3)=$P(IBX1(IBS,IBPO,Z,2),U,3)+$P(IBX1(IBS,Q,Z,2),U,3)
         .. S $P(IBX1(IBS,IBPO,Z,2),U,4)=$P(IBX1(IBS,IBPO,Z,2),U,4)+$P(IBX1(IBS,Q,Z,2),U,4)
         .. S $P(IBX1(IBS,IBPO,Z,2),U,9)=$P(IBX1(IBS,IBPO,Z,2),U,9)+$P(IBX1(IBS,Q,Z,2),U,9)
         .. S IBX1(IBS,IBPO,Z)=$P(IBX1(IBS,IBPO,Z,2),U,3)_U_$P(IBX1(IBS,IBPO,Z,2),U,4)
         .. S IBX1(IBS,IBPO,Z,"IEN")=IBX1(IBS,IBPO,Z,"IEN")_";"_IBX1(IBS,Q,Z,"IEN")
         .. K IBX1(IBS,Q,Z)
         ;
         D SPLIT  ; 488 ; baa
         ;
         ; Loop through IBX1 and build the array IBXDATA. Everything in the
         ; array IBXDATA comes from the array IBX1.
         ;
         S IBS="",IBLN=0
         F  S IBS=$O(IBX1(IBS)) Q:IBS=""  S IBPO=0 F  S IBPO=$O(IBX1(IBS,IBPO)) Q:'IBPO  S IBSS="" F  S IBSS=$O(IBX1(IBS,IBPO,IBSS))
           Q:IBSS=""  D
         . S IBX=$G(IBX1(IBS,IBPO,IBSS,1)),IBZ=$G(IBX1(IBS,IBPO,IBSS,2))
         . S IBLN=$G(IBLN)+1,IBXDATA(IBLN)=$P(IBX,U)_U_$P(IBZ,U,6)_U_$P(IBZ,U,2)_U_+IBX1(IBS,IBPO,IBSS)_U_+$P(IBX1(IBS,IBPO,IBSS),U,
          2),$P(IBXDATA(IBLN),U,10)=$G(IBX1(IBS,IBPO,IBSS,"DT"))
         . S $P(IBXDATA(IBLN),U,6)=$P(IBZ,U,9),$P(IBXDATA(IBLN),U,7)=$P(IBZ,U,13),$P(IBXDATA(IBLN),U,8)=$G(IBX1(IBS,IBPO,IBSS,"IEN")
          ),$P(IBXDATA(IBLN),U,9)=$P($P(IBSS,U,3),",",1,2)
         . S IBXDATA(IBLN,"CPLNK")=$$RC2CP(IBIFN,$P($P(IBXDATA(IBLN),U,8),";"))
         . ;
         . ; MRD;IB*2.0*516 - Added NDC and Units to line level of claim.
         . ;I IBXDATA(IBLN,"CPLNK") S $P(IBXDATA(IBLN),U,11,12)=$TR($P($G(^DGCR(399,IBIFN,"CP",IBXDATA(IBLN,"CPLNK"),1)),U,7,8),"-")
         . ; VAD;IB*2.0*577 - Added Unit/Basis of Measurement to line level of claim.
         . I IBXDATA(IBLN,"CPLNK") D
         . . S $P(IBXDATA(IBLN),U,11,13)=$TR($P($G(^DGCR(399,IBIFN,"CP",IBXDATA(IBLN,"CPLNK"),1)),U,7,8),"-")_U_$P($G(^DGCR(399,IBIF
          N,"CP",IBXDATA(IBLN,"CPLNK"),2)),U)
         . . I +$P(IBXDATA(IBLN),U,12) S $P(IBXDATA(IBLN),U,12)=$S($P(IBXDATA(IBLN),U,12)#1:+$J($P(IBXDATA(IBLN),U,12),0,3),1:$P(IBX
          DATA(IBLN),U,12))
         . ;
         . ; Extract line lev COB data for sec or tert bill
         . I $$COBN^IBCEF(IBIFN)>1 D COBLINE^IBCEU6(IBIFN,IBLN,.IBXDATA,,.IBXTRA) I $D(IBXTRA) D COMBO^IBCEU2(.IBXDATA,.IBXTRA,1) ;H
          andle bundled/unbundled
         ;
         I $D(^IBA(362.4,"AIFN"_IBIFN))!$D(^IBA(362.5,"AIFN"_IBIFN)) D
         . N IBARRAY,IBX,IBZ,IBRX,IBLCNT
         . S IBLCNT=0
         . ; Print prescriptions, prosthetics on front of UB-04
         . D SET^IBCSC5A(IBIFN,.IBARRAY)
         . I $P(IBARRAY,U,2) D
         .. S IBX=+$P(IBARRAY,U,2)+2
         .. S IBLCNT=IBLCNT+1,IBXSAVE("RX-UB-04",IBLCNT)=""
         .. S IBLCNT=IBLCNT+1,IBXSAVE("RX-UB-04",IBLCNT)="PRESCRIPTION REFILLS:",IBLCNT=2
         .. S IBX=0 F  S IBX=$O(IBARRAY(IBX)) Q:IBX=""  S IBY=0 F  S IBY=$O(IBARRAY(IBX,IBY)) Q:'IBY  S IBRX=IBARRAY(IBX,IBY) D
         ... D ZERO^IBRXUTL(+$P(IBRX,U,2))
         ... S IBLCNT=IBLCNT+1,IBXSAVE("RX-UB-04",IBLCNT)=IBX_$J(" ",(11-$L(IBX)))_" "_$J($S($P(IBRX,U,6):"$"_$FN($P(IBRX,U,6),",",2
          ),1:""),10)_"  "_$J($$FMTE^XLFDT(IBY,2),8)_"  "_$G(^TMP($J,"IBDRUG",+$P(IBRX,U,2),.01))
         ... S IBZ=$S(+$P(IBRX,U,4):"QTY: "_$P(IBRX,U,4)_" ",1:"")_$S(+$P(IBRX,U,3):"for "_$P(IBRX,U,3)_" days supply ",1:"") I IBZ'
          ="" S IBLCNT=IBLCNT+1,IBXSAVE("RX-UB-04",IBLCNT)=$J(" ",35)_IBZ
         ... S IBZ=$S($P(IBRX,U,5)'="":"NDC #: "_$P(IBRX,U,5),1:"") I IBZ'="" S IBLCNT=IBLCNT+1,IBXSAVE("RX-UB-04",IBLCNT)=$J(" ",35
          )_IBZ
         ... K ^TMP($J,"IBDRUG")
         ... Q
         . ;
         . D SET^IBCSC5B(IBIFN,.IBARRAY)
         . I $P(IBARRAY,U,2) D
         .. S IBLCNT=0
         .. S IBX=+$P(IBARRAY,U,2)+2
         .. S IBLCNT=IBLCNT+1,IBXSAVE("PROS-UB-04",IBLCNT)=""
         .. S IBLCNT=IBLCNT+1,IBXSAVE("PROS-UB-04",IBLCNT)="PROSTHETIC REFILLS:",IBLCNT=2
         .. S IBX=0 F  S IBX=$O(IBARRAY(IBX)) Q:IBX=""  S IBY=0 F  S IBY=$O(IBARRAY(IBX,IBY)) Q:'IBY  D
         ... S IBLCNT=IBLCNT+1,IBXSAVE("PROS-UB-04",IBLCNT)=$$FMTE^XLFDT(IBX,2)_" "_$J($S($P(IBARRAY(IBX,IBY),U,2):"$"_$FN($P(IBARRA
          Y(IBX,IBY),U,2),",",2),1:""),10)_"  "_$E($$PINB^IBCSC5B(+IBARRAY(IBX,IBY)),1,54)
         Q
         ;
ACCRV(X) ; Returns 1 if X is an accomodation RC, 0 if not
         Q ((X'<100&(X'>219))!(X=224))
         ;
RC2CP(IBIFN,IBRCIEN) --
          ; returns "CP" multiple pointer that corresponds to a given "RC" multiple pointer in file 399
         ; IBIFN - ien in file 399, top level
         ; IBRCIEN, ien in sub-file 399.042 (REVENUE CODE)
         ;
         ; returns pointer to sub-file 399.0304 (PROCEDURES) or 0 if no valid pointer can be found.
         ;
         N IBRC0,IBCPIEN
         I +IBIFN'>0 Q 0
         I +IBRCIEN'>0 Q 0
         S IBRC0=$G(^DGCR(399,IBIFN,"RC",IBRCIEN,0)),IBCPIEN=0
         I $P(IBRC0,U,10)=4 S IBCPIEN=+$P(IBRC0,U,11) ; type = CPT
         I $P(IBRC0,U,10)=3 S IBCPIEN=+$P(IBRC0,U,15) ; type = RX
         I 'IBCPIEN D
         . S IBRC=$P(IBRC0,U,6)
         . N IBCPTIEN S IBCPTIEN=IBRC
         . F  S IBCPTIEN=$O(^DGCR(399,IBIFN,"CP","B",IBCPTIEN)) Q:(+IBCPTIEN'=IBRC)!IBCPIEN  D
         .. N OK,Z S OK="",Z=""
         .. S Z=$O(^DGCR(399,IBIFN,"CP","B",IBCPTIEN,Z)) Q:'Z!OK  D
         ... N CNTR S CNTR=0
         ... F  S CNTR=$O(IBXDATA(CNTR)) Q:'CNTR!'OK  D
         .... I $G(IBXDATA(CNTR,"CPLNK"))=Z S OK=0 Q
         ... I OK="" S OK=1,IBCPIEN=Z
         I IBCPIEN,'$D(^DGCR(399,IBIFN,"CP",IBCPIEN)) S IBCPIEN=0
         Q IBCPIEN
         ;
SPLIT       ; Split codes into multiple lines as needed => baa ; 488
         ; The max line $ amount for a printed claim is less than the max line $ amount for an electronically transmitted claim.
         ; However, since the clearinghouse can drop to print for a myriad of reasons at any time, the lines may need to be split
         ; so they can all fit on a printed claim line just in case. In addition, since some claims are sent to primary payers as 
         ; electronic claims but printed for secondary claims, the lines numbers need to be the same going out to ensure the 
         ; COB data is correct applied (previous payments adj, etc are applied to the correct line.)
         N IBS,IBSS,DATA,CHRG,UNTS,TOT,LNS,MOD,CPT,LNK,RLNK,IBSS1,LTOT,LUNT,REC,LST,FST
         S IBS="",IBLN=0
         F  S IBS=$O(IBX1(IBS)) Q:IBS=""  D
         . S LST=$O(IBX1(IBS,""),-1)  ;we have to go through each level so must reset for each
         . S LNK=0
         . F  S LNK=$O(IBX1(IBS,LNK)) Q:('LNK!(LNK>LST))  S IBSS="" F  S IBSS=$O(IBX1(IBS,LNK,IBSS)) Q:IBSS=""  D
         .. S DATA=IBX1(IBS,LNK,IBSS,2)
         .. S CHRG=$P(DATA,U,2)
         .. S UNTS=$P(DATA,U,3)
         .. I UNTS=1 Q  ; if only one unit can't split
         .. S TOT=UNTS*CHRG
         .. I TOT<=9999999.99 Q  ; if the total is less tham max we don't need to split
         .. S LNS=TOT\9999999.99
         .. S MOD=TOT#9999999.99
         .. I MOD S LNS=LNS+1
         .. I CHRG>4999999.995 S LNS=UNTS  ; if the charge is greater than half the mas can't put more than one on a line.
         .. S LUNT=UNTS\LNS
         .. S MOD=UNTS#LNS
         .. I MOD S LUNT=LUNT+1
         .. F L=1:1:LNS D
         ... N Q
         ... S Q=$O(IBX1(IBS,""),-1)+1
         ... I L=1 S Q=LNK
         ... M IBX1(IBS,Q,IBSS)=IBX1(IBS,LNK,IBSS)
         ... S $P(IBX1(IBS,Q,IBSS,2),U,3)=LUNT,$P(IBX1(IBS,Q,IBSS,2),U,4)=LUNT*CHRG
         ... S $P(IBX1(IBS,Q,IBSS),U,1)=LUNT,$P(IBX1(IBS,Q,IBSS),U,2)=LUNT*CHRG
         ... I L>1 S $P(IBX1(IBS,Q,IBSS,2),U,9)=""
         ... S UNTS=UNTS-LUNT,LUNT=$S(UNTS>LUNT:LUNT,1:UNTS)
         Q
         ;
         ; /Begin IB*2.0*608 - US9 - vd
VC80I(LN)  ; Extracts the data for the "INS" record for VALUE CODE 80 Line item.
         ; INPUT:      LN = Line counter
         ;
         N VC80REC,IBLOOP
         S (VC80REC,IBLOOP)=""
         F  S IBLOOP=$O(IBXSV("VC80",IBLOOP)) Q:IBLOOP=""  Q:$P(IBXSV("VC80",IBLOOP),U)=80
         I IBLOOP]"" S VC80REC=IBXSV("VC80",IBLOOP)
         ;
         N UNIT,VC80LN
         S UNIT=$P(VC80REC,U,2)    ; Service Unit Count
         S VC80LN=LN+1             ; Get the next available line number.
         ;
         S $P(IBXSAVE("INPT",VC80LN),U,1)="0022"
         S $P(IBXSAVE("INPT",VC80LN),U,2)="AAA00"
         S $P(IBXSAVE("INPT",VC80LN),U,4)=$S(+IBLOOP:UNIT,1:0)
         S $P(IBXSAVE("INPT",VC80LN),U,9)=0
         S $P(IBXSAVE("INPT",VC80LN),U,13)=$S(+IBLOOP:"DA",1:"UN")
         Q
         ; /End IB*2.0*608
         ;

*****   INDEX OF IBCEF22   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   CHRG         SPLIT+6~,SPLIT+13*,SPLIT+16,SPLIT+21,SPLIT+30,SPLIT+31
   CNTR         RC2CP+18~*,RC2CP+19*,RC2CP+20
   CPT          SPLIT+6~
   DATA         SPLIT+6~,SPLIT+12*,SPLIT+13,SPLIT+14
   FST          SPLIT+6~
   IBACC        HOS+89~,HOS+92*,HOS+94
   IBARRAY      HOS+129~,HOS+132,HOS+133,HOS+134,HOS+145,HOS+146,HOS+148
   IBARRAY(     HOS+137,HOS+151,HOS+152
   IBCOMB       HOS+25~
   IBCOMB(      HOS+80*,HOS+90
   IBCPIEN      RC2CP+6~,RC2CP+9*,RC2CP+10*,RC2CP+11*,RC2CP+12,RC2CP+15,RC2CP+21*,RC2CP+22*,RC2CP+23
   IBCPTIEN     RC2CP+14~*,RC2CP+15*,RC2CP+17
   IBDA         HOS+25~,HOS+34*,HOS+35,HOS+44*,HOS+72,HOS+77*,HOS+79,HOS+80,HOS+84
   IBDEF        HOS+25~,HOS+28*,HOS+72
   IBIFN        HOS~,HOS+26,HOS+27,HOS+34,HOS+35,HOS+44,HOS+48,HOS+50,HOS+62,HOS+64,HOS+77,HOS+116,HOS+122,HOS+126,HOS+128,HOS+132
                HOS+145,RC2CP~,RC2CP+7,RC2CP+9,RC2CP+15,RC2CP+17,RC2CP+22
   IBINPAT      HOS+25~,HOS+26*,HOS+27,HOS+80,HOS+96
   IBLCNT       HOS+129~,HOS+130*,HOS+135*,HOS+136*,HOS+139*,HOS+140*,HOS+141*,HOS+147*,HOS+149*,HOS+150*,HOS+152*
   IBLN         HOS+25~,HOS+111*,HOS+114*,HOS+115,HOS+116,HOS+121,HOS+122,HOS+123,HOS+126,SPLIT+7*
   IBLOOP       VC80I+3~,VC80I+4*,VC80I+5*,VC80I+6,VC80I+14,VC80I+16
   IBMOD        HOS+25~,HOS+44*,HOS+57*,HOS+64*,HOS+65,HOS+67,HOS+72
   IBP          HOS+25~
   IBP(         HOS+35*,HOS+51,HOS+53,HOS+55,HOS+56!,HOS+59,HOS+61,HOS+62,HOS+67!
   IBP1         HOS+25~
   IBP1(        HOS+51,HOS+53,HOS+55,HOS+56*
   IBPO         HOS+25~,HOS+45*,HOS+57*,HOS+62,HOS+66*,HOS+71*,HOS+72,HOS+76*,HOS+77,HOS+79,HOS+80,HOS+81,HOS+82,HOS+83,HOS+84
                HOS+86*,HOS+90,HOS+91,HOS+97,HOS+99,HOS+100,HOS+101,HOS+102,HOS+103,HOS+112*,HOS+113,HOS+114,HOS+115
>> IBRC         RC2CP+13*,RC2CP+14,RC2CP+15
   IBRC0        RC2CP+6~,RC2CP+9*,RC2CP+10,RC2CP+11,RC2CP+13
   IBRCIEN      RC2CP~,RC2CP+8,RC2CP+9
   IBRX         HOS+129~,HOS+137*,HOS+138,HOS+139,HOS+140,HOS+141
   IBS          HOS+25~,HOS+76*,HOS+77,HOS+79,HOS+80,HOS+81,HOS+82,HOS+83,HOS+84,HOS+86*,HOS+90,HOS+91,HOS+92,HOS+95,HOS+97,HOS+99
                HOS+100,HOS+101,HOS+102,HOS+103,HOS+104,HOS+111*,HOS+112*,HOS+113,HOS+114,HOS+115,SPLIT+6~,SPLIT+7*,SPLIT+8*
                SPLIT+9
                SPLIT+11,SPLIT+12,SPLIT+27,SPLIT+29,SPLIT+30,SPLIT+31,SPLIT+32
   IBSS         HOS+25~,HOS+112*,HOS+113,HOS+114,HOS+115,SPLIT+6~,SPLIT+11*,SPLIT+12,SPLIT+29,SPLIT+30,SPLIT+31,SPLIT+32
   IBSS1        SPLIT+6~
   IBX          HOS+25~,HOS+45*,HOS+69,HOS+71,HOS+72,HOS+77*,HOS+81,HOS+113*,HOS+114,HOS+129~,HOS+134*,HOS+137*,HOS+139,HOS+148*
                HOS+151*,HOS+152
   IBX(         HOS+76,HOS+77,HOS+79,HOS+84
   IBX(" "      HOS+71,HOS+72*
   IBX1         HOS+25~,HOS+45*,HOS+57*,HOS+66*,HOS+72
   IBX1(        HOS+81*,HOS+82*,HOS+83*,HOS+84*,HOS+86,HOS+90,HOS+91,HOS+95,HOS+97,HOS+99*,HOS+100*,HOS+101*,HOS+102*,HOS+103*
                HOS+104!,HOS+112,HOS+113,HOS+114,HOS+115,SPLIT+8,SPLIT+9,SPLIT+11,SPLIT+12,SPLIT+27,SPLIT+29*,SPLIT+30*,SPLIT+31*
                SPLIT+32*
>> IBXDATA      HOS+126
>> IBXDATA(     HOS+114*,HOS+115*,HOS+116*,HOS+121,HOS+122*,HOS+123*,RC2CP+19,RC2CP+20
   IBXS         HOS+25~,HOS+79*,HOS+80,HOS+81,HOS+82,HOS+83,HOS+84
>> IBXSAVE("INPT" 
                VC80I+12*,VC80I+13*,VC80I+14*,VC80I+15*,VC80I+16*
>> IBXSAVE("PROS-UB-04" 
                HOS+149*,HOS+150*,HOS+152*
>> IBXSAVE("RX-UB-04" 
                HOS+135*,HOS+136*,HOS+139*,HOS+140*,HOS+141*
>> IBXSV("VC80" VC80I+5,VC80I+6
   IBXTRA       HOS+25~,HOS+126
   IBY          HOS+25~,HOS+137*,HOS+139,HOS+151*,HOS+152
   IBZ          HOS+25~,HOS+28,HOS+34*,HOS+35,HOS+44*,HOS+45,HOS+47,HOS+48,HOS+50,HOS+52,HOS+55,HOS+56,HOS+59,HOS+61,HOS+77*,HOS+79
                HOS+80,HOS+81,HOS+82,HOS+83,HOS+113*,HOS+114,HOS+115,HOS+129~,HOS+140*,HOS+141*
   IBZ1         HOS+87~,HOS+90*
   IBZ2         HOS+87~,HOS+90*
>> L            SPLIT+25*,SPLIT+28,SPLIT+32
   LN           VC80I~,VC80I+10
   LNK          SPLIT+6~,SPLIT+10*,SPLIT+11*,SPLIT+12,SPLIT+28,SPLIT+29
   LNS          SPLIT+6~,SPLIT+18*,SPLIT+20*,SPLIT+21*,SPLIT+22,SPLIT+23,SPLIT+25
   LST          HOS+25~,HOS+28*,HOS+70*,HOS+71*,SPLIT+6~,SPLIT+9*,SPLIT+11
   LTOT         SPLIT+6~
   LUNT         SPLIT+6~,SPLIT+22*,SPLIT+24*,SPLIT+30,SPLIT+31,SPLIT+33*
   MOD          SPLIT+6~,SPLIT+19*,SPLIT+20,SPLIT+23*,SPLIT+24
   OK           RC2CP+16~*,RC2CP+17,RC2CP+19,RC2CP+20*,RC2CP+21*
   Q            HOS+87~,HOS+90*,HOS+91,HOS+95,HOS+97,HOS+99,HOS+100,HOS+101,HOS+103,HOS+104,SPLIT+26~,SPLIT+27*,SPLIT+28*,SPLIT+29
                SPLIT+30,SPLIT+31,SPLIT+32
   Q0           HOS+87~,HOS+93*,HOS+94,HOS+95,HOS+96,HOS+97
   Q1           HOS+87~,HOS+92*,HOS+93,HOS+97*,HOS+98
   QQ           HOS+25~,HOS+62*,HOS+65
   REC          SPLIT+6~
   RLNK         SPLIT+6~
   TOT          SPLIT+6~,SPLIT+16*,SPLIT+17,SPLIT+18,SPLIT+19
   U            HOS+35,HOS+47,HOS+48,HOS+50,HOS+52,HOS+55,HOS+56,HOS+57,HOS+59,HOS+61,HOS+65,HOS+66,HOS+67,HOS+71,HOS+72,HOS+79
                HOS+80,HOS+82,HOS+83,HOS+95,HOS+97,HOS+99,HOS+100,HOS+101,HOS+102,HOS+114,HOS+115,HOS+116,HOS+122,HOS+123,HOS+133
                HOS+134
                HOS+138,HOS+139,HOS+140,HOS+141,HOS+146,HOS+148,HOS+152,RC2CP+10,RC2CP+11,RC2CP+13,SPLIT+13,SPLIT+14,SPLIT+30
                SPLIT+31,SPLIT+32,VC80I+5,VC80I+9,VC80I+12,VC80I+13,VC80I+14,VC80I+15,VC80I+16
   UNIT         VC80I+8~,VC80I+9*,VC80I+14
   UNTS         SPLIT+6~,SPLIT+14*,SPLIT+15,SPLIT+16,SPLIT+21,SPLIT+22,SPLIT+23,SPLIT+33*
   VC80LN       VC80I+8~,VC80I+10*,VC80I+12,VC80I+13,VC80I+14,VC80I+15,VC80I+16
   VC80REC      VC80I+3~,VC80I+4*,VC80I+6*,VC80I+9
   X            ACCRV~,ACCRV+1
   Z            HOS+25~,HOS+48*,HOS+49,HOS+50,HOS+52,HOS+57,HOS+62*,HOS+67,HOS+71*,HOS+87~,HOS+88*,HOS+90*,HOS+91,HOS+95,HOS+97
                HOS+99,HOS+100,HOS+101,HOS+102,HOS+103,HOS+104,RC2CP+16~*,RC2CP+17*,RC2CP+20,RC2CP+21
   Z0           HOS+25~,HOS+53*,HOS+54*,HOS+55,HOS+56,HOS+57,HOS+62*,HOS+64,HOS+67,HOS+71*,HOS+87~
   Z1           HOS+25~,HOS+62*,HOS+65,HOS+66,HOS+67,HOS+87~
   Z2           HOS+87~
   ZX           HOS+25~,HOS+50*,HOS+51,HOS+53,HOS+55,HOS+56,HOS+57,HOS+61*,HOS+62

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399           HOS+34,HOS+44,HOS+48,HOS+62,HOS+77,HOS+122,RC2CP+9,RC2CP+15,RC2CP+17,RC2CP+22
   ^DGCR(399.2         HOS+45
   ^IBA(362.4          HOS+128
   ^IBA(362.5          HOS+128
   ^TMP($J             HOS+139,HOS+142!

Naked Globals
   ^(           HOS+34,HOS+44

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$ACCRV      HOS+80,HOS+92
   $$RC2CP      HOS+116
   SPLIT        HOS+106

External References
   $$COBN^IBCEF        HOS+126
   $$INPAT^IBCEF       HOS+26
   F^IBCEF             HOS+27
   COMBO^IBCEU2        HOS+126
   COBLINE^IBCEU6      HOS+126
   SET^IBCSC5A         HOS+132
   $$PINB^IBCSC5B      HOS+152
   SET^IBCSC5B         HOS+145
   $$GETMOD^IBEFUNC    HOS+35,HOS+50,HOS+64
   ZERO^IBRXUTL        HOS+138
   $$FMTE^XLFDT        HOS+139,HOS+152

*****   END   *****


IBCEF31  * *  238 Lines,  10346 Bytes, Checksum: B67968602                                            Mar 20, 2019@15:10:13 page 10
              4434 bytes in comments
IBCEF31  ;ALB/ESG - FORMATTER SPECIFIC BILL FLD FUNCTIONS - CONT ;14-NOV-03
         ;;2.0;INTEGRATED BILLING;**155,296,349,400,432,488,516,592,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
         Q
         ;
ALLTYP(IBIFN) --
          ; returns codes to translate to ALL ins types on a bill
         ; IBIFN = ien of bill
         N IBX,Z
         F Z=1:1:3 S $P(IBX,U,Z)=$$INSTYP(IBIFN,Z)
         ; IBX = primary code^secondary code^tertiary code
         Q IBX
         ;
INSTYP(IBIFN,SEQ) --
          ; Returns insurance type code for an ins on a bill
         ; IBIFN = ien of bill
         ; SEQ = sequence (1,2,3) of insurance wanted - prim, second, tert
         ;       Default is current insurance co
         ;
         N IBA,Z
         ;
         I '$G(SEQ) S SEQ=$$COBN^IBCEF(IBIFN)
         S Z=+$G(^DGCR(399,IBIFN,"I"_SEQ))
         ;Codes 1:HMO;2:COMMERCIAL;3:MEDICARE;4:MEDICAID;5:GROUP POLICY;9:OTHER
         I Z D
         . S IBA=$P($G(^DIC(36,Z,3)),U,9)
         . I $$MCRWNR^IBEFUNC(Z) S IBA=3   ; force Medicare (WNR) definition to be correct
         . I IBA="" S IBA=5 ;Default is group policy - 5 if blank
         ;
         Q $G(IBA)
         ;
POLTYP(IBIFN,IBSEQ) --
          ; Returns ins electronic policy type code for one
         ;   ins policy on a bill
         ; IBIFN = ien of bill
         ; IBSEQ = sequence (1,2,3) of ins policy wanted - prim, second, tert
         ;       Default is current insurance co
         ;
         N IBPLAN,IBPLTYP
         ;
         I '$G(IBSEQ) S IBSEQ=+$$COBN^IBCEF(IBIFN)
         S IBPLAN=$G(^IBA(355.3,+$P($G(^DGCR(399,IBIFN,"I"_IBSEQ)),U,18),0))
         S IBPLTYP=$P(IBPLAN,U,15)
         ;
         ; esg - 06/30/05 - IB*2.0*296 - Force Medicare (WNR) to be correct
         ;JRA IB*2.0*592 Treat Dental Form 7 (J430D) the same as CMS-1500
         ;I $$WNRBILL^IBEFUNC(IBIFN,IBSEQ),$$FT^IBCEF(IBIFN)=2 S IBPLTYP="MB"   ; CMS-1500 ----> Medicare Part B  ;JRA IB*2.0*592 ';
          '
         ;I $$WNRBILL^IBEFUNC(IBIFN,IBSEQ),$$FT^IBCEF(IBIFN)=3 S IBPLTYP="MA"   ; UB-04 -------> Medicare Part A
         N FT S FT=$$FT^IBCEF(IBIFN)  ;JRA IB*2.0*592
         I $$WNRBILL^IBEFUNC(IBIFN,IBSEQ),(FT=2!(FT=7)) S IBPLTYP="MB"   ; CMS-1500 ----> Medicare Part B  ;JRA IB*2.0*592 same for 
          J430D
         I $$WNRBILL^IBEFUNC(IBIFN,IBSEQ),FT=3 S IBPLTYP="MA"   ; UB-04 -------> Medicare Part A  ;JRA IB*2.0*592 Use 'FT' vs functi
          on call
         ;
         I IBPLTYP="" S IBPLTYP="CI" ;Default is commercial - 'CI'
         I IBPLTYP="MX" D
         . I $P(IBPLAN,U,14)'="","AB"[$P(IBPLAN,U,14) S IBPLTYP="M"_$P(IBPLAN,U,14) Q
         . S IBPLTYP="CI"
         Q $G(IBPLTYP)
         ;
ALLPTYP(IBIFN) --
          ; returns insurance policy type codes for ALL ins on a bill
         ; IBIFN = ien of bill
         N IBX,Z S IBX=""
         F Z=1:1:3 I $D(^DGCR(399,IBIFN,"I"_Z)) S $P(IBX,U,Z)=$$POLTYP(IBIFN,Z)
         ; IBX = primary code^secondary code^tertiary code
         Q IBX
         ;
PGDX(DXCNT,IBX0,IBXDA,IBXLN,IBXCOL,IBXSIZE,IBXSAVE) --
          ; Subroutine - Checks for Diagnosis Codes (Dx) beyond 
         ; the first four, that relate to the current Dx position passed in DXCNT.
         ; This subroutine stores the Diagnosis Codes in output global using display parameters (IBXLN,IBXCOL)
         ;  THE PAGE IS ALWAYS 1 NOW SO WE DON'T NEED 4 LINES BELOW  BAA *488*
         ; If DXCNT is 1, check for Dx's 5,9,...etc & display on pages 2,3,...etc
         ; If DXCNT is 2, check for Dx's 6,10,...etc & display on pages 2,3,...etc
         ; If DXCNT is 3, check for Dx's 7,11,...etc & display on pages 2,3,...etc
         ; If DXCNT is 4, check for Dx's 8,12,...etc & display on pages 2,3,...etc
         ;
         ; Input: DXCNT= position of current Dx (from 1 to 4)
         ;        IBX0= zero-level of file 364.7 of current Dx
         ;        IBXDA= ien# of file 364.6 of current Dx
         ;        IBXLN IBXCOL= line# & Column# of current Dx
         ;        IBXSIZE= size counter
         ;        IBXSAVE("DX")= local array with all Dx's on current bill
         ;
         ;  For patch *488* 
         ;  S DXNM = 12  This is the number of diagnosis on a 1500 form  
         ;  S IBPG=1  This is the page number.  All 12 print on page 1
         N IBPG,VAL
         S IBPG=1
         I '$D(IBXSAVE("DX",DXCNT)) Q
         S VAL=$P($$ICD9^IBACSV(+IBXSAVE("DX",DXCNT)),U)   ; resolve Dx pointer
         S VAL=$$FORMAT^IBCEF3(VAL,$G(IBX0),$G(IBXDA))  ;format Dx value
         D SETGBL^IBCEFG(IBPG,IBXLN,IBXCOL,VAL,.IBXSIZE) ;store in output global
         Q  ;PGDX
         ;
DXSV(IB,IBXSAVE) --
          ; output formatter subroutine
         ; save off DX codes in IBXSAVE("DX")
         N Z,IBCT
         S (Z,IBCT)=0
         F  S Z=$O(IB(Z)) Q:'Z  I $G(IB(Z)) S IBCT=IBCT+1 M IBXSAVE("DX",IBCT)=IB(Z)
         Q
         ;
AUTRF(IBXIEN,IBL,Z) --
          ; returns auth # and referral# if room for both, separated by a space - IB*2.0*432
         ; IBXIEN=  claim ien
         ; IBL   =  field length-1 to allow for 1 blank space between numbers (28 for CMS 1500, 30 for UB-04)
         ; Z     =  1 for PRIMARY, 2 for SECONDARY, 3 for TERTIARY
         ; 
         N IBXDATA,IBZ
         Q:$G(IBXIEN)="" ""
         ; if CMS 1500, find current codes
         I $G(Z)="",$G(IBL)=28 S Z=$$COBN^IBCEF(IBXIEN)
         Q:$G(Z)="" ""
         ; if length not defined, default to shortest
         S:IBL="" IBL=28
         D F^IBCEF("N-"_$P("PRIMARY^SECONDARY^TERTIARY",U,Z)_" AUTH CODE",,,IBXIEN)
         D F^IBCEF("N-"_$P("PRIMARY^SECONDARY^TERTIARY",U,Z)_" REFERRAL NUMBER","IBZ",,IBXIEN)
         ; if length of auth and referral combined is too long, only return auth code
         Q $S(IBZ="":IBXDATA,IBXDATA="":IBZ,$L(IBXDATA)+$L(IBZ)>IBL:IBXDATA,1:IBXDATA_" "_IBZ)
         ;
GRPNAME(IBIEN,IBXDATA) --
          ; Populate IBXDATA with the Group Name(s).
         ; MRD;IB*2.0*516 - Created this procedure as extract code for
         ; ^IBA(364.5,199), N-ALL INSURANCE GROUP NAME.
         N A,Z
         F Z=1:1:3 I $D(^DGCR(399,IBIEN,"I"_Z)) D
         . S IBXDATA(Z)=$$POLICY^IBCEF(IBIEN,15,Z) I IBXDATA(Z)'="" Q
         . S A=$$POLICY^IBCEF(IBIEN,1,Z)           ; Pull piece 1, Ins. Type.
         . I A'="" S IBXDATA(Z)=$P($G(^DIC(36,+A,0)),U)
         . Q
         Q
         ;
GRPNUM(IBXIEN,IBXDATA) --
          ; Populate IBXDATA with the Group Number(s).
         ; MRD;IB*2.0*516 - Created this procedure as extract code for
         ; ^IBA(364.5,200), N-ALL INSURANCE GROUP NUMBER.
         N Z
         F Z=1:1:3 I $D(^DGCR(399,IBXIEN,"I"_Z)) S IBXDATA(Z)=$$POLICY^IBCEF(IBXIEN,3,Z)
         Q
         ;
CMNDATA(IBXIEN,IBPROC,FLD,INT) --
          ;JRA;IB*2.0*608 Return data for specified Certificate of Medical Necessity (CMN) field.
         ;Created to return data for a specific CMN field, which is a subfield of file 399, field 304 (Procedure).  Returns data
         ; in External format by default.
         ;
         ;Input:  IBXIEN = Internal bill/claim number
         ;        IBPROC = Procedure # (subscript in ^DGCR)
         ;        FLD    = Field number of desired field
         ;        INT    = Flag set to 'I' if the subfield's Internal value is to be returned (optional)
         ;
         ;Output: VAL    = External (or optionally Internal) value of the CMN subfield specified by FLD
         ;
         Q:('$G(IBXIEN)!('$G(FLD)!('$G(IBPROC)))) ""
         S INT=$G(INT)
         N ND,VAL,X
         S ND=IBPROC_","_IBXIEN
         S VAL=$$GET1^DIQ(399.0304,ND,FLD,INT)
         Q VAL
         ;
CMNDEX(IBXIEN,IBXSAVE) --
          ;JRA;IB*2.0*608 Data Extract for LQ, CMN and MEA segments
         Q:'$G(IBXIEN)
         ;
         N CMNREQ,ND,X,IBXDATA
         ;Get Procedure Links for all Procedures on the claim.
         D OUTPT^IBCEF11(IBXIEN,0) Q:'$D(IBXDATA)
         N LP,Z,CNT
         S LP=0 F  S LP=$O(IBXDATA(LP)) Q:'+LP  D
         . S CNT=$G(CNT)+1
         . Q:'$D(IBXDATA(LP,"CPLNK"))
         . S ND=IBXDATA(LP,"CPLNK")
         . S ND=ND_","_IBXIEN_","
         . S CMNREQ=$$GET1^DIQ(399.0304,ND,23,"I")
         . S:CMNREQ="" CMNREQ=0
         . Q:'+CMNREQ
         . S Z=$G(Z)+1
         . S IBXSAVE("CMNDEX",Z)=IBXDATA(LP,"CPLNK")_U_CNT
         Q
         ;
FRM(IBXIEN,IBXSAVE) --
          ;JRA;IB*2.0*608 Data Extract for FRM segment
         Q:'$G(IBXIEN)
         ;
         N CMNREQ,CNT,DEL,IBXDATA,LP,ND,PAIRQ,QUIT,RESPTYP,X,Z,Z1
         ;Get Procedure Data for all Procedures on the claim.
         D OUTPT^IBCEF11(IBXIEN,0) Q:'$D(IBXDATA)
         S LP=0 F  S LP=$O(IBXDATA(LP)) Q:'+LP  D
         . Q:'$D(IBXDATA(LP,"CPLNK"))
         . S CNT=$G(CNT)+1
         . S ND=IBXDATA(LP,"CPLNK")
         . S ND=ND_","_IBXIEN_","
         . S CMNREQ=$$GET1^DIQ(399.0304,ND,23,"I")
         . S:CMNREQ="" CMNREQ=0
         . Q:'+CMNREQ
         . S Z=$G(Z)+1
         . ;WHAT FORM
         . N DATA,FORM,FLD,FLDS,INTEXT,QUES,QUESNUM,X
         . S FORM=$TR($$GET1^DIQ(399.0304,ND,"24:3","I"),"-")  ; get the form number to figure what fields go with it
         . Q:FORM=""  ; quit if no form number
         . ;
         . S FLDS=$P($T(@FORM),";;",2,9999)   ; get all the associated data fields from below
         . ;
         . N PAIREDQA
         . ;Parse FLDS to get DD field, question number, type of response (2=Y/N, 3=text/code, 4=date, 5=percent/decimal), and the r
          esponse data.
         . F X=1:1 S QUES=$P(FLDS,"~",X)  Q:QUES=""  D
         .. S FLD=$P(QUES,U)
         .. S QUESNUM=$P(QUES,U,2)
         .. S RESPTYP=$P(QUES,U,3)
         .. I RESPTYP=4 S INTEXT="I"
         .. E  S INTEXT=$P(QUES,U,4) S:INTEXT="" INTEXT="E"
         .. S DATA=$$GET1^DIQ(399.0304,ND,FLD,INTEXT)
         .. ;
         .. ; KLUDGE; On form CMN10126 If 4A or 3A is blank, don't send the other (which means get rid of the previous Q/A)
         .. ; same for 4B/3B
         .. I FORM="CMN10126",".3A.3B.4A.4B."[QUESNUM S PAIRQ=0 D  Q:PAIRQ
         ... I QUESNUM="3A"!(QUESNUM="3B") S PAIREDQA(QUESNUM)=DATA Q
         ... I QUESNUM="4A",$G(PAIREDQA("3A"))="" S PAIRQ=1 Q
         ... I QUESNUM="4B",$G(PAIREDQA("3B"))="" S PAIRQ=1 Q
         ..;
         .. Q:DATA=""  ;Do not include FRM rec for unanswered questions
         .. ;
         .. S:RESPTYP=2 DATA=$E(DATA)  ; only want Y or N
         .. I QUESNUM=4,"YN"'[DATA S DATA="W"
         .. S:RESPTYP=4 DATA=$$DT^IBCEFG1(DATA,"","D8")  ;YYYYMMDD date format
         .. ;Procedure# has a 1 to many ratio with Question# but can't have 2 subscripts so combine into 1, ordering IBXSAVE by Ques
          tion#.
         .. S IBXSAVE("FRM",(Z_"_"_(X/10)))=QUESNUM_U
         .. S $P(IBXSAVE("FRM",(Z_"_"_(X/10))),U,RESPTYP)=DATA
         .. S $P(IBXSAVE("FRM",(Z_"_"_(X/10))),U,6)=CNT
         ;
         ;Re-subscript IBXSAVE with sequential integers as current subscript format will not work with Output Formatter.
         S (Z,Z1)=0 F  S Z=$O(IBXSAVE("FRM",Z)) Q:'Z  S Z1=Z1+1,IBXSAVE("FRM",Z1)=IBXSAVE("FRM",Z),DEL(Z)=""
         S Z=0 F  S Z=$O(DEL(Z)) Q:'Z  K IBXSAVE("FRM",Z)
         Q
         ;
PTWT(IBXIEN) --
          ;JRA;IB*2.0*608 Return CMN Patient Weight from 1st Service Line # that has it (or NULL if none)
         Q:'$G(IBXIEN)
         N FOUND,IBPROC,IBXSAVE,PTWT
         D CMNDEX(IBXIEN,.IBXSAVE)
         S (FOUND,Z)=0,PTWT="" F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:Z=""  D  Q:FOUND
         . S IBPROC=+IBXSAVE("CMNDEX",Z) Q:'IBPROC 
         . S PTWT=$$CMNDATA(IBXIEN,IBPROC,24.03) S:PTWT FOUND=1
         Q PTWT
         ;
         ;JRA;IB*2.0*608 Tags CMN484 & CMN10126 added
         ; FIELD#^QUESTION#^RESPONSE_TYPE^INT/EXT
CMN484   ;;24.1^1A^3~24.102^1B^5~24.103^1C^4~24.107^2^3^I~24.108^3^3^I~24.109^4^2^I~24.11^5^3~24.111^6A^3~24.113^6B^5~24.114^6C^4~24
          .104^7^2~24.105^8^2~24.106^9^2~24.115^C^3
         ;
CMN10126 ;;24.201^1^2~24.202^2^2~24.204^3A^3~24.219^3B^3~24.203^4A^3~24.218^4B^3~24.205^5^3^I~24.206^6^3~24.207^7^2~24.208^8A^3~24.2
          09^8B^5~24.21^8C^3~24.211^8D^3~24.212^8E^5~24.213^8F^3~24.215^8G^3~24.216^8H^5~24.214^9^3^I
         ;

*****   INDEX OF IBCEF31   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   A            GRPNAME+3~,GRPNAME+6*,GRPNAME+7
   CMNREQ       CMNDEX+3~,CMNDEX+12*,CMNDEX+13*,CMNDEX+14,FRM+3~,FRM+11*,FRM+12*,FRM+13
   CNT          CMNDEX+6~,CMNDEX+8*,CMNDEX+16,FRM+3~,FRM+8*,FRM+47
   DATA         FRM+16~,FRM+30*,FRM+35,FRM+39,FRM+41*,FRM+42*,FRM+43*,FRM+46
   DEL          FRM+3~
   DEL(         FRM+50*,FRM+51
   DXCNT        PGDX~,PGDX+21,PGDX+22
   FLD          CMNDATA~,CMNDATA+11,CMNDATA+15,FRM+16~,FRM+25*,FRM+30
   FLDS         FRM+16~,FRM+20*,FRM+24
   FORM         FRM+16~,FRM+17*,FRM+18,FRM+34
   FOUND        PTWT+2~,PTWT+4*,PTWT+6*
   FT           POLTYP+16~*,POLTYP+17,POLTYP+18
   IB           DXSV~
   IB(          DXSV+4
   IBA          INSTYP+5~,INSTYP+11*,INSTYP+12*,INSTYP+13*,INSTYP+15
   IBCT         DXSV+2~,DXSV+3*,DXSV+4*
   IBIEN        GRPNAME~,GRPNAME+4,GRPNAME+5,GRPNAME+6
   IBIFN        ALLTYP~,ALLTYP+3,INSTYP~,INSTYP+7,INSTYP+8,POLTYP~,POLTYP+8,POLTYP+9,POLTYP+16,POLTYP+17,POLTYP+18,ALLPTYP~
                ALLPTYP+3
   IBL          AUTRF~,AUTRF+8,AUTRF+11*,AUTRF+15
   IBPG         PGDX+19~,PGDX+20*,PGDX+24
   IBPLAN       POLTYP+6~,POLTYP+9*,POLTYP+10,POLTYP+22
   IBPLTYP      POLTYP+6~,POLTYP+10*,POLTYP+17*,POLTYP+18*,POLTYP+20*,POLTYP+21,POLTYP+22*,POLTYP+23*,POLTYP+24
   IBPROC       CMNDATA~,CMNDATA+11,CMNDATA+14,PTWT+2~,PTWT+5*,PTWT+6
   IBSEQ        POLTYP~,POLTYP+8*,POLTYP+9,POLTYP+17,POLTYP+18
   IBX          ALLTYP+2~,ALLTYP+3*,ALLTYP+5,ALLPTYP+2~*,ALLPTYP+3*,ALLPTYP+5
   IBX0         PGDX~,PGDX+23
   IBXCOL       PGDX~,PGDX+24
   IBXDA        PGDX~,PGDX+23
   IBXDATA      AUTRF+5~,AUTRF+15,GRPNAME~,GRPNUM~,CMNDEX+3~,CMNDEX+5,FRM+3~,FRM+5
   IBXDATA(     GRPNAME+5*,GRPNAME+7*,GRPNUM+4*,CMNDEX+7,CMNDEX+9,CMNDEX+10,CMNDEX+16,FRM+6,FRM+7,FRM+9
   IBXIEN       AUTRF~,AUTRF+6,AUTRF+8,AUTRF+12,AUTRF+13,GRPNUM~,GRPNUM+4,CMNDATA~,CMNDATA+11,CMNDATA+14,CMNDEX~,CMNDEX+1,CMNDEX+5
                CMNDEX+11,FRM~,FRM+1,FRM+5,FRM+10,PTWT~,PTWT+1,PTWT+3,PTWT+6
   IBXLN        PGDX~,PGDX+24
   IBXSAVE      PGDX~,DXSV~,CMNDEX~,FRM~,PTWT+2~,PTWT+3
   IBXSAVE("CMNDEX" 
                CMNDEX+16*,PTWT+4,PTWT+5
   IBXSAVE("DX" PGDX+21,PGDX+22,DXSV+4*
   IBXSAVE("FRM" 
                FRM+45*,FRM+46*,FRM+47*,FRM+50*,FRM+51!
   IBXSIZE      PGDX~,PGDX+24
   IBZ          AUTRF+5~,AUTRF+15
   INT          CMNDATA~,CMNDATA+12*,CMNDATA+15
   INTEXT       FRM+16~,FRM+28*,FRM+29*,FRM+30
   LP           CMNDEX+6~,CMNDEX+7*,CMNDEX+9,CMNDEX+10,CMNDEX+16,FRM+3~,FRM+6*,FRM+7,FRM+9
   ND           CMNDATA+13~,CMNDATA+14*,CMNDATA+15,CMNDEX+3~,CMNDEX+10*,CMNDEX+11*,CMNDEX+12,FRM+3~,FRM+9*,FRM+10*,FRM+11,FRM+17
                FRM+30
   PAIREDQA     FRM+22~
   PAIREDQA(    FRM+35*
   PAIREDQA("3A" 
                FRM+36
   PAIREDQA("3B" 
                FRM+37
   PAIRQ        FRM+3~,FRM+34*,FRM+36*,FRM+37*
   PTWT         PTWT+2~,PTWT+4*,PTWT+6*,PTWT+7
   QUES         FRM+16~,FRM+24*,FRM+25,FRM+26,FRM+27,FRM+29
   QUESNUM      FRM+16~,FRM+26*,FRM+34,FRM+35,FRM+36,FRM+37,FRM+42,FRM+45
   QUIT         FRM+3~
   RESPTYP      FRM+3~,FRM+27*,FRM+28,FRM+41,FRM+43,FRM+46
   SEQ          INSTYP~,INSTYP+7*,INSTYP+8
   U            ALLTYP+3,INSTYP+11,POLTYP+9,POLTYP+10,POLTYP+22,ALLPTYP+3,PGDX+22,AUTRF+12,AUTRF+13,GRPNAME+7,CMNDEX+16,FRM+25
                FRM+26,FRM+27,FRM+29,FRM+45,FRM+46,FRM+47
   VAL          PGDX+19~,PGDX+22*,PGDX+23*,PGDX+24,CMNDATA+13~,CMNDATA+15*,CMNDATA+16
   X            CMNDATA+13~,CMNDEX+3~,FRM+3~,FRM+16~,FRM+24*,FRM+45,FRM+46,FRM+47
   Z            ALLTYP+2~,ALLTYP+3*,INSTYP+5~,INSTYP+8*,INSTYP+10,INSTYP+11,INSTYP+12,ALLPTYP+2~,ALLPTYP+3*,DXSV+2~,DXSV+3*,DXSV+4*
                AUTRF~,AUTRF+8*,AUTRF+9,AUTRF+12,AUTRF+13,GRPNAME+3~,GRPNAME+4*,GRPNAME+5,GRPNAME+6,GRPNAME+7,GRPNUM+3~,GRPNUM+4*
                CMNDEX+6~
                CMNDEX+15*,CMNDEX+16,FRM+3~,FRM+14*,FRM+45,FRM+46,FRM+47,FRM+50*,FRM+51*,PTWT+4*,PTWT+5
   Z1           FRM+3~,FRM+50*

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399           INSTYP+8,POLTYP+9,ALLPTYP+3,GRPNAME+4,GRPNUM+4
   ^DIC(36             INSTYP+11,GRPNAME+7
   ^IBA(355.3          POLTYP+9

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   $T(@FORM     FRM+20

Label References
   $$CMNDATA    PTWT+6
   $$INSTYP     ALLTYP+3
   $$POLTYP     ALLPTYP+3
   CMNDEX       PTWT+3

External References
   $$GET1^DIQ          CMNDATA+15,CMNDEX+12,FRM+11,FRM+17,FRM+30
   $$ICD9^IBACSV       PGDX+22
   $$COBN^IBCEF        INSTYP+7,POLTYP+8,AUTRF+8
   $$FT^IBCEF          POLTYP+16
   $$POLICY^IBCEF      GRPNAME+5,GRPNAME+6,GRPNUM+4
   F^IBCEF             AUTRF+12,AUTRF+13
   OUTPT^IBCEF11       CMNDEX+5,FRM+5
   $$FORMAT^IBCEF3     PGDX+23
   SETGBL^IBCEFG       PGDX+24
   $$DT^IBCEFG1        FRM+43
   $$MCRWNR^IBEFUNC    INSTYP+12
   $$WNRBILL^IBEFUNC   POLTYP+17,POLTYP+18

*****   END   *****


IBCEFG7  * *  184 Lines,  8693 Bytes, Checksum: B54668730                                             Mar 20, 2019@15:10:13 page 11
              2196 bytes in comments
IBCEFG7  ;ALB/TMP - OUTPUT FORMATTER GENERIC FORM PROCESSING ;06-MAR-96
         ;;2.0;INTEGRATED BILLING;**52,84,96,51,137,191,320,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
         Q
         ;
         ;/IB*2*608 (vd) - US2486 added the parameter IBRSBTST to indicate a claim is a "TEST"
         ; that is being RESUBMITTED and assists with the COB Output Formatter data.
FORM(IBFORM,IBQUE,IBNOASK,IBQDT,ZTSK,IBABORT,IBRSBTST) --
          ;For ien IBFORM, extract data using
         ;    output generater
         ; IBQUE = the output queue for transmitted forms or the printer queue
         ;          for printed output
         ; IBNOASK = flag that says user interaction for queuing is not needed
         ;           0 or null = ask, 1 = don't ask
         ; IBQDT = the date/time to queue the job (optional)
         ;
         ; Sets ZTSK only if job is queued
         ;
         ; IBABORT = output parameter which says user aborted forms output.
         ;           Pass by reference.  The $$QUEUE function returned false.
         ;
         ; IBRSBTST = 1, this indicates the claim is being resubmitted as a "TEST" claim and should be
         ;                             used by the OUTPUT FORMATTER entries to determine what COB information is
         ;                             going out.  - IB*2.0*608 (vd)  US2486
         ;
         N IBF2,IBTYP,POP,ZTIO,ZTRTN,ZTDESC,ZTSAVE,ZTREQ,ZTDTH,ZTREQ
         S IBTYP=$P($G(^IBE(353,IBFORM,2)),U,2),IBQUE=$G(IBQUE),IBABORT=0
         G:$S(IBTYP'="S":$G(^IBE(353,IBFORM,"EXT"))=""&($G(^IBE(353,+$P($G(^IBE(353,IBFORM,2)),U,5),"EXT"))=""),1:'$G(IBIFN)) FORMQ
         I IBTYP="P",IBQUE="" D DEV(IBFORM) G:$G(POP) FORMQ
         I IBTYP="T" D:$G(IBNOASK)  Q:$G(IBNOASK)  I '$$QUEUE(IBFORM) S:$O(^TMP("IBRESUBMIT",$J,0)) ^TMP("IBRESUBMIT",$J)="ABORT" S 
          IBABORT=1 Q
         . S ZTRTN="FORMOUT^IBCEFG7",ZTIO="",ZTDESC="OUTPUT FORMATTER - FORM: "_$P($G(^IBE(353,IBFORM,0)),U),ZTSAVE("IB*")="",ZTDTH=
          $S($G(IBQDT):IBQDT,1:$$NOW^XLFDT())
         . S:$D(^TMP("IBRESUBMIT",$J)) ZTSAVE("^TMP(""IBRESUBMIT"",$J)")="",ZTSAVE("^TMP(""IBNOT"",$J)")="",ZTSAVE("^TMP(""IBRESUBMI
          T"",$J,")="",ZTSAVE("^TMP(""IBNOT"",$J,")=""
         . I $D(^TMP("IBSELX",$J)) S ZTSAVE("^TMP(""IBSELX"",$J,")="",ZTSAVE("^TMP(""IBSELX"",$J)")=""
         . S:'$G(DUZ) DUZ=.5
         . D ^%ZTLOAD
         I '$G(ZTSK) D FORMOUT
FORMQ    Q
         ;
FORMOUT  ; Queued job entrypoint - IBFORM needs to be defined
         ; IBQUE needs to be defined if using default transmission output
         N IB2,IBTYP,IBPAR
         K ^TMP("IBXDATA",$J)
         S ZTREQ="@"
         S IB2=$G(^IBE(353,IBFORM,2)),IBPAR=+$P(IB2,U,5),IBTYP=$P(IB2,U,2)
         ;
         ; Execute PRE-PROCESSOR
         I IBTYP'="S" D FPRE(IBFORM,IBPAR,.IBXERR)
         G:$G(IBXERR)'="" FOUTQ
         ;
         ; Extract records - this should include call(s) to $$EXTRACT^IBCEFG()
         I IBTYP'="S" D
         .I $G(^IBE(353,IBFORM,"EXT"))'="" X ^("EXT") ;Form extract
         .I $G(^IBE(353,IBFORM,"EXT"))="",$G(^IBE(353,IBPAR,"EXT"))'="" X ^("EXT") ;Parent form extract
         I IBTYP="S" D  G Q1
         .N PARAM,Z,Z0
         .S PARAM(1)="BILL-SEARCH",Z0=$G(^DGCR(399,IBIFN,0))
         .S Z=$P(Z0,U,21) S:Z="" Z="P" S PARAM(2)=$P($G(^DGCR(399,IBIFN,"I"_($F("PST",Z)-1))),U),PARAM(3)=$S($P(Z0,U,5)<3:"I",1:"O")
         .S Z=$$EXTRACT^IBCEFG(IBFORM,IBIFN,1,.PARAM)
         ;
         G:'$D(^TMP("IBXDATA",$J)) FOUTQ
         ;
         ; If an output routine exists, use it, otherwise use the generic ones
         I $G(^IBE(353,IBFORM,"OUT"))'="" X ^("OUT") G FOUTQ
         I $G(^IBE(353,IBFORM,"OUT"))="",$G(^IBE(353,IBPAR,"OUT"))'="" X ^("OUT") G FOUTQ
         ;
         I IBTYP="P" D PRINT(IBFORM) D:'$D(ZTQUEUED) ^%ZISC G FOUTQ
         I IBTYP="T" D:$G(IBQUE)'="" TRANSMIT(IBFORM,IBQUE) G FOUTQ
         ;
FOUTQ    D FPOST(IBFORM,IBPAR,.IBXERR) ; Execute POST-PROCESSOR, if any
         K ^TMP("IBXDATA",$J),^TMP("IBXEDIT",$J)
Q1       Q
         ;
PRINT(IBFORM) --
          ; Print data from extract global for form IBFORM
         ; Extract records - this should include call(s) to $$EXTRACT^IBCEFG()
         N IB1,IB2,IB3,IBREC
         ;LOOP THROUGH RECORD/PAGE/LINE/COL
         S IBREC="" F  S IBREC=$O(^TMP("IBXDATA",$J,IBREC)) Q:IBREC=""  D  ;Rec
         . ;Page/line
         . F IB1=1:1:+$O(^TMP("IBXDATA",$J,IBREC,""),-1) W:IB1>1 @IOF W ?0 F IB2=1:1:+$O(^TMP("IBXDATA",$J,IBREC,IB1,""),-1) W:IB2>1
           ! S IB3="" D
         .. ; Column
         .. F  S IB3=$O(^TMP("IBXDATA",$J,IBREC,IB1,IB2,IB3)) Q:IB3=""  W ?(IB3-1),^(IB3)
         . ;Only print form feed if more records to print - not on last record
         . I $O(^TMP("IBXDATA",$J,IBREC))'="" W @IOF
         Q
         ;
TRANSMIT(IBFORM,IBQUE) --
          ; Send data from extract global to queue IBQUE
         ;IBFORM = ien of the form to be transmitted (required)
         N IB1,IB2,IB3,IBREC,IBOUT,IBCT,IBSUB,Z,XMDUZ,XMSUBJ,XMBODY,XMTO
         K ^TMP("IBXTXMT",$J),^TMP("IBX",$J)
         Q:$G(IBQUE)=""
         ;
         S IBDELIM=$P($G(^IBE(353,+$S($P($G(^IBE(353,IBFORM,2)),U,5):$P(^(2),U,5),1:IBFORM),2)),U,7)
         S:IBDELIM="" IBDELIM="^"
         ;Loop through record/page/line/column
         S IBREC="",(IBSIZE,IBCT)=0,IBMSG=1
         F  S IBREC=$O(^TMP("IBXDATA",$J,IBREC)) Q:IBREC=""  D
         .S ^TMP("IBX",$J,IBREC)=IBCT
         .S IB1="" F  S IB1=$O(^TMP("IBXDATA",$J,IBREC,IB1)) Q:IB1=""  D
         ..S (IB2,IBOUT)=""
         ..F  S IB2=$O(^TMP("IBXDATA",$J,IBREC,IB1,IB2)) D:IB2=""&$L(IBOUT) MSG(IBREC,IBOUT,.IBMSG,.IBSIZE,.IBCT) Q:IB2=""  D
         ...S IB3="" F  S IB3=$O(^TMP("IBXDATA",$J,IBREC,IB1,IB2,IB3)) Q:IB3=""  S IBP=^(IB3) S:IBP?.E1L.E IBP=$$UP^XLFSTR(IBP) S $P
          (IBOUT,IBDELIM,IB3)=IBP
         ;
         ;Send mail message(s) for extract
         S XMDUZ=DUZ,XMTO(IBQUE)="",IBSUB="OUTPUT FORMATTER: "_$P($G(^IBE(353,IBFORM,0)),U)
         S Z="" F  S Z=$O(^TMP("IBXTXMT",$J,Z)) Q:'Z  S XMBODY="^TMP(""IBXTXMT"","_$J_","_Z_")",XMSUBJ=IBSUB_" ("_Z_")" D SENDMSG^XM
          XAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO,,.XMZ)
         ;
         K ^TMP("IBXTXMT",$J),^TMP("IBX",$J)
         Q
         ;
MSG(IBREC,LINE,MSG,SIZE,CT) --
          ; Set up global for transmission line
         ; IBREC = record number being processed
         ; LINE = actual text to be output in mail message line
         ; MSG  = the message seq # to output this record in (pass by reference)
         ; SIZE = current size of the message (pass by reference)
         ; CT   = the last line # in message for the text (pass by reference)
         N Z,Z0,LLEN
         S LLEN=$L(LINE)
         I (LLEN+SIZE)>30000 D
         .Q:'$G(^TMP("IBX",$J,IBREC))  ;Record itself is > 30000 - let it go
         .S (SIZE,CT)=0,Z=$G(^TMP("IBX",$J,IBREC)),^(IBREC)=0
         .F  S Z=$O(^TMP("IBXTXMT",$J,MSG,Z)) Q:'Z  S CT=CT+1,Z0=^(Z),^TMP("IBXTXMT",$J,MSG+1,CT)=Z0,SIZE=SIZE+$L(Z0) K ^TMP("IBXTXM
          T",$J,MSG,Z)
         .S MSG=MSG+1
         S CT=CT+1,^TMP("IBXTXMT",$J,MSG,CT)=LINE,SIZE=SIZE+LLEN
         Q
         ;
DEV(IBFORM,NOQ) --
          ;
         N IBFTYPE
         S:'$G(NOQ) %ZIS="Q" S %ZIS("A")="Output Device: "
         S %ZIS("B")=$P($G(^IBE(353,IBFORM,0)),"^",2)
         D ^%ZIS
         G:POP DEVQ
         I $D(IO("Q")) D  G DEVQ
         .S ZTRTN="FORMOUT^IBCEFG7",ZTDESC="PRINT FORM: "_$P($G(^IBE(353,IBFORM,0)),U),ZTSAVE("IB*")="" K ZTIO
         .I $D(^TMP("IBQONE",$J)) D
         ..S IBJ="",IBFTYPE="IBCFP"_$S($P($G(^IBE(353,IBFORM,2)),U,5):$P(^(2),U,5),1:IBFORM)
         ..S ZTSAVE("^XTMP(IBFTYPE,$J,")=""
         .D ^%ZTLOAD K IO("Q") D HOME^%ZIS
         .I $G(IBFTYPE)'="" K ^XTMP(IBFTYPE,$J)
         .I $D(ZTSK) W !!,"This job has been queued.  The task number is "_ZTSK_"."
         U IO
DEVQ     Q
         ;
QUEUE(IBFORM) --
          ; Ask to queue transmission
         N Y,DIR,OKAY
         S OKAY=1
         S DIR(0)="Y",DIR("B")="YES",DIR("A")="Do you want to queue this transmission" W !
         D ^DIR K DIR
         I $D(DTOUT)!$D(DUOUT) S OKAY=0 G QUEQ
         I 'Y D  G QUEQ
         .S DIR(0)="Y",DIR("B")="YES",DIR("A")="Do you want to run this job without queuing it now"
         .W ! D ^DIR K DIR
         .I 'Y S OKAY=0
         ; - queue job to run
         W !!,"Please enter the date and time to execute this job...",!
         S ZTRTN="FORMOUT^IBCEFG7",ZTIO="",ZTDESC="OUTPUT FORMATTER - FORM: "_$P($G(^IBE(353,IBFORM,0)),U),ZTSAVE("IB*")=""
         S:$D(^TMP("IBRESUBMIT",$J)) ZTSAVE("^TMP(""IBRESUBMIT"",$J)")="",ZTSAVE("^TMP(""IBNOT"",$J)")="",ZTSAVE("^TMP(""IBRESUBMIT"
          ",$J,")="",ZTSAVE("^TMP(""IBNOT"",$J,")=""
         I $D(^TMP("IBSELX",$J)) S ZTSAVE("^TMP(""IBSELX"",$J,")="",ZTSAVE("^TMP(""IBSELX"",$J)")=""
         D ^%ZTLOAD
         I $G(ZTSK) W !!,"This job has been queued.  The task number is "_ZTSK_"."
QUEQ     Q OKAY
         ;
FPRE(IBFORM,IBPAR,IBXERR) --
          ; Executes pre-processor
         I $G(^IBE(353,IBFORM,"FPRE"))'="" X ^("FPRE") ;Form pre-processor
         I $G(^IBE(353,IBFORM,"FPRE"))="",$G(^IBE(353,IBPAR,"FPRE"))'="" X ^("FPRE") ;Parent form pre-processor
         Q
         ;
FPOST(IBFORM,IBPAR,IBXERR) --
          ; Executes post-processor
         I $G(^IBE(353,IBFORM,"FPOST"))'="" X ^("FPOST") ;Form post-processor
         I $G(^IBE(353,IBFORM,"FPOST"))="",$G(^IBE(353,IBPAR,"FPOST"))'="" X ^("FPOST") ;Parent form post-processor
         Q
         ;
FMFLD(IBDA) --
          ;Return the file#field for fileman field referenced as a data
         ; element in file 364.7's IBDA entry.
         N Z,Z0,ND0
         S Z0=+$P($G(^IBA(364.7,IBDA,0)),U,3),ND0=$G(^IBA(364.5,+Z0,0))
         I $P(ND0,U,3)'="F"!($P(ND0,U,6)="") S Z="" G FLDQ
         S Z=$P(ND0,U,5),Z1=$P(ND0,U,6)
         I Z1[":" D  ;Navigation
         . S Z2=$O(^DD(+Z,"B",$P(Z1,":"),"")) Q:'Z2
         . S Z=+$P($P($G(^DD(399,Z2,0)),U,2),"P",2)
         . I Z S Z1=$P(Z1,":",2)
         I Z S Z=Z_"#"_$O(^DD(+Z,"B",Z1,""))
FLDQ     Q Z
         ;

*****   INDEX OF IBCEFG7   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
>> %ZIS         DEV+2*
>> %ZIS("A"     DEV+2*
>> %ZIS("B"     DEV+3*
   CT           MSG~,MSG+10*,MSG+11*,MSG+13*
   DIR          QUEUE+1~,QUEUE+4!,QUEUE+8!
   DIR("A"      QUEUE+3*,QUEUE+7*
   DIR("B"      QUEUE+3*,QUEUE+7*
   DIR(0        QUEUE+3*,QUEUE+7*
>> DTOUT        QUEUE+5
>> DUOUT        QUEUE+5
   DUZ          FORM+25*,TRANSMIT+18
   IB1          PRINT+2~,PRINT+6*,PRINT+8,TRANSMIT+2~,TRANSMIT+12*,TRANSMIT+14,TRANSMIT+15
   IB2          FORMOUT+2~,FORMOUT+5*,PRINT+2~,PRINT+6*,PRINT+8,TRANSMIT+2~,TRANSMIT+13*,TRANSMIT+14*,TRANSMIT+15
   IB3          PRINT+2~,PRINT+6*,PRINT+8*,TRANSMIT+2~,TRANSMIT+15*
   IBABORT      FORM~,FORM+18*,FORM+21*
   IBCT         TRANSMIT+2~,TRANSMIT+9*,TRANSMIT+11,TRANSMIT+14
   IBDA         FMFLD~,FMFLD+3
>> IBDELIM      TRANSMIT+6*,TRANSMIT+7*,TRANSMIT+15
   IBF2         FORM+17~
   IBFORM       FORM~,FORM+18,FORM+19,FORM+20,FORM+21,FORM+22,FORMOUT+5,FORMOUT+8,FORMOUT+13,FORMOUT+14,FORMOUT+19,FORMOUT+24
                FORMOUT+25,FORMOUT+27,FORMOUT+28,FOUTQ,PRINT~,TRANSMIT~,TRANSMIT+6,TRANSMIT+18,DEV~,DEV+3,DEV+7,DEV+9,QUEUE~
                QUEUE+12,FPRE~
                FPRE+1,FPRE+2,FPOST~,FPOST+1,FPOST+2
   IBFTYPE      DEV+1~,DEV+9*,DEV+12
>> IBIFN        FORM+19,FORMOUT+17,FORMOUT+18,FORMOUT+19
>> IBJ          DEV+9*
>> IBMSG        TRANSMIT+9*,TRANSMIT+14
   IBNOASK      FORM~,FORM+21
   IBOUT        TRANSMIT+2~,TRANSMIT+13*,TRANSMIT+14,TRANSMIT+15*
>> IBP          TRANSMIT+15*
   IBPAR        FORMOUT+2~,FORMOUT+5*,FORMOUT+8,FORMOUT+14,FORMOUT+25,FOUTQ,FPRE~,FPRE+2,FPOST~,FPOST+2
   IBQDT        FORM~,FORM+22
   IBQUE        FORM~,FORM+18*,FORM+20,FORMOUT+28,TRANSMIT~,TRANSMIT+4,TRANSMIT+18
   IBREC        PRINT+2~,PRINT+4*,PRINT+6,PRINT+8,PRINT+10,TRANSMIT+2~,TRANSMIT+9*,TRANSMIT+10*,TRANSMIT+11,TRANSMIT+12,TRANSMIT+14
                TRANSMIT+15,MSG~,MSG+9,MSG+10
   IBRSBTST     FORM~
>> IBSIZE       TRANSMIT+9*,TRANSMIT+14
   IBSUB        TRANSMIT+2~,TRANSMIT+18*,TRANSMIT+19
   IBTYP        FORM+17~,FORM+18*,FORM+19,FORM+20,FORM+21,FORMOUT+2~,FORMOUT+5*,FORMOUT+8,FORMOUT+12,FORMOUT+15,FORMOUT+27
                FORMOUT+28
   IBXERR       FORMOUT+8,FORMOUT+9,FOUTQ,FPRE~,FPOST~
   IO           DEV+14
   IO("Q"       DEV+6,DEV+11!
   IOF          PRINT+6,PRINT+10
   LINE         MSG~,MSG+7,MSG+13
   LLEN         MSG+6~,MSG+7*,MSG+8,MSG+13
   MSG          MSG~,MSG+11,MSG+12*,MSG+13
   ND0          FMFLD+2~,FMFLD+3*,FMFLD+4,FMFLD+5
   NOQ          DEV~,DEV+2
   OKAY         QUEUE+1~,QUEUE+2*,QUEUE+5*,QUEUE+9*,QUEQ
   PARAM        FORMOUT+16~,FORMOUT+19
   PARAM(1      FORMOUT+17*
   PARAM(2      FORMOUT+18*
   PARAM(3      FORMOUT+18*
   POP          FORM+17~,FORM+20,DEV+5
   SIZE         MSG~,MSG+8,MSG+10*,MSG+11*,MSG+13*
   U            FORM+18,FORM+19,FORM+22,FORMOUT+5,FORMOUT+18,TRANSMIT+6,TRANSMIT+18,DEV+7,DEV+9,QUEUE+12,FMFLD+3,FMFLD+4,FMFLD+5
                FMFLD+8
   XMBODY       TRANSMIT+2~,TRANSMIT+19*
   XMDUZ        TRANSMIT+2~,TRANSMIT+18*,TRANSMIT+19
   XMSUBJ       TRANSMIT+2~,TRANSMIT+19*
   XMTO         TRANSMIT+2~,TRANSMIT+19
   XMTO(        TRANSMIT+18*
>> XMZ          TRANSMIT+19
   Y            QUEUE+1~,QUEUE+6,QUEUE+9
   Z            FORMOUT+16~,FORMOUT+18*,FORMOUT+19*,TRANSMIT+2~,TRANSMIT+19*,MSG+6~,MSG+10*,MSG+11*,FMFLD+2~,FMFLD+4*,FMFLD+5*
                FMFLD+7,FMFLD+8*,FMFLD+9,FMFLD+10*,FLDQ
   Z0           FORMOUT+16~,FORMOUT+17*,FORMOUT+18,MSG+6~,MSG+11*,FMFLD+2~,FMFLD+3*
>> Z1           FMFLD+5*,FMFLD+6,FMFLD+7,FMFLD+9*,FMFLD+10
>> Z2           FMFLD+7*,FMFLD+8
   ZTDESC       FORM+17~,FORM+22*,DEV+7*,QUEUE+12*
   ZTDTH        FORM+17~,FORM+22*
   ZTIO         FORM+17~,FORM+22*,DEV+7!,QUEUE+12*
>> ZTQUEUED     FORMOUT+27
   ZTREQ        FORM+17~,FORMOUT+4*
   ZTRTN        FORM+17~,FORM+22*,DEV+7*,QUEUE+12*
   ZTSAVE       FORM+17~
   ZTSAVE("IB*" FORM+22*,DEV+7*,QUEUE+12*
   ZTSAVE("^TMP(""IBNOT"",$J)" 
                FORM+23*,QUEUE+13*
   ZTSAVE("^TMP(""IBNOT"",$J," 
                FORM+23*,QUEUE+13*
   ZTSAVE("^TMP(""IBRESUBMIT"",$J)" 
                FORM+23*,QUEUE+13*
   ZTSAVE("^TMP(""IBRESUBMIT"",$J," 
                FORM+23*,QUEUE+13*
   ZTSAVE("^TMP(""IBSELX"",$J)" 
                FORM+24*,QUEUE+14*
   ZTSAVE("^TMP(""IBSELX"",$J," 
                FORM+24*,QUEUE+14*
   ZTSAVE("^XTMP(IBFTYPE,$J," 
                DEV+10*
   ZTSK         FORM~,FORM+27,DEV+13,QUEUE+16

Global Variables  ( * Changed  ! Killed)
   ^DD(                FMFLD+7,FMFLD+10
   ^DD(399             FMFLD+8
   ^DGCR(399           FORMOUT+17,FORMOUT+18
   ^IBA(364.5          FMFLD+3
   ^IBA(364.7          FMFLD+3
   ^IBE(353            FORM+18,FORM+19,FORM+22,FORMOUT+5,FORMOUT+13,FORMOUT+14,FORMOUT+24,FORMOUT+25,TRANSMIT+6,TRANSMIT+18,DEV+3
                       DEV+7,DEV+9,QUEUE+12,FPRE+1,FPRE+2,FPOST+1,FPOST+2
   ^TMP("IBQONE"       DEV+8
   ^TMP("IBRESUBMIT"   FORM+21*,FORM+23,QUEUE+13
   ^TMP("IBSELX"       FORM+24,QUEUE+14
   ^TMP("IBX"          TRANSMIT+3!,TRANSMIT+11*,TRANSMIT+21!,MSG+9,MSG+10
   ^TMP("IBXDATA"      FORMOUT+3!,FORMOUT+21,FOUTQ+1!,PRINT+4,PRINT+6,PRINT+8,PRINT+10,TRANSMIT+10,TRANSMIT+12,TRANSMIT+14
                       TRANSMIT+15
   ^TMP("IBXEDIT"      FOUTQ+1!
   ^TMP("IBXTXMT"      TRANSMIT+3!,TRANSMIT+19,TRANSMIT+21!,MSG+11*!,MSG+13*
   ^XTMP(              DEV+12!

Naked Globals
   ^(           PRINT+8,TRANSMIT+15,MSG+10*,MSG+11
   ^("EXT"      FORMOUT+13,FORMOUT+14
   ^("FPOST"    FPOST+1,FPOST+2
   ^("FPRE"     FPRE+1,FPRE+2
   ^("OUT"      FORMOUT+24,FORMOUT+25
   ^(2          TRANSMIT+6,DEV+9

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$QUEUE      FORM+21
   DEV          FORM+20
   DEVQ         DEV+5,DEV+6
   FLDQ         FMFLD+4
   FORMOUT      FORM+27
   FORMQ        FORM+19,FORM+20
   FOUTQ        FORMOUT+9,FORMOUT+21,FORMOUT+24,FORMOUT+25,FORMOUT+27,FORMOUT+28
   FPOST        FOUTQ
   FPRE         FORMOUT+8
   MSG          TRANSMIT+14
   PRINT        FORMOUT+27
   Q1           FORMOUT+15
   QUEQ         QUEUE+5,QUEUE+6
   TRANSMIT     FORMOUT+28

External References
   ^%ZIS               DEV+4
   HOME^%ZIS           DEV+11
   ^%ZISC              FORMOUT+27
   ^%ZTLOAD            FORM+26,DEV+11,QUEUE+15
   ^DIR                QUEUE+4,QUEUE+8
   $$EXTRACT^IBCEFG    FORMOUT+19
   $$NOW^XLFDT         FORM+22
   $$UP^XLFSTR         TRANSMIT+15
   SENDMSG^XMXAPI      TRANSMIT+19

*****   END   *****


IBCEPTC2 * *  201 Lines,  7680 Bytes, Checksum: B56837195                                             Mar 20, 2019@15:10:13 page 12
              1121 bytes in comments
IBCEPTC2 ;ALB/TMK - EDI PREVIOUSLY TRANSMITTED CLAIMS LIST MGR ;01/20/05
         ;;2.0;INTEGRATED BILLING;**296,320,348,349,547,592,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ; IA 3337 for file 430.3
         ; IB*2.0*547 Variable IBLOC is pre-defined (in IBCEPTC)
         ;
HDR      ;
         K VALMHDR
         ; The following line was replaced by the subsequent couple of lines of code  -  (vd) IB*2*608 - US1908
         ;/IB*2*608 beginning
         ; I IBLOC S VALMHDR(1)="Claims Selected: "_+$G(^TMP("IB_PREV_CLAIM_SELECT",$J))_" (marked with *)" Q
         I IBLOC D  Q
         . S VALMHDR(1)="** T = Test Claim"
         . S VALMHDR(2)="Claims Selected: "_+$G(^TMP("IB_PREV_CLAIM_SELECT",$J))_" (marked with *)"
         . Q
         ;/IB*2*608 ending
         ;
         S VALMHDR(1)="** A claim may appear multiple times if transmitted more than once. **"
         ;
         I $G(IBSORT)=1 D
         . S VALMHDR(2)="Claims Selected: "_+$G(^TMP("IB_PREV_CLAIM_SELECT",$J))_" (marked with *)"
         . Q
         ;
         I $G(IBSORT)=2 D
         . S VALMHDR(2)="** T = Test Claim   ** R = Batch Rejected"
         . S VALMHDR(3)="Claims Selected: "_+$G(^TMP("IB_PREV_CLAIM_SELECT",$J))_" (marked with *)"
         . Q
         ;
         Q
         ;
INIT     ;
         S VALMCNT=0,VALMBG=1
         D BLD
         Q
         ;
BLD      ; Build display lines
         N IBDA,IBS1,IBS2,IBIFN,IB0,IBX,IBCNT,IBLEV1,IBBDA
         K ^TMP("IB_PREV_CLAIM_LIST",$J),^TMP("IB_PREV_CLAIM_SELECT",$J),^TMP("IB_PREV_CLAIM_BATCH",$J)
         S IBCNT=0
         I $O(^TMP("IB_PREV_CLAIM",$J,""))="" D  G BLDQ
         . S IBX=" ** NO PREVIOUSLY "_$S(IBLOC:"PRINTED",1:"TRANSMITTED")_" CLAIMS EXIST FOR SEARCH CRITERIA SELECTED **"
         . D WRT(IBX,"",0,0,"","S","",.IBCNT,0)
         ;
         S IBS1="" F  S IBS1=$O(^TMP("IB_PREV_CLAIM",$J,IBS1)) Q:IBS1=""  D
         . ; First level sort
         . ; for sort by batch, display batch ID and transmit date
         . I IBSORT=1 D
         .. S IBLEV1="  Batch: "_$P(IBS1,U,2)_"  Last Transmitted: "_$G(^TMP("IB_PREV_CLAIM",$J,IBS1))
         .. S IBBDA=+$O(^IBA(364.1,"B",$P(IBS1,U,2),0))
         .. I $P(IBS1,U,3) S IBLEV1=IBLEV1_" ** Test"
         .. I $P(IBS1,U,4) S IBLEV1=IBLEV1_" ** Rejected"
         .. Q
         . ;
         . ; for sort by payer, display ins co name and payer address
         . I IBSORT=2 D
         .. S IBLEV1="  "_$P(IBS1,U)_"  "_$$CURRINS(+$G(^TMP("IB_PREV_CLAIM",$J,IBS1)),0)
         .. Q
         . ;
         . ; output sort header line
         . D WRT(IBLEV1,"",0,0,IBSORT,"S","",IBCNT,0) ; Add header line
         . ;
         . I IBSORT=1,IBBDA S ^TMP("IB_PREV_CLAIM_BATCH",$J,IBBDA)=VALMCNT
         . S IBS2="" F  S IBS2=$O(^TMP("IB_PREV_CLAIM",$J,IBS1,IBS2)) Q:IBS2=""  S IBDA=0 F  S IBDA=$O(^TMP("IB_PREV_CLAIM",$J,IBS1,
          IBS2,IBDA)) Q:'IBDA  D
         .. N IBX,IBTEST
         .. ;S IBIFN=+$G(^IBA(364,+IBDA,0)),IB0=$G(^DGCR(399,IBIFN,0))
         .. S IBIFN=$S(IBLOC:+IBDA,1:+$G(^IBA(364,+IBDA,0))),IB0=$G(^DGCR(399,IBIFN,0))
         .. S IBX=$P(^TMP("IB_PREV_CLAIM",$J,IBS1,IBS2,IBDA),U,1)
         .. I IBX=1 S IBTEST=0    ; live 364 transmission
         .. I IBX=2 S IBTEST=1    ; test 364 transmission
         .. I IBX=3 S IBTEST=1    ; test 361.4 transmission
         .. D WRT(IBS1,IBS2,IBDA,IBIFN,IBSORT,"S","",.IBCNT,0,IBTEST)
         .. I IBSORT=1,IBBDA S ^TMP("IB_PREV_CLAIM_BATCH",$J,IBBDA,VALMCNT)=IBIFN_U_IBCNT
         .. Q
         . Q
         ;
BLDQ     Q
         ;
EXIT     ; Clean up code
         ;
         K ^TMP("IB_PREV_CLAIM_LIST",$J)
         K ^TMP("IB_PREV_CLAIM_SELECT",$J)
         K ^TMP("IB_PREV_CLAIM_LIST_DX",$J)
         K ^TMP("IB_PREV_CLAIM_BATCH",$J)
         D CLEAR^VALM1
         Q
         ;
WRT(IBS1,IBS2,IBDA,IBIFN,IBSORT,IBREP,IBHDR,IBPAGE,IBSTOP,IBTEST) --
          ; Wrt/output
         ;
         N IBX,IB0,Z,IBCNT,ARSTAT
         S IBCNT=IBPAGE
         ;
         I 'IBIFN D  G WRTQ
         . ;
         . ; for report output
         . I IBREP="R" D  Q
         .. S Z="",$P(Z,"=",133)=""
         .. D SET(Z,1,IBDA,IBREP,IBHDR,1,0,.IBPAGE,.IBSTOP)
         .. D SET(IBS1,2,IBDA,IBREP,IBHDR,1,0,.IBPAGE,.IBSTOP)
         .. Q
         . ;
         . ; for ListMan screen output
         . D SET(IBS1,0,IBDA,IBREP,IBHDR,IBCNT+1,.VALMCNT,.IBPAGE,.IBSTOP)
         . Q
         ;
         S IB0=$G(^DGCR(399,IBIFN,0))
         S IBX=$$FO^IBCNEUT1($P(IB0,U,1),8)        ; claim#
         S IBX=IBX_$S(IBSORT=2&$G(IBTEST):"T",1:" ")_" "
         ;JWS;IB*2.0*592 US1108 - Dental EDI 837D / form J430D
         S IBX=IBX_$S($P(IB0,U,19)=2:"1500 ",$P(IB0,U,19)=7:"J430D",1:"UB04 ")_" "
         S Z=$$INPAT^IBCEF(IBIFN) S IBX=IBX_$S(Z:"INPT ",1:"OUTPT")
         S IBX=IBX_$J($P(IB0,U,21),3)_"  "
         S Z=$$EXTERNAL^DILFD(399,.13,"",$P(IB0,U,13))
         S IBX=IBX_$$FO^IBCNEUT1(Z,11)_"  "             ; claim status
         S ARSTAT=+$P($$BILL^RCJIBFN2(IBIFN),U,2)       ; ien
         S ARSTAT=$P($G(^PRCA(430.3,ARSTAT,0)),U,2)     ; abbreviation
         S IBX=IBX_$$FO^IBCNEUT1(ARSTAT,4)              ; a/r status display
         ;
         I IBSORT=1 D                    ; sort by batch
         . N Z,IBZ,IBXDATA
         . ; Print current payer, payer address, other payers, pat name
         . D F^IBCEF("N-CURR INSURANCE COMPANY NAME","IBZ",,IBIFN)
         . S IBX=IBX_$$FO^IBCNEUT1(IBZ,25)_" "                     ; ins co name
         . S IBX=IBX_$$FO^IBCNEUT1($$CURRINS(IBIFN,1),29)_" "      ; address
         . K IBZ D F^IBCEF("N-OTH INSURANCE CO. NAME","IBZ",,IBIFN)
         . S IBX=IBX_$$FO^IBCNEUT1($P($G(IBZ(1)),U,1),15)_" "      ; other payer
         . S Z=$P($G(^DPT(+$P(IB0,U,2),0)),U,1)
         . S IBX=IBX_$E(Z,1,18)                       ; patient name
         . ;
         . ; set line into list
         . S IBCNT=IBCNT+1
         . D SET(.IBX,1,IBDA,IBREP,IBHDR,IBCNT,.VALMCNT,.IBPAGE,.IBSTOP)
         . S IBX=""
         . ;
         . I $G(IBZ(2))'="" D    ; other payer #2 if it exists ;;IB*2.0*592 changed $J("",98) to 99
         .. S IBX=$J("",99)_$E($P(IBZ(2),U,1),1,15)
         .. D SET(.IBX,1,IBDA,IBREP,IBHDR,IBCNT,.VALMCNT,.IBPAGE,.IBSTOP)
         .. Q
         . Q
         ;
         I IBSORT=2 D                    ; sort by payer
         . N Z,IBZ
         . S IBX=IBX_"  "
         . ; Print other payers, patient name, date last trans, batch #, reject flag
         . D F^IBCEF("N-OTH INSURANCE CO. NAME","IBZ",,IBIFN)
         . S IBX=IBX_$$FO^IBCNEUT1($P($G(IBZ(1)),U,1),18)_"  "   ; oth payer#1
         . S Z=$P($G(^DPT(+$P(IB0,U,2),0)),U,1)
         . S IBX=IBX_$$FO^IBCNEUT1(Z,18)_"    "                  ; patient name
         . ;
         . S Z=+$P($G(^IBA(364,+IBDA,0)),U,2) ; Batch ptr
         . S:IBLOC IBX=IBX_$$FO^IBCNEUT1($$FMTE^XLFDT($P($G(^DGCR(399,IBIFN,"S")),U,14),"1"),17)     ; date last printed *547*
         . S:'IBLOC IBX=IBX_$$FO^IBCNEUT1($$FMTE^XLFDT($P($G(^IBA(364.1,+Z,1)),U,3)\1,"1"),17)     ; date last transmitted
         . S:'IBLOC IBX=IBX_$$FO^IBCNEUT1($P($G(^IBA(364.1,Z,0)),U,1),10)   ; batch#
         . S:IBLOC IBX=IBX_"" ; no batch#
         . S IBX=IBX_$S($P($G(^IBA(364.1,Z,0)),U,5):" R",1:"")  ; batch rejected flag
         . ;
         . ; set line into list
         . S IBCNT=IBCNT+1
         . D SET(.IBX,1,IBDA,IBREP,IBHDR,IBCNT,.VALMCNT,.IBPAGE,.IBSTOP)
         . S IBX=""
         . ;
         . I $G(IBZ(2))'="" D       ; other payer#2 if it exists
         .. S IBX=$J("",45)_$E($P(IBZ(2),U),1,18)
         .. D SET(.IBX,1,IBDA,IBREP,IBHDR,IBCNT,.VALMCNT,.IBPAGE,.IBSTOP)
         .. Q
         . Q
         ;
WRTQ     I IBREP="S" S IBPAGE=IBCNT
         Q
         ;
SET(IBX,IBLINE,IBDA,IBREP,IBHDR,IBCNT,VALMCNT,IBPAGE,IBSTOP) --
          ;
         N Q,Z,IBZ
         S IBZ=IBX,IBX=""
         I IBREP="R" D  Q
         . D:($Y+5)>IOSL!'IBPAGE HDR^IBCEPTC1(IBHDR,IBSORT,.IBPAGE,.IBSTOP) D
         . I IBLINE F Z=1:1:IBLINE W !
         . W:'IBSTOP IBZ
         . Q
         ;
         ; only display the counter if we have a line with the claim#
         S VALMCNT=VALMCNT+1
         I IBDA,$TR($E(IBZ,1,8)," ")'="" S IBZ=$$FO^IBCNEUT1($J(IBCNT,3),6)_IBZ
         I IBDA,$TR($E(IBZ,1,8)," ")="" S IBZ="      "_IBZ
         ;
         S ^TMP("IB_PREV_CLAIM_LIST",$J,VALMCNT,0)=IBZ
         S ^TMP("IB_PREV_CLAIM_LIST",$J,"IDX",VALMCNT,IBCNT)=""
         I IBDA,$TR($E(IBZ,1,8)," ")'="" S ^TMP("IB_PREV_CLAIM_LIST_DX",$J,IBCNT)=VALMCNT_U_IBDA
         Q
         ;
CURRINS(IBIFN,TRUNC) --
          ; Returns Current insurance address for given claim
         ; TRUNC = truncate flag; 1 to truncate the address and city
         N IBX,IBZ,L1,CITY,ST
         D F^IBCEF("N-CURR INS CO FULL ADDRESS","IBZ",,IBIFN)
         S L1=$G(IBZ(1)) I +$G(TRUNC) S L1=$E(L1,1,15)
         S CITY=$G(IBZ(4)) I +$G(TRUNC) S CITY=$E(CITY,1,10)
         S ST=$G(IBZ(5))
         I ST S ST=$P($G(^DIC(5,ST,0)),U,2)
         S IBX=L1_" "_CITY
         I CITY'="",ST'="" S IBX=IBX_","_ST
         E  S IBX=IBX_" "_ST
         Q IBX
         ;

*****   INDEX OF IBCEPTC2   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   ARSTAT       WRT+2~,WRT+27*,WRT+28*,WRT+29
   CITY         CURRINS+2~,CURRINS+5*,CURRINS+8,CURRINS+9
   IB0          BLD+1~,BLD+30*,WRT+2~,WRT+18*,WRT+19,WRT+22,WRT+24,WRT+25,WRT+39,WRT+59
   IBBDA        BLD+1~,BLD+13*,BLD+26,BLD+36
   IBCNT        BLD+1~,BLD+3*,BLD+6,BLD+24,BLD+35,BLD+36,WRT+2~,WRT+3*,WRT+15,WRT+43*,WRT+44,WRT+49,WRT+70*,WRT+71,WRT+76,WRTQ,SET~
                SET+11,SET+15,SET+16
   IBDA         BLD+1~,BLD+27*,BLD+30,BLD+31,BLD+35,WRT~,WRT+10,WRT+11,WRT+15,WRT+44,WRT+49,WRT+62,WRT+71,WRT+76,SET~,SET+11,SET+12
                SET+16
   IBHDR        WRT~,WRT+10,WRT+11,WRT+15,WRT+44,WRT+49,WRT+71,WRT+76,SET~,SET+4
   IBIFN        BLD+1~,BLD+30*,BLD+35,BLD+36,WRT~,WRT+5,WRT+18,WRT+23,WRT+27,WRT+34,WRT+36,WRT+37,WRT+57,WRT+63,CURRINS~,CURRINS+3
   IBLEV1       BLD+1~,BLD+12*,BLD+14*,BLD+15*,BLD+20*,BLD+24
   IBLINE       SET~,SET+5
>> IBLOC        HDR+5,BLD+5,BLD+30,WRT+63,WRT+64,WRT+65,WRT+66
   IBPAGE       WRT~,WRT+3,WRT+10,WRT+11,WRT+15,WRT+44,WRT+49,WRT+71,WRT+76,WRTQ*,SET~,SET+4
   IBREP        WRT~,WRT+8,WRT+10,WRT+11,WRT+15,WRT+44,WRT+49,WRT+71,WRT+76,WRTQ,SET~,SET+3
   IBS1         BLD+1~,BLD+8*,BLD+12,BLD+13,BLD+14,BLD+15,BLD+20,BLD+27,BLD+31,BLD+35,WRT~,WRT+11,WRT+15
   IBS2         BLD+1~,BLD+27*,BLD+31,BLD+35,WRT~
   IBSORT       HDR+13,HDR+17,BLD+11,BLD+19,BLD+24,BLD+26,BLD+35,BLD+36,WRT~,WRT+20,WRT+31,WRT+53,SET+4
   IBSTOP       WRT~,WRT+10,WRT+11,WRT+15,WRT+44,WRT+49,WRT+71,WRT+76,SET~,SET+4,SET+6
   IBTEST       BLD+28~,BLD+32*,BLD+33*,BLD+34*,BLD+35,WRT~,WRT+20
   IBX          BLD+1~,BLD+5*,BLD+6,BLD+28~,BLD+31*,BLD+32,BLD+33,BLD+34,WRT+2~,WRT+19*,WRT+20*,WRT+22*,WRT+23*,WRT+24*,WRT+26*
                WRT+29*,WRT+35*,WRT+36*,WRT+38*,WRT+40*,WRT+44,WRT+45*,WRT+48*,WRT+49,WRT+55*,WRT+58*,WRT+60*,WRT+63*,WRT+64*
                WRT+65*,WRT+66*
                WRT+67*,WRT+71,WRT+72*,WRT+75*,WRT+76,SET~,SET+2*,CURRINS+2~,CURRINS+8*,CURRINS+9*,CURRINS+10*,CURRINS+11
   IBXDATA      WRT+32~
   IBZ          WRT+32~,WRT+35,WRT+37!,WRT+54~,SET+1~,SET+2*,SET+6,SET+11*,SET+12*,SET+14,SET+16,CURRINS+2~
   IBZ(1        WRT+38,WRT+58,CURRINS+4
   IBZ(2        WRT+47,WRT+48,WRT+74,WRT+75
   IBZ(4        CURRINS+5
   IBZ(5        CURRINS+6
   IOSL         SET+4
   L1           CURRINS+2~,CURRINS+4*,CURRINS+8
   Q            SET+1~
   ST           CURRINS+2~,CURRINS+6*,CURRINS+7*,CURRINS+9,CURRINS+10
   TRUNC        CURRINS~,CURRINS+4,CURRINS+5
   U            BLD+12,BLD+13,BLD+14,BLD+15,BLD+20,BLD+31,BLD+36,WRT+19,WRT+22,WRT+24,WRT+25,WRT+27,WRT+28,WRT+38,WRT+39,WRT+48
                WRT+58,WRT+59,WRT+62,WRT+63,WRT+64,WRT+65,WRT+67,WRT+75,SET+16,CURRINS+7
>> VALMBG       INIT+1*
   VALMCNT      INIT+1*,BLD+26,BLD+36,WRT+15,WRT+44,WRT+49,WRT+71,WRT+76,SET~,SET+10*,SET+14,SET+15,SET+16
   VALMHDR      HDR+1!
   VALMHDR(1    HDR+6*,HDR+11*
   VALMHDR(2    HDR+7*,HDR+14*,HDR+18*
   VALMHDR(3    HDR+19*
   Z            WRT+2~,WRT+9*,WRT+10,WRT+23*,WRT+25*,WRT+26,WRT+32~,WRT+39*,WRT+40,WRT+54~,WRT+59*,WRT+60,WRT+62*,WRT+64,WRT+65
                WRT+67,SET+1~,SET+5*

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399           BLD+30,WRT+18,WRT+63
   ^DIC(5              CURRINS+7
   ^DPT(               WRT+39,WRT+59
   ^IBA(364            BLD+30,WRT+62
   ^IBA(364.1          BLD+13,WRT+64,WRT+65,WRT+67
   ^PRCA(430.3         WRT+28
   ^TMP("IB_PREV_CLAIM"BLD+4,BLD+8,BLD+12,BLD+20,BLD+27,BLD+31
   ^TMP("IB_PREV_CLAIM_BATCH"
                       BLD+2!,BLD+26*,BLD+36*,EXIT+5!
   ^TMP("IB_PREV_CLAIM_LIST"
                       BLD+2!,EXIT+2!,SET+14*,SET+15*
   ^TMP("IB_PREV_CLAIM_LIST_DX"
                       EXIT+4!,SET+16*
   ^TMP("IB_PREV_CLAIM_SELECT"
                       HDR+7,HDR+14,HDR+19,BLD+2!,EXIT+3!

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$CURRINS    BLD+20,WRT+36
   BLD          INIT+2
   BLDQ         BLD+4
   SET          WRT+10,WRT+11,WRT+15,WRT+44,WRT+49,WRT+71,WRT+76
   WRT          BLD+6,BLD+24,BLD+35
   WRTQ         WRT+5

External References
   $$EXTERNAL^DILFD    WRT+25
   $$INPAT^IBCEF       WRT+23
   F^IBCEF             WRT+34,WRT+37,WRT+57,CURRINS+3
   HDR^IBCEPTC1        SET+4
   $$FO^IBCNEUT1       WRT+19,WRT+26,WRT+29,WRT+35,WRT+36,WRT+38,WRT+58,WRT+60,WRT+63,WRT+64,WRT+65,SET+11
   $$BILL^RCJIBFN2     WRT+27
   CLEAR^VALM1         EXIT+6
   $$FMTE^XLFDT        WRT+63,WRT+64

*****   END   *****


IBCEPTC3 * *  244 Lines,  10190 Bytes, Checksum: B91463160                                            Mar 20, 2019@15:10:13 page 13
              1712 bytes in comments
IBCEPTC3 ;ALB/ESG - EDI PREVIOUSLY TRANSMITTED CLAIMS ACTIONS ;12/19/05
         ;;2.0;INTEGRATED BILLING;**320,547,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
         ; IB*2.0*547 Variable IBLOC is pre-defined (in IBCEPTC)
         ; IB*2.0*608 (vd) provided the ability to identify those claims that are resubmitted
         ;                 and those that are skipped. (US2486)
         Q
         ;
SELECT   ; Select claims to resubmit
         N IBIFN,IBZ,IBI,IBQ,DIR,VALMY,X,Y
         D FULL^VALM1
         D EN^VALM2($G(XQORNOD(0)))
         S IBZ=0 F  S IBZ=$O(VALMY(IBZ)) Q:'IBZ  D
         . S IBQ=$G(^TMP("IB_PREV_CLAIM_LIST_DX",$J,IBZ)),IBI=+$P(IBQ,U,2),IBQ=+IBQ
         . S IBIFN=$S(IBLOC:IBI,1:+$G(^IBA(364,IBI,0)))
         . Q:'IBIFN
         . D MARK(IBIFN,IBZ,IBQ,IBI,1,.VALMHDR)
         S VALMBCK="R"
         Q
         ;
SELBATCH ; Select a batch to resubmit 
         ; Assumes IBSORT is defined
         N DIC,DIR,X,Y,Z,IBQ,IBZ,IBI,IBDX,IBASK,IBOK,IBY,DTOUT,DUOUT
         D FULL^VALM1
         ; IB*2.0*547 Do not allow batch resubmit of locally printed claims
         I IBLOC=1 D  G SELBQ
         . S DIR(0)="EA",DIR("A",1)="This action is not available for Locally Printed Claims",DIR("A")="Press return to continue: "
         I IBSORT'=1 D  G SELBQ
         . S DIR(0)="EA",DIR("A",1)="This action is not available unless you chose to sort by batch",DIR("A")="Press return to conti
          nue: "
         . W ! D ^DIR K DIR
         S DIC="^IBA(364.1,",DIC(0)="AEMQ",DIC("S")="I $D(^TMP(""IB_PREV_CLAIM_BATCH"",$J,+Y))"
         D ^DIC K DIC
         I Y'>0 G SELBQ
         S IBY=+Y,VALMBG=+$G(^TMP("IB_PREV_CLAIM_BATCH",$J,IBY))
         ;
         S (IBOK,IBASK)=1
         I $G(^TMP("IB_PREV_CLAIM_BATCH",$J,IBY,"SEL")) D  G:'IBOK SELBQ
         . S DIR(0)="YA",DIR("A",1)="This batch was previously selected.",DIR("A")="Do you want to de-select all claims in this batc
          h?: ",DIR("B")="No"
         . W ! D ^DIR K DIR
         . I $D(DTOUT)!$D(DUOUT) S IBOK=0 Q
         . I Y S IBASK=0 K ^TMP("IB_PREV_CLAIM_BATCH",$J,IBY,"SEL")
         ;
         S IBQ=0      ; last screen row# for claim
         F  S IBQ=$O(^TMP("IB_PREV_CLAIM_BATCH",$J,IBY,IBQ)) Q:'IBQ  D
         . S IBZ=$G(^(IBQ))      ; IBIFN^selection#
         . S Z=$P(IBZ,U,2)       ; selection#
         . S IBDX=$G(^TMP("IB_PREV_CLAIM_LIST_DX",$J,+Z))   ; 1st screen row# for claim^364 ien
         . S IBI=$P(IBDX,U,2)    ; 364 ien
         . D MARK(+IBZ,Z,+IBDX,IBI,IBASK,.VALMHDR)
         ;
         I IBASK S ^TMP("IB_PREV_CLAIM_BATCH",$J,IBY,"SEL")=1
         ;
SELBQ    S VALMBCK="R"
         Q
         ;
MARK(IBIFN,IBZ,IBQ,IBI,IBASK,VALMHDR) --
          ; Mark claim as selected for resubmit
         ; Returns VALMHDR killed if any selections/de-selections made
         N DIR,X,Y
         I $D(^TMP("IB_PREV_CLAIM_SELECT",$J,IBIFN)) D  Q
         . S Y=1
         . I IBASK D
         .. S DIR(0)="YA",DIR("B")="No",DIR("A",1)="Claim "_$P($G(^DGCR(399,IBIFN,0)),U)_" for entry # "_IBZ_" has already been sele
          cted",DIR("A")="Do you want to de-select it?: " W ! D ^DIR K DIR
         . I Y=1 K ^TMP("IB_PREV_CLAIM_SELECT",$J,IBIFN) S $E(^TMP("IB_PREV_CLAIM_LIST",$J,IBQ,0),6)=" ",^TMP("IB_PREV_CLAIM_SELECT"
          ,$J)=^TMP("IB_PREV_CLAIM_SELECT",$J)-1 K VALMHDR
         ;
         S ^TMP("IB_PREV_CLAIM_SELECT",$J,IBIFN)=IBQ,^TMP("IB_PREV_CLAIM_SELECT",$J,IBIFN,0)=IBI,^TMP("IB_PREV_CLAIM_SELECT",$J)=$G(
          ^TMP("IB_PREV_CLAIM_SELECT",$J))+1
         S $E(^TMP("IB_PREV_CLAIM_LIST",$J,IBQ,0),6)="*" K VALMHDR
         Q
         ;
VIEW     ; View claims selected
         N IBCT,IBQUIT,DIR,X,Y,Z,Z0
         D FULL^VALM1
         I '$O(^TMP("IB_PREV_CLAIM_SELECT",$J,0)) D  G VIEWQ
         . S DIR(0)="EA",DIR("A")="No claims have been selected - Press return to continue " D ^DIR K DIR
         W @IOF
         S (IBQUIT,IBCT)=0
         W !,+^TMP("IB_PREV_CLAIM_SELECT",$J)," claims selected:"
         S Z="" F  S Z=$O(^TMP("IB_PREV_CLAIM_SELECT",$J,Z)) Q:'Z  S Z0=+$G(^(Z)) D
         . Q:'$D(^TMP("IB_PREV_CLAIM_LIST",$J,Z0,0))
         . S IBCT=IBCT+1
         . I '(IBCT#15) S IBQUIT=0 D  Q:IBQUIT
         .. S DIR(0)="E" D ^DIR K DIR
         .. I 'Y S IBQUIT=1
         . W !,"  ",$E(^TMP("IB_PREV_CLAIM_LIST",$J,Z0,0),7,47)
         ;
         G:IBQUIT VIEWQ
         S DIR(0)="E" D ^DIR K DIR
         ;
VIEWQ    S VALMBCK="R"
         Q
         ;
RESUB    ; Resubmit selected claims
         N DIR,DIRCTR,DIRLN,DIROUT,DIRUT,DTOUT,DUOUT
         N IB364,IBABORT,IBCLMNO,IBIFN,IBSKCTR,IBFSKIP,IBRSBTST,IBTYPPTC
         N X,Y,Z1
         ;/IB*2*608 - vd (US2486) - instituted the following variable to identify a claim as being resubmitted.
         S IBRSBTST=0
         D FULL^VALM1
         I '$O(^TMP("IB_PREV_CLAIM_SELECT",$J,0)) D  G RESUBQ
         . N DIR,X,Y
         . S DIR(0)="EA",DIR("A")="No claims have been selected - Press return to continue " D ^DIR K DIR
         ;
         ; Ask user if resubmit as production or as test
         S DIR(0)="SA^P:Production;T:Test Only"
         S DIR("A")="Resubmit Claims: "
         S DIR("B")="Production"
         S DIR("?",1)="  Select Production to resubmit the claims to the payer for payment."
         S DIR("?")="  Select Test to resubmit the claims as Test claims only."
         ; IB*2.0*547  Only allow locally printed claims to resubmit as Test
         W ! I IBLOC'=1 D ^DIR K DIR
         I $D(DIRUT) G RESUBQ
         S IBTYPPTC="TEST"
         I IBLOC'=1,Y="P" S IBTYPPTC="PRODUCTION"
         ;/IB*2*608 (vd) - The following line indicates the claim is being resubmitted as a "TEST" Claim and should be handled
         ; special concerning the COB, OFFSET, PRIOR PAYMENTS calculations by the Output Formatter.  (US2486)
         I IBTYPPTC="TEST" S IBRSBTST=1
         ;
         S DIR(0)="YA",DIR("B")="No"
         S DIR("A",1)="You are about to resubmit "_+^TMP("IB_PREV_CLAIM_SELECT",$J)_" claims as "_IBTYPPTC_" claims."
         S DIR("A")="Are you sure you want to continue?: "
         W ! D ^DIR K DIR
         I Y'=1 G RESUBQ
         ;
         ; OK to proceed and resubmit
         W !!,"Resubmission in process ... "
         ;
         ; loop thru selected claims and set into scratch globals
         S IBFSKIP=0
         K ^TMP("IBRCBOLD",$J)
         K ^TMP("IBSKIPPED",$J)   ;/IB*2*608 - vd
         S IBIFN=0 F  S IBIFN=$O(^TMP("IB_PREV_CLAIM_SELECT",$J,IBIFN)) Q:'IBIFN  S Z1=+$G(^(IBIFN)),IB364=+$G(^(IBIFN,0)) I IB364 D
         . ;
         . I IBTYPPTC="TEST" D
         .. S ^TMP("IBEDI_TEST_BATCH",$J,IB364)=""
         .. S ^TMP("IBRESUBMIT",$J,IB364)=""
         .. I Z1 D MARK(IBIFN,"",Z1,IB364,0,.VALMHDR)
         .. Q
         . ;
         . I IBTYPPTC="PRODUCTION" D
         .. ;/IB*2*680 (vd) - modified the following line for US2486 as shown below.
         .. ; I '$$TXOK(IBIFN) S IBFSKIP=IBFSKIP+1 Q    ; transmission not allowed
         .. I '$$TXOK(IBIFN) D  Q   ;transmission not allowed
         ... S IBCLMNO=$$GET1^DIQ(399,IBIFN,.01)
         ... S IBFSKIP=IBFSKIP+1
         ... S ^TMP("IBSKIPPED",$J,IBCLMNO)=IBIFN  ; /IB*2*608 (vd) - Added to identify those claims that are Skipped
         .. N Y S Y=$$ADDTBILL^IBCB1(IBIFN)  ; new entry in file 364 - "X" status
         .. I '$P(Y,U,3) Q                   ; quit if new entry didn't get added
         .. S ^TMP("IBSELX",$J,+Y)=""
         .. S ^TMP("IBRCBOLD",$J,IB364)=""   ; save list of old transmit bills
         .. I Z1 D MARK(IBIFN,"",Z1,IB364,0,.VALMHDR)
         .. Q
         . ;
         . Q
         ;
         ; set top level of scratch globals based on test or production
         I IBTYPPTC="TEST" S ^TMP("IBRESUBMIT",$J)="^^0^1",^TMP("IBEDI_TEST_BATCH",$J)=1
         E  KILL ^TMP("IBRESUBMIT",$J),^TMP("IBEDI_TEST_BATCH",$J),^TMP("IBONE",$J) S ^TMP("IBSELX",$J)=0
         ;
         ; resubmit call
         D EN1^IBCE837B("","","",.IBABORT,$G(IBRSBTST)) ;/IB*2*608 (vd) - added the IBRSBTST parameter for US2486.
         ;
         ; if user aborted at the last minute, then get rid of the new entries
         ; in file 364 that were added for production claim sending
         I IBABORT D
         . N IB,DIK,DA
         . S IB=0 F  S IB=$O(^TMP("IBSELX",$J,IB)) Q:'IB  S DIK="^IBA(364,",DA=IB D ^DIK
         . Q
         ;
         ; update EDI files for the old transmit bills
         I 'IBABORT D
         . N IB
         . S IB=0 F  S IB=$O(^TMP("IBRCBOLD",$J,IB)) Q:'IB  D UPDEDI^IBCEM(IB,"R")
         . Q
         ;
         ; cleanup
         K ^TMP("IBEDI_TEST_BATCH",$J),^TMP("IBRESUBMIT",$J),^TMP("IBSELX",$J),^TMP("IBRCBOLD",$J)
         I '$O(^TMP("IB_PREV_CLAIM_SELECT",$J,0)) K ^TMP("IB_PREV_CLAIM_SELECT",$J)
         S DIR(0)="EA"
         S DIR("A",1)="Selected claims have been resubmitted as "_IBTYPPTC_"."
         I IBFSKIP D
         . S DIR("A",2)="Please note: Some claims were not eligible to be resubmitted as live claims."
         . S DIR("A",3)=" These claims are still indicated as being selected."
         . S DIR("A",4)="The following are the claims that were skipped:"
         . S (DIRLN,IBCLMNO)="",IBSKCTR=0,DIRCTR=4
         . F  S IBCLMNO=$O(^TMP("IBSKIPPED",$J,IBCLMNO)) Q:IBCLMNO=""  D
         . . S IBSKCTR=IBSKCTR+1 ; Increment # of claims on the display line.
         . . I IBSKCTR>6 D     ; Want no more than 6 claim numbers displayed per display line.
         . . . S DIRCTR=DIRCTR+1,DIR("A",DIRCTR)=DIRLN   ; increment the DIR("A",...) display line and set the line.
         . . . S IBSKCTR=1,DIRLN=""   ; reset the line segment ctr and clear the display line.
         . . ;
         . . S DIRLN=DIRLN_" "_IBCLMNO   ; Append the claim # to the existing display line.
         . I +IBSKCTR S DIRCTR=DIRCTR+1,DIR("A",DIRCTR)=DIRLN
         . ;
         . Q
         K ^TMP("IBSKIPPED",$J) ;/IB*2*608 (vd) - delete the temporary list of skipped claims after reporting them.
         I IBABORT K DIR("A") S DIR("A",1)="No claims were resubmitted."
         S DIR("A")="Press return to continue "
         W ! D ^DIR K DIR
         K VALMHDR
         ;
RESUBQ   ;
         S VALMBCK="R"
         Q
         ;
REPORT   ; Print report
         ; Assumes IBSORT, IBDT1, IBDT2 defined
         N IBACT,Z
         D FULL^VALM1
         F  S IBACT=0 D DEVSEL^IBCEPTC(.IBACT) Q:IBACT 
         I IBACT'=99 D
         . N IBREP
         . S IBREP="R" D RPT^IBCEPTC1(IBSORT,IBDT1,IBDT2)
         ;
         D HOME^%ZIS
         S VALMBCK="R"
         Q
         ;
CKSENT(VALMBCK) --
          ; Make sure selected entries are transmitted
         ;
         N IBOK,DIR,X,Y
         S IBOK=1
         I $O(^TMP("IB_PREV_CLAIM_SELECT",$J,0)) D
         . D FULL^VALM1
         . S DIR(0)="YA",DIR("A",1)="You have selected "_+$G(^TMP("IB_PREV_CLAIM_SELECT",$J))_" claims, but have not resubmitted the
          m",DIR("A")="Are you sure you want to quit before you resubmit them?: ",DIR("B")="No"
         . W ! D ^DIR K DIR
         . I Y'=1 S VALMBCK="R",IBOK=0
         I IBOK S VALMBCK="Q"
         Q
         ;
TXOK(IBIFN) --
          ; Function determines if claim is OK for live resubmission
         NEW OK,IB364,IBD,IBSTAT
         S OK=0
         ;/IB*2*608 (vd) - added the following line for US2486.
         I $D(^IBM(361.1,"ABS",+$G(IBIFN),$$COBN^IBCEF(IBIFN))) G TXOKX  ; Not okay for claim w/EOB for this payer sequence
         ;
         I '$P($G(^DGCR(399,+$G(IBIFN),"TX")),U,2) G TXOKX                  ; last electronic extract date
         I '$F(".2.3.4.","."_$P($G(^DGCR(399,IBIFN,0)),U,13)_".") G TXOKX   ; claim status
         S IB364=+$$LAST364^IBCEF4(+$G(IBIFN)) I 'IB364 G TXOKX             ; transmit bill exists
         S IBD=$G(^IBA(364,IB364,0)) I IBD="" G TXOKX
         S IBSTAT=$P(IBD,U,3) I IBSTAT="X" G TXOKX                          ; already awaiting extract
         S OK=1
TXOKX    ;
         Q OK
         ;

*****   INDEX OF IBCEPTC3   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   DA           RESUB+73~,RESUB+74*
   DIC          SELBATCH+2~,SELBATCH+10*,SELBATCH+11!
   DIC("S"      SELBATCH+10*
   DIC(0        SELBATCH+10*
   DIK          RESUB+73~,RESUB+74*
   DIR          SELECT+1~,SELBATCH+2~,SELBATCH+9!,SELBATCH+18!,MARK+2~,MARK+6!,VIEW+1~,VIEW+4!,VIEW+12!,VIEW+17!,RESUB+1~,RESUB+8~
                RESUB+9!,RESUB+18!,RESUB+29!,RESUB+106!,CKSENT+2~,CKSENT+7!
   DIR("?"      RESUB+15*,RESUB+16*
   DIR("A"      SELBATCH+6*,SELBATCH+8*,SELBATCH+17*,MARK+6*,VIEW+4*,RESUB+9*,RESUB+13*,RESUB+27*,RESUB+28*,RESUB+87*,RESUB+89*
                RESUB+90*,RESUB+91*,RESUB+96*,RESUB+100*,RESUB+104!*,RESUB+105*,CKSENT+6*
   DIR("B"      SELBATCH+17*,MARK+6*,RESUB+14*,RESUB+26*,CKSENT+6*
   DIR(0        SELBATCH+6*,SELBATCH+8*,SELBATCH+17*,MARK+6*,VIEW+4*,VIEW+12*,VIEW+17*,RESUB+9*,RESUB+12*,RESUB+26*,RESUB+86*
                CKSENT+6*
   DIRCTR       RESUB+1~,RESUB+92*,RESUB+96*,RESUB+100*
   DIRLN        RESUB+1~,RESUB+92*,RESUB+96,RESUB+97*,RESUB+99*,RESUB+100
   DIROUT       RESUB+1~
   DIRUT        RESUB+1~,RESUB+19
   DTOUT        SELBATCH+2~,SELBATCH+19,RESUB+1~
   DUOUT        SELBATCH+2~,SELBATCH+19,RESUB+1~
   IB           RESUB+73~,RESUB+74*,RESUB+79~,RESUB+80*
   IB364        RESUB+2~,RESUB+39*,RESUB+42,RESUB+43,RESUB+44,RESUB+57,RESUB+58,TXOK+1~,TXOK+8*,TXOK+9
   IBABORT      RESUB+2~,RESUB+68,RESUB+72,RESUB+78,RESUB+104
   IBACT        REPORT+2~,REPORT+4*,REPORT+5
   IBASK        SELBATCH+2~,SELBATCH+15*,SELBATCH+20*,SELBATCH+28,SELBATCH+30,MARK~,MARK+5
   IBCLMNO      RESUB+2~,RESUB+51*,RESUB+53,RESUB+92*,RESUB+93*,RESUB+99
   IBCT         VIEW+1~,VIEW+6*,VIEW+10*,VIEW+11
   IBD          TXOK+1~,TXOK+9*,TXOK+10
>> IBDT1        REPORT+7
>> IBDT2        REPORT+7
   IBDX         SELBATCH+2~,SELBATCH+26*,SELBATCH+27,SELBATCH+28
   IBFSKIP      RESUB+2~,RESUB+36*,RESUB+52*,RESUB+88
   IBI          SELECT+1~,SELECT+5*,SELECT+6,SELECT+8,SELBATCH+2~,SELBATCH+27*,SELBATCH+28,MARK~,MARK+9
   IBIFN        SELECT+1~,SELECT+6*,SELECT+7,SELECT+8,MARK~,MARK+3,MARK+6,MARK+7,MARK+9,RESUB+2~,RESUB+39*,RESUB+44,RESUB+50
                RESUB+51,RESUB+53,RESUB+54,RESUB+58,TXOK~,TXOK+4,TXOK+6,TXOK+7,TXOK+8
>> IBLOC        SELECT+6,SELBATCH+5,RESUB+18,RESUB+21
   IBOK         SELBATCH+2~,SELBATCH+15*,SELBATCH+16,SELBATCH+19*,CKSENT+2~,CKSENT+3*,CKSENT+8*,CKSENT+9
   IBQ          SELECT+1~,SELECT+5*,SELECT+8,SELBATCH+2~,SELBATCH+22*,SELBATCH+23*,SELBATCH+24,MARK~,MARK+7,MARK+9,MARK+10
   IBQUIT       VIEW+1~,VIEW+6*,VIEW+11*,VIEW+13*,VIEW+16
   IBREP        REPORT+6~,REPORT+7*
   IBRSBTST     RESUB+2~,RESUB+5*,RESUB+24*,RESUB+68
   IBSKCTR      RESUB+2~,RESUB+92*,RESUB+94*,RESUB+95,RESUB+97*,RESUB+100
>> IBSORT       SELBATCH+7,REPORT+7
   IBSTAT       TXOK+1~,TXOK+10*
   IBTYPPTC     RESUB+2~,RESUB+20*,RESUB+21*,RESUB+24,RESUB+27,RESUB+41,RESUB+47,RESUB+64,RESUB+87
   IBY          SELBATCH+2~,SELBATCH+13*,SELBATCH+16,SELBATCH+20,SELBATCH+23,SELBATCH+30
   IBZ          SELECT+1~,SELECT+4*,SELECT+5,SELECT+8,SELBATCH+2~,SELBATCH+24*,SELBATCH+25,SELBATCH+28,MARK~,MARK+6
   IOF          VIEW+5
   OK           TXOK+1~,TXOK+2*,TXOK+11*,TXOKX+1
   U            SELECT+5,SELBATCH+25,SELBATCH+27,MARK+6,RESUB+55,TXOK+6,TXOK+7,TXOK+10
   VALMBCK      SELECT+9*,SELBQ*,VIEWQ*,RESUBQ+1*,REPORT+10*,CKSENT~,CKSENT+8*,CKSENT+9*
>> VALMBG       SELBATCH+13*
   VALMHDR      SELECT+8,SELBATCH+28,MARK~,MARK+7!,MARK+10!,RESUB+44,RESUB+58,RESUB+107!
   VALMY        SELECT+1~
   VALMY(       SELECT+4
   X            SELECT+1~,SELBATCH+2~,MARK+2~,VIEW+1~,RESUB+3~,RESUB+8~,CKSENT+2~
>> XQORNOD(0    SELECT+3
   Y            SELECT+1~,SELBATCH+2~,SELBATCH+12,SELBATCH+13,SELBATCH+20,MARK+2~,MARK+4*,MARK+7,VIEW+1~,VIEW+13,RESUB+3~,RESUB+8~
                RESUB+21,RESUB+30,RESUB+54~*,RESUB+55,RESUB+56,CKSENT+2~,CKSENT+8
   Z            SELBATCH+2~,SELBATCH+25*,SELBATCH+26,SELBATCH+28,VIEW+1~,VIEW+8*,REPORT+2~
   Z0           VIEW+1~,VIEW+8*,VIEW+9,VIEW+14
   Z1           RESUB+3~,RESUB+39*,RESUB+44,RESUB+58

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399           MARK+6,TXOK+6,TXOK+7
   ^IBA(364            SELECT+6,TXOK+9
   ^IBM(361.1          TXOK+4
   ^TMP("IBEDI_TEST_BATCH"
                       RESUB+42*,RESUB+64*,RESUB+65!,RESUB+84!
   ^TMP("IBONE"        RESUB+65!
   ^TMP("IBRCBOLD"     RESUB+37!,RESUB+57*,RESUB+80,RESUB+84!
   ^TMP("IBRESUBMIT"   RESUB+43*,RESUB+64*,RESUB+65!,RESUB+84!
   ^TMP("IBSELX"       RESUB+56*,RESUB+65*,RESUB+74,RESUB+84!
   ^TMP("IBSKIPPED"    RESUB+38!,RESUB+53*,RESUB+93,RESUB+103!
   ^TMP("IB_PREV_CLAIM_BATCH"
                       SELBATCH+13,SELBATCH+16,SELBATCH+20!,SELBATCH+23,SELBATCH+30*
   ^TMP("IB_PREV_CLAIM_LIST"
                       MARK+7*,MARK+10*,VIEW+9,VIEW+14
   ^TMP("IB_PREV_CLAIM_LIST_DX"
                       SELECT+5,SELBATCH+26
   ^TMP("IB_PREV_CLAIM_SELECT"
                       MARK+3,MARK+7!*,MARK+9*,VIEW+3,VIEW+7,VIEW+8,RESUB+7,RESUB+27,RESUB+39,RESUB+85!,CKSENT+4,CKSENT+6

Naked Globals
   ^(           SELBATCH+24,VIEW+8,RESUB+39

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$TXOK       RESUB+50
   MARK         SELECT+8,SELBATCH+28,RESUB+44,RESUB+58
   RESUBQ       RESUB+7,RESUB+19,RESUB+30
   SELBQ        SELBATCH+5,SELBATCH+7,SELBATCH+12,SELBATCH+16
   TXOKX        TXOK+4,TXOK+6,TXOK+7,TXOK+8,TXOK+9,TXOK+10
   VIEWQ        VIEW+3,VIEW+16

External References
   HOME^%ZIS           REPORT+9
   ^DIC                SELBATCH+11
   ^DIK                RESUB+74
   $$GET1^DIQ          RESUB+51
   ^DIR                SELBATCH+9,SELBATCH+18,MARK+6,VIEW+4,VIEW+12,VIEW+17,RESUB+9,RESUB+18,RESUB+29,RESUB+106,CKSENT+7
   $$ADDTBILL^IBCB1    RESUB+54
   EN1^IBCE837B        RESUB+68
   $$COBN^IBCEF        TXOK+4
   $$LAST364^IBCEF4    TXOK+8
   UPDEDI^IBCEM        RESUB+80
   DEVSEL^IBCEPTC      REPORT+4
   RPT^IBCEPTC1        REPORT+7
   FULL^VALM1          SELECT+2,SELBATCH+3,VIEW+2,RESUB+6,REPORT+3,CKSENT+5
   EN^VALM2            SELECT+3

*****   END   *****


IBCEU    * *  305 Lines,  13435 Bytes, Checksum: B119764859                                           Mar 20, 2019@15:10:13 page 14
              4074 bytes in comments
IBCEU    ;ALB/TMP - EDI UTILITIES ;02-OCT-96
         ;;2.0;INTEGRATED BILLING;**51,137,207,232,349,432,592,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ; DBIA SUPPORTED REF: GET^XUA4A72 = 1625
         ; DBIA SUPPORTED REF: $$ESBLOCK^XUSESIG1 = 1557
         Q
         ;
TESTPT(DFN) --
          ; Determine if pt is test pt
         ; Returns 1 if a test pt, 0 if not
         Q $E($P($G(^DPT(+DFN,0)),U,9),1,5)="00000"
         ;
MAINPRV(IBIFN) --
          ; Returns name^id^ien^type code of 'main' prov on bill IBIFN
         N IBPRV,IBCOB,IBQ,Z
         D GETPRV(IBIFN,"3,4",.IBPRV)
         S IBQ="",IBCOB=$$COBN^IBCEF(IBIFN)
         F Z=3,4 I $G(IBPRV(Z,1))'="" D  Q
         . S IBQ=IBPRV(Z,1),$P(IBQ,U,4)=Z
         . I $G(IBPRV(Z,1,IBCOB))'="" S $P(IBQ,U,2)=IBPRV(Z,1,IBCOB)
         Q IBQ
         ;
PRVOK(VAL,IBIFN) --
          ; Check bill form & prov function agree
         ; VAL = internal value of prov function
         ;
         N OK,IBBT
         S OK=0
         Q:VAL="" OK
         Q:'IBIFN OK
         ; JWS;IB*2.0*592 US1108 - add Dental form (7) check
         S IBBT=$$FT^IBCEF(IBIFN) ; 2 If CMS-1500, 3 If UB-04, 7 if J430D Dental
         I IBBT=2!(IBBT=7) D
         . I VAL=1 S OK=1 Q   ; CMS-1500, REFERRING
         . I VAL=3 S OK=1 Q   ; CMS-1500, RENDERING
         . I VAL=5 S OK=1 Q   ; CMS-1500, SUPERVISING
         . I IBBT=7,VAL=6 S OK=1 Q  ;J430D, ASSISTANT SURGEON
         ; JWS;IB*2.0*592 US1108 - end
         I IBBT=7,$G(IBDR20)=103,'$$FILTERP^IBCSC10H(IBIFN,VAL) S OK=0
         I 'OK,IBBT=3 D
         . I VAL=1 S OK=1 Q   ; UB-04, REFERRING
         . I VAL=2 S OK=1 Q   ; UB-04, OPERATING
         . I VAL=3 S OK=1 Q   ; UB-04, RENDERING
         . I VAL=4 S OK=1 Q   ; UB-04, ATTENDING
         . I VAL=9 S OK=1 Q   ; UB-04, OTHER
         ;
         Q OK
         ;
PRVOK1(VAL,IBIFN) --
          ; Check for both attending and rendering on bill
         N OK
         S OK=1
         Q:$$FT^IBCEF(IBIFN)=3 1  ; both are allowed on UB
         I $S("34"'[VAL:0,1:$D(^DGCR(399,IBIFN,"PRV","B",$S(VAL=3:4,1:3)))) D EN^DDIOL($S(VAL=3:"ATTENDING",1:"RENDERING")_" ALREADY
           EXISTS - CAN'T HAVE BOTH ON ONE BILL") S OK=0
         Q OK
         ;
SPEC(IBPRV,IBDT) --
          ; Returns spec code for vp ien IBPRV from file 355.9
         ;  (for new person entries, as of date in IBDT)
         ; DBIA 1625
         N IBSPEC
         S:'$G(IBDT) IBDT=DT
         I IBPRV'["IBA(355.93" S IBSPEC=$S(IBPRV:$P($$GET^XUA4A72(+IBPRV,IBDT),U,8),1:"") ; VA
         I IBPRV["IBA(355.93" S IBSPEC=$P($G(^IBA(355.93,+IBPRV,0)),U,4) ; Non-VA
         Q IBSPEC
         ;
CRED(IBPRV,IBIFN,IBPIEN,IBTYP) --
          ; Returns prov credentials
         ; IBPRV = vp of provider for file 200 or 355.93
         ; IBIFN = bill ien in file 399 (optional)
         ; IBPIEN = prov ien - file 399.0222 (optional)
         ;          DEM;432 - prov ien can be from file 399.0404
         ;          as well (optional).
         ; IBTYP = the prov type
         ;
         N IBCRED
         S IBCRED=""
         ;
         ; DEM;432 - Provider can come from either file 399.0222, or
         ;           file 399.0404. Variable IBLNPRV is the flag
         ;           that indicates we want prov ien from file 399.0404.
         ;
         I '$G(IBLNPRV),$G(IBIFN),'$D(^DGCR(399,IBIFN,"PRV",0)) G CREDQ
         ;
         ; DEM;432 - Next line if for line level provider. Variable IBPROCP,
         ;           if it exist, is the procedure ien. File 399.0404 is a
         ;           multiple of the Procedure File 399.0304.
         ;
         I $G(IBLNPRV),$G(IBIFN),$G(IBPROCP),'$D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",0)) G CREDQ
         I '$G(IBLNPRV),$G(IBIFN),($G(IBPIEN)!$G(IBTYP)) D
         . I '$G(IBPIEN) S IBPIEN=+$O(^DGCR(399,IBIFN,"PRV","B",IBTYP,0))
         . S IBCRED=$P($G(^DGCR(399,IBIFN,"PRV",IBPIEN,0)),U,3)
         ;
         I $G(IBLNPRV),$G(IBIFN),$G(IBPROCP),($G(IBPIEN)!$G(IBTYP)) D  ; DEM;432 - Line Provider File 399.0404.
         . I '$G(IBPIEN) S IBPIEN=+$O(^DGCR(399,IBIFN,"CP",IBPROCP,"B",IBTYP,0))
         . S IBCRED=$P($G(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBPIEN,0)),U,3)
         ;
CREDQ    ;
         I $G(IBPRV),IBCRED="" D
         . I IBPRV'["IBA(355.93" S IBCRED=$P($$ESBLOCK^XUSESIG1(+IBPRV),U,2)
         . I IBPRV["IBA(355.93" S IBCRED=$P($G(^IBA(355.93,+IBPRV,0)),U,3)
         Q IBCRED
         ;
GETPRV(IBIFN,IBTYP,IBPRV) --
          ; Returns prov(s) of type(s) IBTYP for
         ;  bill ien IBIFN.
         ;  IBTYP = prov types needed, separated by ',' or ALL
         ; 
         ; OUTPUT:
         ;  IBPRV array: IBPRV(type)= 1 if prov is from old prov flds
         ;               IBPRV(type,ct)=name^current COB id^vp provider ien^cred
         ;               IBPRV(type,ct,seq)=COB seq specific id
         ;               IBPRV(type)=default nm^def id
         ;               IBPRV(type,"NOTOPT")= defined if a required prov type
         ;
         N IB,IBCT,IBD,IBY,IBZ,IBMRAND,IBID,IBWNR,IBPNM,Z ;,IBZFID
         ;S IBZFID=""
         D F^IBCEF("N-CURRENT INS POLICY TYPE","IBZ",,IBIFN)
         ;I IBZ="CI" D F^IBCEF("N-FEDERAL TAX ID","IBZFID",,IBIFN) S IBZFID=$TR(IBZFID,"-")
         S IBPRV=U_$G(IBZ),IBY=0
         S IBMRAND=$$MCRONBIL^IBEFUNC(IBIFN)
         ;WCJ;IB*2.0*432;Remove Default
         I IBMRAND D
         . ; F Z=1:1:3,5,6,7,8,9 S:Z=3&($$FT^IBCEF(IBIFN)=3) Z=4 S IBPRV(Z)=$S(Z=3!(Z=4):"DEPT VETERANS AFFAIRS",1:"")_"^VAD000"
         . F Z=1:1:9 S IBPRV(Z)="^VAD000"
         . I '$$INPAT^IBCEF(IBIFN,1),$$FT^IBCEF(IBIFN)=3 S IBPRV(4,1)="^SLF000"
         ;WCJ;IB*2.0*432;End changes
         ;
         ; For backwards compatability (before the claim level provider mulitple)
         I '$D(^DGCR(399,+IBIFN,"PRV",0)) D  G GETQ
         . N IBALL
         . S IBALL=(IBTYP="ALL")
         . I IBTYP[4!IBALL S:$P($G(^DGCR(399,+IBIFN,"U1")),U,13)'="" IBPRV(4,1)=$P(^("U1"),U,13),IBPRV(4)=1 Q:IBTYP=4
         . I IBTYP[3!IBALL S:$P($G(^DGCR(399,+IBIFN,"UF2")),U)'="" IBPRV(3,1)=$P(^("UF2"),U),IBPRV(3)=1 Q:IBTYP=3
         . I IBTYP[9!IBALL S:$P($G(^DGCR(399,+IBIFN,"U1")),U,14)'="" IBPRV(9,1)=$P(^("U1"),U,14),IBPRV(9)=1
         ;
         S IBID=4+$$COBN^IBCEF(IBIFN),IBWNR=$$WNRBILL^IBEFUNC(IBIFN)
         F IBZ=1:1:$S(IBTYP="ALL":99,1:$L(IBTYP,",")) S (IBCT,IB)=0,IBY=$S(IBTYP'="ALL":$P(IBTYP,",",IBZ),1:$O(^DGCR(399,+IBIFN,"PRV
          ","B",IBY))) Q:IBY=""  F  S IB=$O(^DGCR(399,+IBIFN,"PRV","B",IBY,IB)) Q:'IB  D
         . S IBCT=IBCT+1
         . S IBD=$G(^DGCR(399,+IBIFN,"PRV",IB,0))
         . Q:'$P(IBD,U,2)
         . S IBPNM=$$EXPAND^IBTRE(399.0222,.02,$P(IBD,U,2))
         . I IBWNR Q:'$D(IBPRV(IBY))  S $P(IBD,U,IBID)=$P(IBPRV(IBY),U,2)
         . S IBPRV(IBY,IBCT)=IBPNM_U_$S($P(IBD,U,IBID)'="":$P(IBD,U,IBID),$P($G(IBPRV(IBY)),U,2)'="":$P(IBPRV(IBY),U,2),1:$P($$DEFID
          ^IBCEF74(IBIFN,IB),U,IBID-4))_U_$P(IBD,U,2)
         . S $P(IBPRV(IBY,IBCT),U,4)=$$CRED($P(IBPRV(IBY,IBCT),U,3),IBIFN,$S($P(IBD,U,3)'=""!'$P(IBPRV(IBY,IBCT),U,3):IB,1:""))
         . F Z=1:1:3 D
         .. ;I IBZFID'="",'$$INPAT^IBCEF(IBIFN,1),$P(IBPRV(IBY,IBCT),U,2)="SLF000" S IBZFID=""
         .. ;I $S(Z=1:1,1:$D(^DGCR(399,IBIFN,"I"_Z))) S IBPRV(IBY,IBCT,Z)=$S($G(IBZFID)'="":IBZFID,$P(IBD,U,Z+4)'="":$P(IBD,U,Z+4),1
          :"")
         .. I $S(Z=1:1,1:$D(^DGCR(399,IBIFN,"I"_Z))) S IBPRV(IBY,IBCT,Z)=$S($P(IBD,U,Z+4)'="":$P(IBD,U,Z+4),1:$P($$DEFID^IBCEF74(IBI
          FN,IB),U,Z))
GETQ     D NEEDPRV(IBIFN,IBTYP,.IBPRV)
         Q
         ;
NEEDPRV(IBIFN,IBTYP,IBPRV) --
          ; Check for needed prov
         ; If needed, not entered, insert defaults for MCR only
         N IB0,IBINP,IBFT,IBMRAND,IBTOB
         S IB0=$G(^DGCR(399,+IBIFN,0))
         S IBFT=($$FT^IBCEF(IBIFN)=3),IBINP=$$INPAT^IBCEF(IBIFN,1),IBTOB=$$TOB^IBCBB(IB0)
         ; Only allow defaults for MCR
         S IBMRAND=$$WNRBILL^IBEFUNC(IBIFN) ;$$MCRONBIL^IBEFUNC(IBIFN)
         ;
         I IBTYP="ALL"!((IBTYP_",")["1,") D
         . ; DEM;432 - UB-04 or CMS-1500 SITUATIONAL
         . S IBPRV(1,"SITUATIONAL")=1
         . Q
         ;
         I IBTYP="ALL"!((IBTYP_",")["2,") D:IBFT
         . ; only for bill type inpt - 11X, outpt - 83X
         . S IBPRV(2,"SITUATIONAL")=1  ; DEM;432 - Default to "SITUATIONAL". If conditions below are met, then IBPRV(2,"SITUATIONAL"
          ) is KILLED and IBRPV is SET according to conditions.
         . Q:$S(IBINP:$E(IBTOB,1,2)'="11",1:$E(IBTOB,1,2)'="83")
         . ; UB-04 bill includes HCPCS procs - operating phys situational
         . N Z
         . S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  I $P($G(^(Z,0)),U)["ICP" D  Q
         .. K IBPRV(2,"SITUATIONAL")  ; DEM;432 - We have met one of the condtions, so KILL IBPRV(2,"SITUATIONAL"). 
         .. I IBINP S IBPRV(2,"SITUATIONAL")=1 Q  ; DEM;432 - If UB-04 (inpatient), then operating provider situational.
         .. I 'IBINP S IBPRV(2,"NOTOPT")=1  ; DEM;432 - If UB-04 (outpatient), then operating provider required.
         .. Q:'IBMRAND
         .. I '$O(IBPRV(2,0)) S IBPRV(2,"REQ")=1,IBPRV(2,1)=$G(IBPRV(2))
         ;
         I IBTYP="ALL"!((IBTYP_",")["3,") D
         . ; if a CMS-1500 bill, rendering is required
         . ; JWS;IB*2.0*592 US1108 - exclude dental form
         . ;I 'IBFT,$$FT^IBCEF(IBIFN)'=7 S IBPRV(3,"NOTOPT")=1      ;CHANGED THIS LINE TO THE FOLLOWING IN IB*2.0*608 - vd (US3214)
         . I 'IBFT,$$FT^IBCEF(IBIFN)'=7 S IBPRV(3,"SITUATIONAL")=1  ;FOR CMS-1500 RENDERING IS NO LONGER REQUIRED
         . ; DEM;432 - if UB-04, rendering is situational.
         . ; JWS;IB*2.0*592 US1108 - dental form check
         . I IBFT!($$FT^IBCEF(IBIFN)=7) S IBPRV(3,"SITUATIONAL")=1 Q
         . Q:'IBMRAND
         . I '$O(IBPRV(3,0)) S IBPRV(3,1)=$G(IBPRV(3)),IBPRV(3,"REQ")=1
         ;
         I IBTYP="ALL"!((IBTYP_",")["4,") D:IBFT
         . ; if a UB-04, attending required
         . S IBPRV(4,"NOTOPT")=1
         . Q:'IBMRAND
         . I '$O(IBPRV(4,0)) S IBPRV(4,1)=$G(IBPRV(4)),IBPRV(4,"REQ")=1
         Q
         ;
CKPROV(IBIFN,IBTYP,IBVAL) --
          ; Checks if prov of type IBTYP in 'PRV' node
         ; of bill IBIFN
         ; If IBVAL = 1, skips the check for an existing provider, just looks
         ;               for existence of the function itself
         N OK,IBFT,Z,R
         S OK=0,IBFT=$$FT^IBCEF(IBIFN)
         S Z=+$O(^DGCR(399,IBIFN,"PRV","B",+IBTYP,0))
         I $G(^DGCR(399,IBIFN,"PRV",Z,0))'="" D
         . ; Only outpt UB-04 can have SLF000 as prov ID with no name
         . I IBFT=3,'$$INPAT^IBCEF(IBIFN,1),$P(^DGCR(399,IBIFN,"PRV",Z,0),U,2)="",$P(^(0),U,5)="SLF000" S OK=1 Q
         . I '$G(IBVAL) Q:$P(^DGCR(399,IBIFN,"PRV",Z,0),U,2)=""
         . S OK=1
         Q OK
         ;
XFER(IBQ) ; Transfer DILIST
         ; IBQ = # of entries already found
         N Z,IBZ
         S (Z,IBZ)=0
         F  S Z=$O(^TMP("DILIST",$J,1,Z)) Q:'Z  S IBZ=IBZ+1,^TMP("IBLIST",$J,1,IBZ+IBQ)=^TMP("DILIST",$J,1,Z),^TMP("IBLIST",$J,2,IBZ
          +IBQ)=^TMP("DILIST",$J,2,Z) M ^TMP("IBLIST",$J,"ID",IBZ+IBQ)=^TMP("DILIST",$J,"ID",Z)
         ;
         I $D(^TMP("DILIST",$J,0)) S ^TMP("IBLIST",$J,0)=^TMP("DILIST",$J,0)
         S $P(^TMP("IBLIST",$J,0),U)=IBQ+IBZ
         Q
         ;
DATE(X)  ; Convert date X in YYYYMMDD or YYMMDD to FM format
         ; FP = flag to indicate if past or future dates are expected
         N %DT,Y
         I $L(X)=8,$E(X,1,4)<2100,$E(X,5,6)<13,$E(X,7,8)<32 S X=$E(X,1,4)-1700_$E(X,5,8) G DTQ
         I $L(X)=6,$E(X,3,4)<13,$E(X,5,6)<32 S X=$E(X,3,4)_"/"_$E(X,5,6)_"/"_$E(X,1,2),%DT="N" D ^%DT I Y>0 S X=Y
DTQ      Q X
         ;
BCLASS(IBIFN) --
          ; Returns actual bill classif. code from ptr fld
         ;  .25 in file 399 for bill ien IBIFN
         Q $P($G(^DGCR(399.1,+$P($G(^DGCR(399,IBIFN,0)),U,25),0)),U,2)
         ;
ADMHR(IBIFN,IBDTTM) --
          ; Extract admit hr from admit dt/tm
         ;  Default 00 if no time and bill is 11X or 18X
         N TM
         S TM=$P(IBDTTM,".",2)
         I TM="","18"[$$BCLASS(IBIFN),$P($G(^DGCR(399,IBIFN,0)),U,24)=1 S TM="00"
         I TM'="",TM'="00" S TM=$E(TM_"0000",1,4)
         Q TM
         ;
OLAB(IBIFN) --
          ; Returns 1 if bill IBIFN is outside lab
         N IBL,IBLAB
         S IBL=0
         S IBLAB=$P($G(^DGCR(399,IBIFN,"U2")),U,11)
         I IBLAB,"24"[IBLAB S IBL=1
         Q IBL
         ;
PSRV(IBIFN) --
          ; Returns 1 if bill IBIFN has any purch services
         N IBZ,IBXDATA,IBXSAVE,Z
         S IBZ=0
         D F^IBCEF("N-HCFA 1500 PROCEDURES",,,IBIFN)
         S Z=0 F  S Z=$O(IBXSAVE("BOX24",Z)) Q:'Z  I $P(IBXSAVE("BOX24",Z),U,11) S IBZ=1 Q
         Q IBZ
         ;
SEQBILL(IBIFN) --
          ; Returns the ien's of all bills in COB sequence for bill IBIFN
         ; Return value is "^" delimited: primary ien^secondary ien^tertiary ien
         N IBSEQ,Z
         S IBSEQ=$P($G(^DGCR(399,IBIFN,"M1")),U,5,7)
         S Z=$$COBN^IBCEF(IBIFN)
         I $P(IBSEQ,U,Z)="" S $P(IBSEQ,U,Z)=IBIFN
         Q IBSEQ
         ;
         ;IB*2.0*432/TAZ Added to take into account the line level providers.
GETPRV1(IBIFN,IBTYP,IBPRV) --
          ; Returns prov(s) of type(s) IBTYP for
         ;  bill ien IBIFN for TPJI display
         ;  IBTYP = prov types needed, separated by ',' or ALL
         ; 
         ; OUTPUT:
         ;  IBPRV array: IBPRV(level,type,ct)=name^current COB id^vp provider ien^cred
         ;
         N IB,IBCT,IBD,IBY,IBZ,IBMRAND,IBID,IBWNR,IBPNM,Z,IBPRTYP
         D F^IBCEF("N-CURRENT INS POLICY TYPE","IBZ",,IBIFN)
         S IBPRV=U_$G(IBZ),IBY=0
         D ALLIDS^IBCEFP(IBIFN,.IBXSAVE)
         S IBCT=0
         F  S IBCT=$O(IBXSAVE("PROVINF",IBIFN,"C",IBCT)) Q:'IBCT  D
         . S IBPRTYP=""
         . F  S IBPRTYP=$O(IBXSAVE("PROVINF",IBIFN,"C",IBCT,IBPRTYP)) Q:'IBPRTYP  D
         .. I IBTYP'="ALL",IBTYP'[IBPRTYP Q  ;Screen out unwanted providers
         .. N IBPRIEN,OBPRNM,IBCOBID
         .. S IBPRIEN=$P(IBXSAVE("PROVINF",IBIFN,"C",IBCT,IBPRTYP),U)
         .. S $P(IBPRV(1,IBCT,IBPRTYP),U,1)=$$EXPAND^IBTRE(399.0222,.02,IBPRIEN)
         .. S $P(IBPRV(1,IBCT,IBPRTYP),U,2)=IBXSAVE("PROVINF",IBIFN,"C",IBCT,IBPRTYP,"COBID")
         .. S $P(IBPRV(1,IBCT,IBPRTYP),U,3)=IBPRIEN
         .. S $P(IBPRV(1,IBCT,IBPRTYP),U,4)=$P(IBXSAVE("PROVINF",IBIFN,"C",IBCT,IBPRTYP,"NAME"),U,4)
         S IBCT=0
         F  S IBCT=$O(IBXSAVE("L-PROV",IBIFN,IBCT)) Q:'IBCT  D
         . S IBPRTYP=""
         . F  S IBPRTYP=$O(IBXSAVE("L-PROV",IBIFN,IBCT,"C",1,IBPRTYP)) Q:'IBPRTYP  D
         .. I IBTYP'="ALL",IBTYP'[IBPRTYP Q  ;Screen out unwanted providers
         .. N IBPRIEN
         .. S IBPRIEN=$P(IBXSAVE("L-PROV",IBIFN,IBCT,"C",1,IBPRTYP),U)
         .. S IBPRV(2,IBCT,IBPRTYP)=$$EXPAND^IBTRE(399.0222,.02,IBPRIEN)
         .. S $P(IBPRV(2,IBCT,IBPRTYP),U,2)=IBXSAVE("L-PROV",IBIFN,IBCT,"C",1,IBPRTYP,"COBID")
         .. S $P(IBPRV(2,IBCT,IBPRTYP),U,3)=IBPRIEN
         .. S $P(IBPRV(2,IBCT,IBPRTYP),U,4)=$P(IBXSAVE("L-PROV",IBIFN,IBCT,"C",1,IBPRTYP,"NAME"),U,4)
         Q
         ;/IB*2.0*592
RTYPOK(VAL,IBIFN) --
          ;sceen for field 399,285 Attachment Report Type - Check for a valid Report Type depending on Claim Type
         ; VAL = internal value of report type file#353.3
         ; IBIFN = file 399 ien
         ;
         N OK,IBBT
         S OK=0
         Q:VAL="" OK
         Q:'IBIFN OK
         S IBBT=$$FT^IBCEF(IBIFN) ;2 if CMS-1500, 3 if UB-04, 7 if J430D Dental
         I IBBT'=7 S:VAL'="P6" OK=1 Q OK  ;not a Dental Claim, periodontal charts not applicable
         ; following for Dental claims
         I "^B4^DA^DG^EB^OZ^P6^RB^RR^"[(U_VAL_U) S OK=1
         Q OK
         ; IB*2.0*592 end
         ;

*****   INDEX OF IBCEU   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   %DT          DATE+2~,DATE+4*
   DFN          TESTPT~,TESTPT+2
   DT           SPEC+4
   IB           GETPRV+11~,GETPRV+33*,GETPRV+35,GETPRV+39,GETPRV+40,GETPRV+44,GETPRV1+7~
   IB0          NEEDPRV+2~,NEEDPRV+3*,NEEDPRV+4
   IBALL        GETPRV+26~,GETPRV+27*,GETPRV+28,GETPRV+29,GETPRV+30
   IBBT         PRVOK+3~,PRVOK+8*,PRVOK+9,PRVOK+13,PRVOK+15,PRVOK+16,RTYPOK+4~,RTYPOK+8*,RTYPOK+9
   IBCOB        MAINPRV+1~,MAINPRV+3*,MAINPRV+6
   IBCOBID      GETPRV1+16~
   IBCRED       CRED+8~,CRED+9*,CRED+24*,CRED+28*,CREDQ+1,CREDQ+2*,CREDQ+3*,CREDQ+4
   IBCT         GETPRV+11~,GETPRV+33*,GETPRV+34*,GETPRV+39,GETPRV+40,GETPRV+44,GETPRV1+7~,GETPRV1+11*,GETPRV1+12*,GETPRV1+14
                GETPRV1+17,GETPRV1+18,GETPRV1+19,GETPRV1+20,GETPRV1+21,GETPRV1+22*,GETPRV1+23*,GETPRV1+25,GETPRV1+28,GETPRV1+29
                GETPRV1+30
                GETPRV1+31,GETPRV1+32
   IBD          GETPRV+11~,GETPRV+35*,GETPRV+36,GETPRV+37,GETPRV+38*,GETPRV+39,GETPRV+40,GETPRV+44,GETPRV1+7~
>> IBDR20       PRVOK+15
   IBDT         SPEC~,SPEC+4*,SPEC+5
   IBDTTM       ADMHR~,ADMHR+3
   IBFT         NEEDPRV+2~,NEEDPRV+4*,NEEDPRV+13,NEEDPRV+30,NEEDPRV+33,NEEDPRV+37,CKPROV+4~,CKPROV+5*,CKPROV+9
   IBID         GETPRV+11~,GETPRV+32*,GETPRV+38,GETPRV+39,GETPRV1+7~
   IBIFN        MAINPRV~,MAINPRV+2,MAINPRV+3,PRVOK~,PRVOK+6,PRVOK+8,PRVOK+15,PRVOK1~,PRVOK1+3,PRVOK1+4,CRED~,CRED+15,CRED+21
                CRED+22,CRED+23,CRED+24,CRED+26,CRED+27,CRED+28,GETPRV~,GETPRV+13,GETPRV+16,GETPRV+21,GETPRV+25,GETPRV+28,GETPRV+29
                GETPRV+30
                GETPRV+32,GETPRV+33,GETPRV+35,GETPRV+39,GETPRV+40,GETPRV+44,GETQ,NEEDPRV~,NEEDPRV+3,NEEDPRV+4,NEEDPRV+6,NEEDPRV+19
                NEEDPRV+30,NEEDPRV+33,CKPROV~,CKPROV+5,CKPROV+6,CKPROV+7,CKPROV+9,CKPROV+10,BCLASS~,BCLASS+2,ADMHR~,ADMHR+4,OLAB~
                OLAB+3
                PSRV~,PSRV+3,SEQBILL~,SEQBILL+3,SEQBILL+4,SEQBILL+5,GETPRV1~,GETPRV1+8,GETPRV1+10,GETPRV1+12,GETPRV1+14,GETPRV1+17
                GETPRV1+19,GETPRV1+21,GETPRV1+23,GETPRV1+25,GETPRV1+28,GETPRV1+30,GETPRV1+32,RTYPOK~,RTYPOK+7,RTYPOK+8
   IBINP        NEEDPRV+2~,NEEDPRV+4*,NEEDPRV+16,NEEDPRV+21,NEEDPRV+22
   IBL          OLAB+1~,OLAB+2*,OLAB+4*,OLAB+5
   IBLAB        OLAB+1~,OLAB+3*,OLAB+4
>> IBLNPRV      CRED+15,CRED+21,CRED+22,CRED+26
   IBMRAND      GETPRV+11~,GETPRV+16*,GETPRV+18,NEEDPRV+2~,NEEDPRV+6*,NEEDPRV+23,NEEDPRV+34,NEEDPRV+40,GETPRV1+7~
   IBPIEN       CRED~,CRED+22,CRED+23*,CRED+24,CRED+26,CRED+27*,CRED+28
   IBPNM        GETPRV+11~,GETPRV+37*,GETPRV+39,GETPRV1+7~
   IBPRIEN      GETPRV1+16~,GETPRV1+17*,GETPRV1+18,GETPRV1+20,GETPRV1+27~,GETPRV1+28*,GETPRV1+29,GETPRV1+31
>> IBPROCP      CRED+21,CRED+26,CRED+27,CRED+28
   IBPRTYP      GETPRV1+7~,GETPRV1+13*,GETPRV1+14*,GETPRV1+15,GETPRV1+17,GETPRV1+18,GETPRV1+19,GETPRV1+20,GETPRV1+21,GETPRV1+24*
                GETPRV1+25*,GETPRV1+26,GETPRV1+28,GETPRV1+29,GETPRV1+30,GETPRV1+31,GETPRV1+32
   IBPRV        MAINPRV+1~,MAINPRV+2,SPEC~,SPEC+5,SPEC+6,CRED~,CREDQ+1,CREDQ+2,CREDQ+3,GETPRV~,GETPRV+15*,GETQ,NEEDPRV~,GETPRV1~
                GETPRV1+9*
   IBPRV(       MAINPRV+4,MAINPRV+5,MAINPRV+6,GETPRV+20*,GETPRV+38,GETPRV+39*,GETPRV+40*,GETPRV+44*
   IBPRV(1      NEEDPRV+10*,GETPRV1+18*,GETPRV1+19*,GETPRV1+20*,GETPRV1+21*
   IBPRV(2      NEEDPRV+15*,NEEDPRV+20!,NEEDPRV+21*,NEEDPRV+22*,NEEDPRV+24*,GETPRV1+29*,GETPRV1+30*,GETPRV1+31*,GETPRV1+32*
   IBPRV(3      GETPRV+29*,NEEDPRV+30*,NEEDPRV+33*,NEEDPRV+35*
   IBPRV(4      GETPRV+21*,GETPRV+28*,NEEDPRV+39*,NEEDPRV+41*
   IBPRV(9      GETPRV+30*
   IBQ          MAINPRV+1~,MAINPRV+3*,MAINPRV+5*,MAINPRV+6*,MAINPRV+7,XFER~,XFER+4,XFER+7
   IBSEQ        SEQBILL+2~,SEQBILL+3*,SEQBILL+5*,SEQBILL+6
   IBSPEC       SPEC+3~,SPEC+5*,SPEC+6*,SPEC+7
   IBTOB        NEEDPRV+2~,NEEDPRV+4*,NEEDPRV+16
   IBTYP        CRED~,CRED+22,CRED+23,CRED+26,CRED+27,GETPRV~,GETPRV+27,GETPRV+28,GETPRV+29,GETPRV+30,GETPRV+33,GETQ,NEEDPRV~
                NEEDPRV+8,NEEDPRV+13,NEEDPRV+26,NEEDPRV+37,CKPROV~,CKPROV+6,GETPRV1~,GETPRV1+15,GETPRV1+26
   IBVAL        CKPROV~,CKPROV+10
   IBWNR        GETPRV+11~,GETPRV+32*,GETPRV+38,GETPRV1+7~
   IBXDATA      PSRV+1~
   IBXSAVE      PSRV+1~,GETPRV1+10
   IBXSAVE("BOX24" 
                PSRV+4
   IBXSAVE("L-PROV" 
                GETPRV1+23,GETPRV1+25,GETPRV1+28,GETPRV1+30,GETPRV1+32
   IBXSAVE("PROVINF" 
                GETPRV1+12,GETPRV1+14,GETPRV1+17,GETPRV1+19,GETPRV1+21
   IBY          GETPRV+11~,GETPRV+15*,GETPRV+33*,GETPRV+38,GETPRV+39,GETPRV+40,GETPRV+44,GETPRV1+7~,GETPRV1+9*
   IBZ          GETPRV+11~,GETPRV+15,GETPRV+33*,XFER+2~,XFER+3*,XFER+4*,XFER+7,PSRV+1~,PSRV+2*,PSRV+4*,PSRV+5,GETPRV1+7~,GETPRV1+9
   OBPRNM       GETPRV1+16~
   OK           PRVOK+3~,PRVOK+4*,PRVOK+5,PRVOK+6,PRVOK+10*,PRVOK+11*,PRVOK+12*,PRVOK+13*,PRVOK+15*,PRVOK+16,PRVOK+17*,PRVOK+18*
                PRVOK+19*,PRVOK+20*,PRVOK+21*,PRVOK+23,PRVOK1+1~,PRVOK1+2*,PRVOK1+4*,PRVOK1+5,CKPROV+4~,CKPROV+5*,CKPROV+9*
                CKPROV+11*
                CKPROV+12,RTYPOK+4~,RTYPOK+5*,RTYPOK+6,RTYPOK+7,RTYPOK+9*,RTYPOK+11*,RTYPOK+12
   R            CKPROV+4~
   TM           ADMHR+2~,ADMHR+3*,ADMHR+4*,ADMHR+5*,ADMHR+6
   U            TESTPT+2,MAINPRV+5,MAINPRV+6,SPEC+5,SPEC+6,CRED+24,CRED+28,CREDQ+2,CREDQ+3,GETPRV+15,GETPRV+28,GETPRV+29,GETPRV+30
                GETPRV+36,GETPRV+37,GETPRV+38,GETPRV+39,GETPRV+40,GETPRV+44,NEEDPRV+19,CKPROV+9,CKPROV+10,XFER+7,BCLASS+2,ADMHR+4
                OLAB+3
                PSRV+4,SEQBILL+3,SEQBILL+5,GETPRV1+9,GETPRV1+17,GETPRV1+18,GETPRV1+19,GETPRV1+20,GETPRV1+21,GETPRV1+28,GETPRV1+30
                GETPRV1+31,GETPRV1+32,RTYPOK+11
   VAL          PRVOK~,PRVOK+5,PRVOK+10,PRVOK+11,PRVOK+12,PRVOK+13,PRVOK+15,PRVOK+17,PRVOK+18,PRVOK+19,PRVOK+20,PRVOK+21,PRVOK1~
                PRVOK1+4,RTYPOK~,RTYPOK+6,RTYPOK+9,RTYPOK+11
   X            DATE~,DATE+3*,DATE+4*,DTQ
   Y            DATE+2~,DATE+4
   Z            MAINPRV+1~,MAINPRV+4*,MAINPRV+5,MAINPRV+6,GETPRV+11~,GETPRV+20*,GETPRV+41*,GETPRV+44,NEEDPRV+18~,NEEDPRV+19*
                CKPROV+4~,CKPROV+6*,CKPROV+7,CKPROV+9,CKPROV+10,XFER+2~,XFER+3*,XFER+4*,PSRV+1~,PSRV+4*,SEQBILL+2~,SEQBILL+4*
                SEQBILL+5,GETPRV1+7~

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399           PRVOK1+4,CRED+15,CRED+21,CRED+23,CRED+24,CRED+27,CRED+28,GETPRV+25,GETPRV+28,GETPRV+29,GETPRV+30,GETPRV+33
                       GETPRV+35,GETPRV+44,NEEDPRV+3,NEEDPRV+19,CKPROV+6,CKPROV+7,CKPROV+9,CKPROV+10,BCLASS+2,ADMHR+4,OLAB+3
                       SEQBILL+3
   ^DGCR(399.1         BCLASS+2
   ^DPT(               TESTPT+2
   ^IBA(355.93         SPEC+6,CREDQ+3
   ^TMP("DILIST"       XFER+4,XFER+6
   ^TMP("IBLIST"       XFER+4*,XFER+6*,XFER+7*

Naked Globals
   ^(           NEEDPRV+19
   ^("U1"       GETPRV+28,GETPRV+30
   ^("UF2"      GETPRV+29
   ^(0          CKPROV+9

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$BCLASS     ADMHR+4
   $$CRED       GETPRV+40
   CREDQ        CRED+15,CRED+21
   DTQ          DATE+3
   GETPRV       MAINPRV+2
   GETQ         GETPRV+25
   NEEDPRV      GETQ

External References
   ^%DT                DATE+4
   EN^DDIOL            PRVOK1+4
   $$TOB^IBCBB         NEEDPRV+4
   $$COBN^IBCEF        MAINPRV+3,GETPRV+32,SEQBILL+4
   $$FT^IBCEF          PRVOK+8,PRVOK1+3,GETPRV+21,NEEDPRV+4,NEEDPRV+30,NEEDPRV+33,CKPROV+5,RTYPOK+8
   $$INPAT^IBCEF       GETPRV+21,NEEDPRV+4,CKPROV+9
   F^IBCEF             GETPRV+13,PSRV+3,GETPRV1+8
   $$DEFID^IBCEF74     GETPRV+39,GETPRV+44
   ALLIDS^IBCEFP       GETPRV1+10
   $$FILTERP^IBCSC10H  PRVOK+15
   $$MCRONBIL^IBEFUNC  GETPRV+16
   $$WNRBILL^IBEFUNC   GETPRV+32,NEEDPRV+6
   $$EXPAND^IBTRE      GETPRV+37,GETPRV1+18,GETPRV1+29
   $$GET^XUA4A72       SPEC+5
   $$ESBLOCK^XUSESIG1  CREDQ+2

*****   END   *****


IBCEU1   * *  310 Lines,  14375 Bytes, Checksum: B117180629                                           Mar 20, 2019@15:10:13 page 15
              5469 bytes in comments
IBCEU1   ;ALB/TMP - EDI UTILITIES FOR EOB PROCESSING ;10-FEB-99
         ;;2.0;INTEGRATED BILLING;**137,155,296,349,371,432,473,547,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
CCOB1(IBIFN,NODE,SEQ,IBRSBTST) --
          ; Extract Claim level COB data
         ; for a bill IBIFN
         ; NODE = the file 361.1 node(s) to be returned, separated by commas
         ; SEQ = the specific insurance sequence you want returned.  If not =
         ;       1, 2, or 3, all are returned
         ; Returns IBXDATA(COB,n,node)  where COB = COB insurance sequence,
         ;  n is the entry number in file 361.1 and node is the node requested
         ;   = the requested node's data
         ; IBRSBTST=1, this indicates the claim is being resubmitted as a "TEST"
         ;             claim and should be used be the OUTPUT FORMATTER entries
         ;             to determine what COB information is going out. - IB*2*608 (vd)
         ;
         N IB,IBN,IBBILL,IBS,A,B,C,IBCURR,IBMRAF,Z,CSEQ
         ;
         K IBXDATA
         ;
         S:$G(NODE)="" NODE=1
         S IB=$P($G(^DGCR(399,IBIFN,"M1")),U,5,7)
         S IBCURR=$$COB^IBCEF(IBIFN)
         S CSEQ=$$COBN^IBCEF(IBIFN)
         ; ib*2.0*547 make sure you only set MRA flag if MRA on current sequence being checked
         ;S IBMRAF=$$MCRONBIL^IBEFUNC(IBIFN)
         S IBMRAF=$P($$MCRONBIL^IBEFUNC(IBIFN,$S(IBCURR="P":1,IBCURR="S":2,1:3)),U,2)
         ;
         S:"123"'[$G(SEQ) SEQ=""
         ;
         F B=1:1:3 S IBBILL=$P(IB,U,B) I IBBILL S C=0 F  S C=$O(^IBM(361.1,"B",IBBILL,C)) Q:'C  D
         . I '$$EOBELIG(C,IBMRAF,IBCURR) Q      ; eob not eligible for secondary claim
         . S IBS=$P($G(^IBM(361.1,C,0)),U,15)   ; insurance sequence
         . I +$G(IBRSBTST),((CSEQ=IBS)!(CSEQ<IBS)) Q   ; IB*2.0*608/vd (US2486) added to prevent COB Data from being put on Resubmit
          ted Claims for TEST.
         . I $S('$G(SEQ):1,1:SEQ=IBS) D
         .. F Z=1:1:$L(NODE,",") D
         ... S A=$P(NODE,",",Z)
         ... Q:A=""
         ... S IBN=$G(^IBM(361.1,C,A))
         ... ; Start IB*2.0*473 BI Added to null patient responsibility in OI1
         ... ; if the data is contained at the line level to be sent in LCOB.
         ... ; Perform the following for only OI1.19 using the dictionary 364.6 IEN.
         ... S:+$G(IBX0)=2204&($$LPREXIST(C))&(A=1) $P(IBN,U,2)=""
         ... ; End IB*2.0*473
         ... I $TR(IBN,U)'="" S IBXDATA(IBS,C,A)=IBN
         ;
         Q
         ;
CCAS1(IBIFN,SEQ,IBRSBTST) --
          ; Extract all MEDICARE COB claim level adjustment data
         ; for a bill IBIFN (subfile 361.11 in file 361.1)
         ; SEQ = the specific insurance sequence you want returned.  If not =
         ;       1, 2, or 3, all are returned
         ; Returns IBXDATA(COB,n)  where COB = COB insurance sequence,
         ;       n is the entry number in file 361.1 and
         ;       = the 0-node of the subfile entry (361.11)
         ;    and IBXDATA(COB,n,m) where m is a sequential # and
         ;                         = this level's 0-node
         ; IBRSBTST=1, this indicates the claim is being resubmitted as a "TEST"
         ;             claim and should be used be the OUTPUT FORMATTER entries
         ;             to determine what COB information is going out. - IB*2*608 (vd)
         N IB,IBA,IBS,IB0,IB00,IBBILL,B,C,D,E,CSEQ
         ;
         S IB=$P($G(^DGCR(399,IBIFN,"M1")),U,5,7)
         S:"123"'[$G(SEQ) SEQ=""
         S CSEQ=$$COBN^IBCEF(IBIFN)
         ;
         F B=1:1:3 S IBBILL=$P(IB,U,B) I IBBILL S C=0 F  S C=$O(^IBM(361.1,"B",IBBILL,C)) Q:'C  D
         . I '$$EOBELIG(C) Q      ; eob not eligible for secondary claim
         . S IBS=$P($G(^IBM(361.1,C,0)),U,15)   ; insurance sequence
         . I +$G(IBRSBTST),((CSEQ=IBS)!(CSEQ<IBS)) Q   ; IB*2.0*608/vd (US2486) added to prevent COB Data from being put on Resubmit
          ted Claims for TEST.
         . I $S('$G(SEQ):1,1:SEQ=IBS) D
         .. S (IBA,D)=0 F  S D=$O(^IBM(361.1,C,10,D)) Q:'D  S IB0=$G(^(D,0)) D
         ... S IBXDATA(IBS,D)=IB0
         ... S (IBA,E)=0
         ... F  S E=$O(^IBM(361.1,C,10,D,1,E)) Q:'E  S IB00=$G(^(E,0)) D
         .... S IBA=IBA+1
         .... I $TR(IB00,U)'="" S IBXDATA(IBS,D,IBA)=IB00
         ;
         Q
         ;
SEQ(A)   ; Translate sequence # A into corresponding letter representation
         S A=$E("PST",A)
         I $S(A'="":"PST"'[A,1:1) S A="P"
         Q A
         ;
EOBTOT(IBIFN,IBCOBN) --
          ; Total all EOB's for a bill's COB sequence
         ; Function returns the total of all EOB's for a specific COB seq
         ; IBIFN = ien of bill in file 399
         ; IBCOBN = the # of the COB sequence you want EOB/MRA total for (1-3)
         ;
         N Z,Z0,IBTOT
         S IBTOT=0
         I $O(^IBM(361.1,"ABS",IBIFN,IBCOBN,0)) D
         . ; Set up prior payment field here from MRA/EOB(s)
         . S (IBTOT,Z)=0
         . F  S Z=$O(^IBM(361.1,"ABS",IBIFN,IBCOBN,Z)) Q:'Z  D
         .. ; HD64841 IB*2*371 - total up the payer paid amounts
         .. S IBTOT=IBTOT+$P($G(^IBM(361.1,Z,1)),U,1)
         Q IBTOT
         ;
         ;
LCOBOUT(IBXSAVE,IBXDATA,COL) --
          ; Output the line adjustment reasons COB
         ;  line # data for an electronic claim
         ; IBXSAVE,IBXDATA = arrays holding formatter information for claim -
         ;                   pass by reference
         ; COL = the column in the 837 flat file being output for LCAS record
         N LINE,COBSEQ,RECCT,GRPCD,SEQ,RCCT,RCPC,DATA,RCREC,SEQLINE K IBXDATA
         S (LINE,RECCT)=0
         S RCPC=(COL#3) S:'RCPC RCPC=3
         S RCREC=$S(COL'<4:COL-1\3,1:0)
         ;S RCREC=$S(COL'<4:COL+5\6-1,1:0)
         F  S LINE=$O(IBXSAVE("LCOB",LINE)) Q:'LINE  D
         . S COBSEQ=0
         . F  S COBSEQ=$O(IBXSAVE("LCOB",LINE,"COB",COBSEQ)) Q:'COBSEQ  S SEQLINE=0 F  S SEQLINE=$O(IBXSAVE("LCOB",LINE,"COB",COBSEQ
          ,SEQLINE)) Q:'SEQLINE  S GRPCD="" F  S GRPCD=$O(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE,GRPCD)) Q:GRPCD=""  D
         .. S RECCT=RECCT+1
         .. ;IB*2.0*432/TAZ Added payer sequence in piece 22 of LCAS record (parameter Z)
         .. I COL="Z" S IBXDATA(RECCT)=$E("PST",COBSEQ) I RECCT>1 D ID^IBCEF2(RECCT,"LCAS")
         .. I COL=2 S IBXDATA(RECCT)=LINE,DATA=LINE D:RECCT>1 ID^IBCEF2(RECCT,"LCAS")
         .. I COL=3 S IBXDATA(RECCT)=$TR(GRPCD," ")
         .. S (SEQ,RCCT)=0
         .. F  S SEQ=$O(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE,GRPCD,SEQ)) Q:'SEQ  I $TR($G(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLI
          NE,GRPCD,SEQ)),U)'="" D
         ... S RCCT=RCCT+1
         ... Q:COL'<4&(RCCT'=RCREC)&(RCCT'>6)
         ... S DATA=$S(COL=2:LINE,COL=3:$TR(GRPCD," "),1:$P($G(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE,GRPCD,SEQ)),U,RCPC))
         ... I COL'<4,RCCT=RCREC S:DATA'="" IBXDATA(RECCT)=DATA Q
         ... I RCCT>6 S RCCT=1,RECCT=RECCT+1 D:COL=2 ID^IBCEF2(RECCT,"LCAS") I DATA'="",$S(COL'>3:1,1:RCCT=RCREC) S IBXDATA(RECCT)=D
          ATA
         Q
         ;
CCOBOUT(IBXSAVE,IBXDATA,COL) --
          ; Output the claim adjustment reasons COB
         ;  data for an electronic claim
         ; IBXSAVE,IBXDATA = arrays holding formatter information for claim -
         ;                   pass by reference
         ; COL = the column in the 837 flat file being output for CCAS record
         N COBSEQ,RECCT,GRPSEQ,SEQ,RCPC,RCCT,RCREC,DATA K IBXDATA
         S RECCT=0
         S RCPC=(COL#3) S:'RCPC RCPC=3
         S RCREC=$S(COL'<4:COL+5\6-1,1:0)
         S COBSEQ=0
         F  S COBSEQ=$O(IBXSAVE("CCAS",COBSEQ)) Q:'COBSEQ  S GRPSEQ="" F  S GRPSEQ=$O(IBXSAVE("CCAS",COBSEQ,GRPSEQ)) Q:GRPSEQ=""  D
         . S RECCT=RECCT+1
         . I COL=2 S IBXDATA(RECCT)=COBSEQ D:RECCT>1 ID^IBCEF2(RECCT,"CCAS")
         . I COL=3 S IBXDATA(RECCT)=$P($G(IBXSAVE("CCAS",COBSEQ,GRPSEQ)),U)
         . S (SEQ,RCCT)=0
         . F  S SEQ=$O(IBXSAVE("CCAS",COBSEQ,GRPSEQ,SEQ)) Q:'SEQ  I $TR($G(IBXSAVE("CCAS",COBSEQ,GRPSEQ,SEQ)),U)'="" D
         .. S RCCT=RCCT+1
         .. Q:COL'<4&(RCCT'=RCREC)&(RCCT'>6)
         .. S DATA=$S(COL=2:COBSEQ,COL=3:$P($G(IBXSAVE("CCAS",COBSEQ,GRPSEQ)),U),1:$P($G(IBXSAVE("CCAS",COBSEQ,GRPSEQ,SEQ)),U,RCPC))
         .. I COL'<4,RCCT=RCREC S:DATA'="" IBXDATA(RECCT)=DATA Q
         .. I RCCT>6 S RCCT=1,RECCT=RECCT+1 D:COL=2 ID^IBCEF2(RECCT,"CCAS") I DATA'="",$S(COL'>3:1,1:RCCT=RCREC) S IBXDATA(RECCT)=DA
          TA
         Q
         ;
COBOUT(IBXSAVE,IBXDATA,CL) --
          ; build LCOB segment data
         ; The IBXSAVE array used here is built by INS-2, then LCOB-1.9
         ; This is basically the 361.115, but all the piece numbers here in this
         ; local array are one higher than the pieces in subfile 361.115.
         N Z,M,N,P,PCCL
         S (N,Z)=0
         F  S Z=$O(IBXSAVE("LCOB",Z)) Q:'Z  D
         . S M=0 F  S M=$O(IBXSAVE("LCOB",Z,"COB",M)) Q:'M  D
         .. S P=0 F  S P=$O(IBXSAVE("LCOB",Z,"COB",M,P)) Q:'P  D
         ... S N=N+1
         ... I CL="Z" S IBXDATA(N)=$E("PST",M) Q
         ... S PCCL=$P($G(IBXSAVE("LCOB",Z,"COB",M,P)),U,CL)
         ... ;IB*2.0*432/TAZ - If the revenue code is blank for the EOB get it from the Primary Level
         ... I PCCL="",CL=11 S PCCL=$P($G(IBXSAVE("LCOB",Z)),U)
         ... S:PCCL'="" IBXDATA(N)=PCCL
         Q
         ;
         ;IB*2.0*432/TAZ - XCOBOUT is the original code which did not capture all the LCOB records.
XCOBOUT(IBXSAVE,IBXDATA,CL) --
          ; build LCOB segment data
         ; The IBXSAVE array used here is built by INS-2, then LCOB-1.9
         ; This is basically the 361.115, but all the piece numbers here in this
         ; local array are one higher than the pieces in subfile 361.115.
         N Z,M,N,P,PCCL
         S (N,Z,P)=0 F  S Z=$O(IBXSAVE("LCOB",Z)) Q:'Z  D
         . S N=N+1
         . S M=$O(IBXSAVE("LCOB",Z,"COB",""),-1) Q:'M
         . S P=$O(IBXSAVE("LCOB",Z,"COB",M,""),-1) Q:'P
         . ;IB*2.0*432/TAZ Added Payer Sequence to piece 18 of the LCOB record
         . I CL="Z" S IBXDATA(N)=$E("PST",M) Q
         . S PCCL=$P($G(IBXSAVE("LCOB",Z,"COB",M,P)),U,CL)
         . S:PCCL'="" IBXDATA(N)=PCCL
         . Q
         Q
         ;
COBPYRID(IBXIEN,IBXSAVE,IBXDATA) --
          ; cob insurance company payer id
         N CT,N,NUM,Z
         K IBXDATA
         I '$D(IBXSAVE("LCOB")) G COBPYRX
         ;
         ;IB*2.0*432/TAZ - Replaced following code with loop to insure that all LCOB records have the Payer ID
         ;D ALLPAYID^IBCEF2(IBXIEN,.NUM,1)
         ;S NUM=$G(NUM(1))
         ;S NUM=$E(NUM_$J("",5),1,5)
         ;S (CT,N)=0
         ;F  S N=$O(IBXSAVE("LCOB",N)) Q:'N  S CT=CT+1,IBXDATA(CT)=NUM
         ;
         D ALLPAYID^IBCEF2(IBXIEN,.NUM)
         S (CT,N)=0
         F  S N=$O(IBXSAVE("LCOB",N)) Q:'N  D
         . S Z=0
         . F  S Z=$O(IBXSAVE("LCOB",N,"COB",Z)) Q:'Z  D
         .. S CT=CT+1,IBXDATA(CT)=$G(NUM(Z))
COBPYRX  ;
         Q
         ;
EOBELIG(IBEOB,IBMRAF,IBCURR) --
          ; EOB eligibility for secondary claim
         ; Function to decide if EOB entry in file 361.1 (ien=IBEOB) is
         ; eligible to be included for secondary claim creation process
         ; The EOB is not eligible if the review status is not 3, or if there
         ; is no insurance sequence indicator, or if the EOB has been DENIED
         ; and the patient responsibility for that EOB is $0 and that EOB is
         ; not a split EOB.  Split EOB's need to be included (IB*2*371).
         ;
         ; 432 - added new flag IBMRAF to indicate if we need to check only MRA's or all EOB's
         ; IBMRAF = 1 if only need MRA EOB's
         ;
         NEW ELIG,IBDATA,PTRESP
         S ELIG=0
         ; IB*2.0*432/TAZ Get current Payer sequence if not passed in.
         I '$G(IBCURR) S IBCURR=$$COB^IBCEF(IBIFN)
         I '$G(IBEOB) G EOBELIGX
         S IBDATA=$G(^IBM(361.1,IBEOB,0))
         I $G(IBMRAF)=1,$P(IBDATA,U,4)'=1 G EOBELIGX      ; Only MRA EOB's for now if flag = 1
         I $D(^IBM(361.1,IBEOB,"ERR")) G EOBELIGX     ; filing error
         I $P(IBDATA,U,16)'=3 G EOBELIGX     ; review status - accepted-complete
         I '$P(IBDATA,U,15) G EOBELIGX       ; insurance sequence must exist
         ; IB*2.0*432/TAZ Don't send EOB data for current payer
         I $P(IBDATA,U,15)=IBCURR G EOBELIGX ; Don't send EOB data for current payer (this is for retransmits)
         S PTRESP=$P($G(^IBM(361.1,IBEOB,1)),U,2)     ; Pt Resp Amount for 1500s
         I $$FT^IBCEF(+IBDATA)=3 S PTRESP=$$PTRESPI^IBCECOB1(IBEOB)  ; for UBs
         I PTRESP'>0,$P(IBDATA,U,13)=2,'$$SPLIT^IBCEMU1(IBEOB) G EOBELIGX     ; Denied & No Pt. Resp. & not a split MRA
         ;
         S ELIG=1
EOBELIGX ;
         Q ELIG
         ;
EOBCNT(IBIFN) --
          ; This function counts up the number of EOBs that are eligible
         ; for the secondary claim creation process for a given bill#.
         NEW CNT,IEN
         S (CNT,IEN)=0
         F  S IEN=$O(^IBM(361.1,"B",+$G(IBIFN),IEN)) Q:'IEN  D
         . I $$EOBELIG(IEN) S CNT=CNT+1
         . Q
EOBCNTX  ;
         Q CNT
         ;
LPTRESP(IBIFN,IBXSAVE,IBXDATA,CL) --
           ; Line level patient responsibility.
         ; Added with IB*2.0*473 BI
         N IBPTZ,IBPTM,IBPTP,IBPTPR,IBPRDATA,IBPTCNT
         S:'$D(CL) CL=17
         S IBPTCNT=0
         S IBPTZ=0 F  S IBPTZ=$O(IBXSAVE("LCOB",IBPTZ)) Q:'IBPTZ  D
         . S IBPTM=0 F  S IBPTM=$O(IBXSAVE("LCOB",IBPTZ,"COB",IBPTM)) Q:'IBPTM  D
         .. S IBPTP=0 F  S IBPTP=$O(IBXSAVE("LCOB",IBPTZ,"COB",IBPTM,IBPTP)) Q:'IBPTP  D
         ... S IBPTCNT=IBPTCNT+1
         ... I $$CHKCCOB1(IBIFN,IBPTM) S IBXDATA(IBPTCNT)="" Q
         ... I CL=16 S IBXDATA(IBPTCNT)="EAF" Q
         ... S IBXDATA(IBPTCNT)=0
         ... S IBPTPR=0 F  S IBPTPR=$O(IBXSAVE("LCOB",IBPTZ,"COB",IBPTM,IBPTP,"PR",IBPTPR)) Q:'IBPTPR  D
         .... S IBPRDATA=$G(IBXSAVE("LCOB",IBPTZ,"COB",IBPTM,IBPTP,"PR",IBPTPR))
         .... I +IBPRDATA S IBXDATA(IBPTCNT)=IBXDATA(IBPTCNT)+$P(IBPRDATA,U,2)
         ... S IBXDATA(IBPTCNT)=$$DOLLAR^IBCEFG1(IBXDATA(IBPTCNT))
         Q
         ;
LPREXIST(EOBIEN) --
           ; Tests to see if Line Level Patient Responsibility Segments exists.
         ; Added with IB*2.0*473 BI
         N CL,CAS,PR,PRSEQ,PRZ,RESULT
         S RESULT=0
         Q:'$G(EOBIEN) RESULT
         S CL=0 F  S CL=$O(^IBM(361.1,EOBIEN,15,CL)) Q:+CL=0  D
         . S CAS=0 F  S CAS=$O(^IBM(361.1,EOBIEN,15,CL,CAS)) Q:+CAS=0  D
         .. S PR=$O(^IBM(361.1,EOBIEN,15,CL,CAS,"B","PR",0)) Q:+PR=0
         .. S PRSEQ=0 F  S PRSEQ=$O(^IBM(361.1,EOBIEN,15,CL,CAS,PR,1,PRSEQ)) Q:+PRSEQ=0  D
         ... S PRZ=$G(^IBM(361.1,EOBIEN,15,CL,CAS,PR,1,PRSEQ,0)) Q:'+PRZ
         ... S RESULT=1
         Q RESULT
         ;
CHKCCOB1(IBIFN,IBS) --
           ; Test to see if Patient Responsibility pieces should be included
         ; Added with IB*2.0*473 BI
         N RESULTS,IBXDATA,EOBIEN
         S RESULTS=1
         ; INPUTS:  IBIFN - BILL/CLAIM INTERNAL NUMBER
         ;          IBS   - INSURANCE SEQUENCE NUMBER
         ; RETURNS: 0     - IF LCOB RECORDS ARE TO BE INCLUDED
         ;          1     - IF LCOB RECORDS SHOULD NOT BE INCLUDED
         D CCOB1(IBIFN,0,IBS)
         S EOBIEN=$O(IBXDATA(IBS,0))
         S RESULT='$$LPREXIST(EOBIEN)
         Q RESULT
         ;
         ;/IB*2*608 (vd) (US2486) - Added this module of code to be referenced by the Output Formatter.
CKCOBTST(IBXIEN,IBXSAVE,Z0,Z,IBRSBTST) --
           ; Check Primary, Secondary & Tertiary COBS for Claims Resubmitted as Test.
         ; INPUT:  IBXIEN   - Current Claim number
         ;         IBXSAVE  - Array containing current claim COB data.
         ;         Z0       - Will equal "INPT", "OUTPT" or "RX"
         ;         Z        - Is the LINE
         N A,CURSEQ,XX
         I '+$G(IBRSBTST) M IBXSAVE("LCOB",Z)=IBXSAVE(Z0,Z) Q  ; Only concerned with Claims that are Resubmitted as Test.
         S A="",CURSEQ=$$COBN^IBCEF(IBXIEN)
         ; With the line below, ideally, we want to merge all of IBXSAVE(Z0,Z) into IBXSAVE("LCOB",Z),
         ; but the COB node should be handled separately for the current sequence.
         S IBXSAVE("LCOB",Z)=IBXSAVE(Z0,Z)
         S XX="" F  S XX=$O(IBXSAVE(Z0,Z,XX)) Q:XX=""  I XX'="COB" M IBXSAVE("LCOB",Z,XX)=IBXSAVE(Z0,Z,XX)
         ; Now handle the COB node for the current sequence.
         F  S A=$O(IBXSAVE(Z0,Z,"COB",A)) Q:A=""  D   ; Only want to merge those COBS that are previous to the current
         . I (CURSEQ=A)!(CURSEQ<A) Q   ; Only want to merge those COBS that are previous to the current sequence.
         . M IBXSAVE("LCOB",Z,"COB",A)=IBXSAVE(Z0,Z,"COB",A)
         Q
         ;

*****   INDEX OF IBCEU1   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   A            CCOB1+12~,CCOB1+32*,CCOB1+33,CCOB1+34,CCOB1+38,CCOB1+40,SEQ~,SEQ+1*,SEQ+2*,SEQ+3,CKCOBTST+5~,CKCOBTST+7*
                CKCOBTST+13*,CKCOBTST+14,CKCOBTST+15
   B            CCOB1+12~,CCOB1+26*,CCAS1+12~,CCAS1+18*
   C            CCOB1+12~,CCOB1+26*,CCOB1+27,CCOB1+28,CCOB1+34,CCOB1+38,CCOB1+40,CCAS1+12~,CCAS1+18*,CCAS1+19,CCAS1+20,CCAS1+23
                CCAS1+26
   CAS          LPREXIST+2~,LPREXIST+6*,LPREXIST+7,LPREXIST+8,LPREXIST+9
   CL           COBOUT~,COBOUT+10,COBOUT+11,COBOUT+13,XCOBOUT~,XCOBOUT+10,XCOBOUT+11,LPTRESP~,LPTRESP+3*,LPTRESP+10,LPREXIST+2~
                LPREXIST+5*,LPREXIST+6,LPREXIST+7,LPREXIST+8,LPREXIST+9
   CNT          EOBCNT+2~,EOBCNT+3*,EOBCNT+5*,EOBCNTX+1
   COBSEQ       LCOBOUT+5~,LCOBOUT+11*,LCOBOUT+12*,LCOBOUT+15,LCOBOUT+19,LCOBOUT+22,CCOBOUT+5~,CCOBOUT+9*,CCOBOUT+10*,CCOBOUT+12
                CCOBOUT+13,CCOBOUT+15,CCOBOUT+18
   COL          LCOBOUT~,LCOBOUT+7,LCOBOUT+8,LCOBOUT+15,LCOBOUT+16,LCOBOUT+17,LCOBOUT+21,LCOBOUT+22,LCOBOUT+23,LCOBOUT+24,CCOBOUT~
                CCOBOUT+7,CCOBOUT+8,CCOBOUT+12,CCOBOUT+13,CCOBOUT+17,CCOBOUT+18,CCOBOUT+19,CCOBOUT+20
   CSEQ         CCOB1+12~,CCOB1+19*,CCOB1+29,CCAS1+12~,CCAS1+16*,CCAS1+21
   CT           COBPYRID+1~,COBPYRID+13*,COBPYRID+17*
   CURSEQ       CKCOBTST+5~,CKCOBTST+7*,CKCOBTST+14
   D            CCAS1+12~,CCAS1+23*,CCAS1+24,CCAS1+26,CCAS1+28
   DATA         LCOBOUT+5~,LCOBOUT+16*,LCOBOUT+22*,LCOBOUT+23,LCOBOUT+24,CCOBOUT+5~,CCOBOUT+18*,CCOBOUT+19,CCOBOUT+20
   E            CCAS1+12~,CCAS1+25*,CCAS1+26*
   ELIG         EOBELIG+11~,EOBELIG+12*,EOBELIG+27*,EOBELIGX+1
   EOBIEN       LPREXIST~,LPREXIST+4,LPREXIST+5,LPREXIST+6,LPREXIST+7,LPREXIST+8,LPREXIST+9,CHKCCOB1+2~,CHKCCOB1+9*,CHKCCOB1+10
   GRPCD        LCOBOUT+5~,LCOBOUT+12*,LCOBOUT+17,LCOBOUT+19,LCOBOUT+22
   GRPSEQ       CCOBOUT+5~,CCOBOUT+10*,CCOBOUT+13,CCOBOUT+15,CCOBOUT+18
   IB           CCOB1+12~,CCOB1+17*,CCOB1+26,CCAS1+12~,CCAS1+14*,CCAS1+18
   IB0          CCAS1+12~,CCAS1+23*,CCAS1+24
   IB00         CCAS1+12~,CCAS1+26*,CCAS1+28
   IBA          CCAS1+12~,CCAS1+23*,CCAS1+25*,CCAS1+27*,CCAS1+28
   IBBILL       CCOB1+12~,CCOB1+26*,CCAS1+12~,CCAS1+18*
   IBCOBN       EOBTOT~,EOBTOT+7,EOBTOT+10
   IBCURR       CCOB1+12~,CCOB1+18*,CCOB1+22,CCOB1+27,EOBELIG~,EOBELIG+14*,EOBELIG+22
   IBDATA       EOBELIG+11~,EOBELIG+16*,EOBELIG+17,EOBELIG+19,EOBELIG+20,EOBELIG+22,EOBELIG+24,EOBELIG+25
   IBEOB        EOBELIG~,EOBELIG+15,EOBELIG+16,EOBELIG+18,EOBELIG+23,EOBELIG+24,EOBELIG+25
   IBIFN        CCOB1~,CCOB1+17,CCOB1+18,CCOB1+19,CCOB1+22,CCAS1~,CCAS1+14,CCAS1+16,EOBTOT~,EOBTOT+7,EOBTOT+10,EOBELIG+14,EOBCNT~
                EOBCNT+4,LPTRESP~,LPTRESP+9,CHKCCOB1~,CHKCCOB1+8
   IBMRAF       CCOB1+12~,CCOB1+22*,CCOB1+27,EOBELIG~,EOBELIG+17
   IBN          CCOB1+12~,CCOB1+34*,CCOB1+38*,CCOB1+40
   IBPRDATA     LPTRESP+2~,LPTRESP+13*,LPTRESP+14
   IBPTCNT      LPTRESP+2~,LPTRESP+4*,LPTRESP+8*,LPTRESP+9,LPTRESP+10,LPTRESP+11,LPTRESP+14,LPTRESP+15
   IBPTM        LPTRESP+2~,LPTRESP+6*,LPTRESP+7,LPTRESP+9,LPTRESP+12,LPTRESP+13
   IBPTP        LPTRESP+2~,LPTRESP+7*,LPTRESP+12,LPTRESP+13
   IBPTPR       LPTRESP+2~,LPTRESP+12*,LPTRESP+13
   IBPTZ        LPTRESP+2~,LPTRESP+5*,LPTRESP+6,LPTRESP+7,LPTRESP+12,LPTRESP+13
   IBRSBTST     CCOB1~,CCOB1+29,CCAS1~,CCAS1+21,CKCOBTST~,CKCOBTST+6
   IBS          CCOB1+12~,CCOB1+28*,CCOB1+29,CCOB1+30,CCOB1+40,CCAS1+12~,CCAS1+20*,CCAS1+21,CCAS1+22,CCAS1+24,CCAS1+28,CHKCCOB1~
                CHKCCOB1+8,CHKCCOB1+9
   IBTOT        EOBTOT+5~,EOBTOT+6*,EOBTOT+9*,EOBTOT+12*,EOBTOT+13
>> IBX0         CCOB1+38
   IBXDATA      CCOB1+14!,LCOBOUT~,LCOBOUT+5!,CCOBOUT~,CCOBOUT+5!,COBOUT~,XCOBOUT~,COBPYRID~,COBPYRID+2!,LPTRESP~,CHKCCOB1+2~
   IBXDATA(     CCOB1+40*,CCAS1+24*,CCAS1+28*,LCOBOUT+15*,LCOBOUT+16*,LCOBOUT+17*,LCOBOUT+23*,LCOBOUT+24*,CCOBOUT+12*,CCOBOUT+13*
                CCOBOUT+19*,CCOBOUT+20*,COBOUT+10*,COBOUT+14*,XCOBOUT+10*,XCOBOUT+12*,COBPYRID+17*,LPTRESP+9*,LPTRESP+10*
                LPTRESP+11*
                LPTRESP+14*,LPTRESP+15*,CHKCCOB1+9
   IBXIEN       COBPYRID~,COBPYRID+12,CKCOBTST~,CKCOBTST+7
   IBXSAVE      LCOBOUT~,CCOBOUT~,COBOUT~,XCOBOUT~,COBPYRID~,LPTRESP~,CKCOBTST~
   IBXSAVE(     CKCOBTST+6,CKCOBTST+10,CKCOBTST+11,CKCOBTST+13,CKCOBTST+15
   IBXSAVE("CCAS" 
                CCOBOUT+10,CCOBOUT+13,CCOBOUT+15,CCOBOUT+18
   IBXSAVE("LCOB" 
                LCOBOUT+10,LCOBOUT+12,LCOBOUT+19,LCOBOUT+22,COBOUT+6,COBOUT+7,COBOUT+8,COBOUT+11,COBOUT+13,XCOBOUT+5,XCOBOUT+7
                XCOBOUT+8,XCOBOUT+11,COBPYRID+3,COBPYRID+14,COBPYRID+16,LPTRESP+5,LPTRESP+6,LPTRESP+7,LPTRESP+12,LPTRESP+13
                CKCOBTST+6*
                CKCOBTST+10*,CKCOBTST+11*,CKCOBTST+15*
   IEN          EOBCNT+2~,EOBCNT+3*,EOBCNT+4*,EOBCNT+5
   LINE         LCOBOUT+5~,LCOBOUT+6*,LCOBOUT+10*,LCOBOUT+12,LCOBOUT+16,LCOBOUT+19,LCOBOUT+22
   M            COBOUT+4~,COBOUT+7*,COBOUT+8,COBOUT+10,COBOUT+11,XCOBOUT+4~,XCOBOUT+7*,XCOBOUT+8,XCOBOUT+10,XCOBOUT+11
   N            COBOUT+4~,COBOUT+5*,COBOUT+9*,COBOUT+10,COBOUT+14,XCOBOUT+4~,XCOBOUT+5*,XCOBOUT+6*,XCOBOUT+10,XCOBOUT+12
                COBPYRID+1~,COBPYRID+13*,COBPYRID+14*,COBPYRID+16
   NODE         CCOB1~,CCOB1+16*,CCOB1+31,CCOB1+32
   NUM          COBPYRID+1~,COBPYRID+12
   NUM(         COBPYRID+17
   P            COBOUT+4~,COBOUT+8*,COBOUT+11,XCOBOUT+4~,XCOBOUT+5*,XCOBOUT+8*,XCOBOUT+11
   PCCL         COBOUT+4~,COBOUT+11*,COBOUT+13*,COBOUT+14,XCOBOUT+4~,XCOBOUT+11*,XCOBOUT+12
   PR           LPREXIST+2~,LPREXIST+7*,LPREXIST+8,LPREXIST+9
   PRSEQ        LPREXIST+2~,LPREXIST+8*,LPREXIST+9
   PRZ          LPREXIST+2~,LPREXIST+9*
   PTRESP       EOBELIG+11~,EOBELIG+23*,EOBELIG+24*,EOBELIG+25
   RCCT         LCOBOUT+5~,LCOBOUT+18*,LCOBOUT+20*,LCOBOUT+21,LCOBOUT+23,LCOBOUT+24*,CCOBOUT+5~,CCOBOUT+14*,CCOBOUT+16*,CCOBOUT+17
                CCOBOUT+19,CCOBOUT+20*
   RCPC         LCOBOUT+5~,LCOBOUT+7*,LCOBOUT+22,CCOBOUT+5~,CCOBOUT+7*,CCOBOUT+18
   RCREC        LCOBOUT+5~,LCOBOUT+8*,LCOBOUT+21,LCOBOUT+23,LCOBOUT+24,CCOBOUT+5~,CCOBOUT+8*,CCOBOUT+17,CCOBOUT+19,CCOBOUT+20
   RECCT        LCOBOUT+5~,LCOBOUT+6*,LCOBOUT+13*,LCOBOUT+15,LCOBOUT+16,LCOBOUT+17,LCOBOUT+23,LCOBOUT+24*,CCOBOUT+5~,CCOBOUT+6*
                CCOBOUT+11*,CCOBOUT+12,CCOBOUT+13,CCOBOUT+19,CCOBOUT+20*
   RESULT       LPREXIST+2~,LPREXIST+3*,LPREXIST+4,LPREXIST+10*,LPREXIST+11,CHKCCOB1+10*,CHKCCOB1+11
   RESULTS      CHKCCOB1+2~,CHKCCOB1+3*
   SEQ          CCOB1~,CCOB1+24*,CCOB1+30,CCAS1~,CCAS1+15*,CCAS1+22,LCOBOUT+5~,LCOBOUT+18*,LCOBOUT+19*,LCOBOUT+22,CCOBOUT+5~
                CCOBOUT+14*,CCOBOUT+15*,CCOBOUT+18
   SEQLINE      LCOBOUT+5~,LCOBOUT+12*,LCOBOUT+19,LCOBOUT+22
   U            CCOB1+17,CCOB1+22,CCOB1+26,CCOB1+28,CCOB1+38,CCOB1+40,CCAS1+14,CCAS1+18,CCAS1+20,CCAS1+28,EOBTOT+12,LCOBOUT+19
                LCOBOUT+22,CCOBOUT+13,CCOBOUT+15,CCOBOUT+18,COBOUT+11,COBOUT+13,XCOBOUT+11,EOBELIG+17,EOBELIG+19,EOBELIG+20
                EOBELIG+22,EOBELIG+23
                EOBELIG+25,LPTRESP+14
   XX           CKCOBTST+5~,CKCOBTST+11*
   Z            CCOB1+12~,CCOB1+31*,CCOB1+32,EOBTOT+5~,EOBTOT+9*,EOBTOT+10*,EOBTOT+12,COBOUT+4~,COBOUT+5*,COBOUT+6*,COBOUT+7
                COBOUT+8,COBOUT+11,COBOUT+13,XCOBOUT+4~,XCOBOUT+5*,XCOBOUT+7,XCOBOUT+8,XCOBOUT+11,COBPYRID+1~,COBPYRID+15*
                COBPYRID+16*,COBPYRID+17
                CKCOBTST~,CKCOBTST+6,CKCOBTST+10,CKCOBTST+11,CKCOBTST+13,CKCOBTST+15
   Z0           EOBTOT+5~,CKCOBTST~,CKCOBTST+6,CKCOBTST+10,CKCOBTST+11,CKCOBTST+13,CKCOBTST+15

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399           CCOB1+17,CCAS1+14
   ^IBM(361.1          CCOB1+26,CCOB1+28,CCOB1+34,CCAS1+18,CCAS1+20,CCAS1+23,CCAS1+26,EOBTOT+7,EOBTOT+10,EOBTOT+12,EOBELIG+16
                       EOBELIG+18,EOBELIG+23,EOBCNT+4,LPREXIST+5,LPREXIST+6,LPREXIST+7,LPREXIST+8,LPREXIST+9

Naked Globals
   ^(           CCAS1+23,CCAS1+26

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$CHKCCOB1   LPTRESP+9
   $$EOBELIG    CCOB1+27,CCAS1+19,EOBCNT+5
   $$LPREXIST   CCOB1+38,CHKCCOB1+10
   CCOB1        CHKCCOB1+8
   COBPYRX      COBPYRID+3
   EOBELIGX     EOBELIG+15,EOBELIG+17,EOBELIG+18,EOBELIG+19,EOBELIG+20,EOBELIG+22,EOBELIG+25

External References
   $$PTRESPI^IBCECOB1  EOBELIG+24
   $$COB^IBCEF         CCOB1+18,EOBELIG+14
   $$COBN^IBCEF        CCOB1+19,CCAS1+16,CKCOBTST+7
   $$FT^IBCEF          EOBELIG+24
   ALLPAYID^IBCEF2     COBPYRID+12
   ID^IBCEF2           LCOBOUT+15,LCOBOUT+16,LCOBOUT+24,CCOBOUT+12,CCOBOUT+20
   $$DOLLAR^IBCEFG1    LPTRESP+15
   $$SPLIT^IBCEMU1     EOBELIG+25
   $$MCRONBIL^IBEFUNC  CCOB1+22

*****   END   *****


IBCEU3   * *  312 Lines,  13665 Bytes, Checksum: B109583745                                           Mar 20, 2019@15:10:13 page 16
              4599 bytes in comments
IBCEU3   ;ALB/TMP - EDI UTILITIES FOR 1500 CLAIM FORM ;12/29/05 9:58am
         ;;2.0;INTEGRATED BILLING;**51,137,155,323,348,371,400,432,488,519,592,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
BOX19(IBIFN) --
          ; New Box 19 added for patch 488.  This is for workman's comp?
         ; This returns the Paperwork Attachment 
         ;     Information in the following format:
         ;   PWKNNFX12348907CHEY<3 Spaces>Next set if more than one on claim
         ; PWK is the qualifier for data, followed by the appropriate Report Type 
         ;Code, the appropriate Transmission Type Code, then the Attachment Control 
         ;Number.  Do not enter spaces between qualifiers and data.
         ;
         ; This information can be at either the Line Level or the Claim Level.
         ; Check all Lines first and print as many as possible - 71 characters 
         ; maximum.  Then check the Claim Level
         N IBRTP,LN,U8,IBBX19,IB19,DATA,I,DEL
         ;JWS;IB*2.0*592;add Dental Claim Note field to EDI 837D trans, rec UB1, field 19
         ;IA# 2056
         I $$FT^IBCEF(IBIFN)=7 Q $$GET1^DIQ(399,IBIFN_",",97)
         S IB19="",DEL="   ",LN=0
         ; Get rate type
         S IBRTP=$P($G(^DGCR(399,IBIFN,0)),U,7)
         ; Get data entered for box 19
         S IBBX19=$P($G(^DGCR(399,IBIFN,"UF31")),U,3)
         ; check the line Level first
         I IBRTP=11 D
         .F  S LN=$O(^DGCR(399,IBIFN,"CP",LN)) Q:LN=""  Q:LN'?.N  D
         ..S DATA=$G(^DGCR(399,IBIFN,"CP",LN,1))
         ..I $P(DATA,U,2)'="" S IB19=IB19_$S(IB19="":"",1:DEL)_$$FORMAT(DATA)
         .; check the Claim Level next
         .S DATA=""
         .S DATA=$G(^DGCR(399,IBIFN,"U8"))
         .I DATA'="" S IB19=IB19_$S(IB19="":"",1:DEL)_$$FORMAT(DATA)
         ; If any room left add user entered box 19 info
         I IBBX19'="",IB19'="",$L(IB19)<84 D
         .F I=1:1:$L(IBBX19,DEL) S DATA=$P(IBBX19,DEL,I) I DATA'="" D
         ..I $L(IB19_DEL_DATA)<84 S IB19=IB19_$S(IB19="":"",1:DEL)_DATA
         I IB19="",IBBX19'="" S IB19=IBBX19
         ;
         Q IB19
         ;
FORMAT(DATA) --
          ; format data for ouput
         N ART,OUT
         S ART=$P(DATA,U,2)
         S ART=$P(^IBE(353.3,ART,0),U,1)
         S OUT="PWK"_ART_$P(DATA,U,3)_$P(DATA,U,1)
         Q OUT
         ;
         ; BELOW NO LONGER USED -> BAA *488*
OBOX19(IBIFN) --
          ; THIS IS NOLONGER USED.  IT WAS REPLACE WITH ABOVE.
         ; Returns the text that should print in box 19 of the CMS-1500
         ;   for bill ien IBIFN
         ; Data is derived from a combo of data throughout
         ; the system and is limited to 80 characters.  The hierarchy for
         ; including data is as follows (until 80 characters have been used):
         ;   DATE LAST SEEN and REFERRING PHYSICIAN ID# (physical therapy)
         ;                      specialty codes = 025,065,073,067,048
         ;   LAST X-RAY DATE (chiropractic) specialty code = 35
         ;   HOMEBOUND INDICATOR (independent lab renders an EKG or obtains
         ;                        a specimen from a homebound patient)
         ;   NO ASSIGNMENT OF BENEFITS (if no assignment of benefits indicated)
         ;   Hearing aid testing (if applicable)
         ;   ATTENDING PHYSICIAN NOT HOSPICE EMPLOYEE (if applicable)
         ;   SPECIAL PROGRAM indicator if Medicare demonstration project for
         ;                   lung volume reduction surgery study is set
         ;   COMMENTS FOUND IN BOX 19 DATA FIELD FOR THE CLAIM
         ;   REMARKS FOUND IN BILL COMMENT FOR THE CLAIM, INCLUDING PROSTHETICS
         ;     DETAIL
         ;
         N IBGO,IBHOSP,IBID,IBLSDT,IBXDATA,IB19,IBHAID,IBXRAY,IBSPEC,Z,Z0,IBSUB,IBPRT,IBREM,IBSPI
         S IB19="",IBGO=1
         S IBSUB=$S('$G(^TMP("IBTX",$J,IBIFN)):"BOX24",1:"OUTPT")
         I $D(IBXSAVE(IBSUB)) N IBXSAVE
         S IBPRT=(IBSUB["24")
         ;
         S IBSPEC=$$BILLSPEC(IBIFN)
         G:'IBPRT NPRT
         ; Check for chiropractic services
         I $P($G(^DGCR(399,IBIFN,"U3")),U,5)'="" S:$P($G(^DGCR(399,IBIFN,"U3")),U,4)'="" IBGO=$$LENOK("Last X-ray: "_$TR($$DATE^IBCF
          2($P(^DGCR(399,IBIFN,"U3"),U,4))," ","/"),.IB19)
         G:'IBGO BOX19Q
         ;
         I "^25^65^73^67^48^"[(U_IBSPEC_U) D
         . K IBXDATA D F^IBCEF("N-DATE LAST SEEN",,,IBIFN)
         . I IBXDATA'="" S IBID="",IBLSDT=$$DATE^IBCF2(IBXDATA,0,1) D  I IBLSDT'="" S IBGO=$$LENOK("Date Last Seen:"_IBLSDT_IBID,.IB
          19)
         .. ; Only print if specialty is OT or PT or proc for routine foot care
         .. D F^IBCEF("N-REFERRING PROVIDER ID",,,IBIFN) I IBXDATA'="" S IBID=" By:"_IBXDATA
         ;
         G:'IBGO BOX19Q
         K IBXDATA D F^IBCEF("N-HOMEBOUND",,,IBIFN)
         I IBXDATA G:'$$LENOK("Homebound",.IB19) BOX19Q
         ;
         K IBXDATA D F^IBCEF("N-ASSIGN OF BENEFITS INDICATOR",,,IBIFN)
         I "Nn0"[IBXDATA&(IBXDATA'="") G:'$$LENOK("Patient refuses to assign benefits",.IB19) BOX19Q
         ;
         I '$D(IBXSAVE(IBSUB)) D B24^IBCEF3(.IBXSAVE,IBIFN,$S($G(IBNOSHOW)=0:0,1:1))
         ;
         S (IBHAID,IBHOSP,IBXRAY)=0
         ;
         S Z=0 F  S Z=$O(IBXSAVE(IBSUB,Z)) Q:'Z  D  G:'IBGO BOX19Q
         . I $D(IBXSAVE(IBSUB,Z,"RX")),$P(IBXSAVE(IBSUB,Z,"RX"),U,3)="" S IBGO=$$LENOK("NOC Drug:"_$P(IBXSAVE(IBSUB,Z,"RX"),U,2)_" U
          nits:"_+$P(IBXSAVE(IBSUB,Z,"RX"),U,6),.IB19)
         . ;
         . Q:'IBGO
         . I 'IBHAID,$P(IBXSAVE(IBSUB,Z),U,5)="V5010",$$COBCT^IBCEF(IBIFN)>1 D  Q
         .. S IBHAID=1,IBGO=$$LENOK("Testing for hearing aid",.IB19) Q
         . ;
         . Q:'IBGO
         . I 'IBHOSP,$P($G(IBXSAVE(IBSUB,Z,"AUX")),U,3) S IBHOSP=1,IBGO=$$LENOK("Attending physician,not hospice employee",.IB19) Q
         G:'IBGO BOX19Q
         K IBXDATA D F^IBCEF("N-SPECIAL PROGRAM",,,IBIFN)
         I IBXDATA=30 G:'$$LENOK("Medicare demonstration project for lung volume reduction surgery study",.IB19) BOX19Q
         ;
         ; SPECIAL PROGRAM INDICATOR field code.
         S IBSPI=$$GET1^DIQ(399,IBIFN_",",238,"E")
         I IBSPI'="" S IBGO=$$LENOK(IBSPI,.IB19)
         ;
         G:'IBGO BOX19Q
NPRT     K IBXDATA D F^IBCEF("N-HCFA 1500 BOX 19 RAW DATA",,,IBIFN)
         S IBREM=0
         I IBXDATA'="" G:'$$LENOK("Remarks:"_IBXDATA,.IB19) BOX19Q S IBREM=1
         K IBXDATA D F^IBCEF("N-BILL REMARKS",,,IBIFN)
         I IBXDATA'="" G:'$$LENOK($S('IBREM:"Remarks:",1:"")_IBXDATA,.IB19) BOX19Q
         ;
BOX19Q   Q IB19
         ; ALL OF THE ABOVE TO OBOX19 IS NO LONGER USED *488*
         ;
LENOK(IBDATA,IB19) --
          ; Add text IBDATA to box 19 string (IB19 passed by ref)
         ; Check length of box 19 data - truncate at 71 (max length)
         ; Returns 0 if max length reached or exceeded, otherwise, 1
         ; Changed 96 to 71 for new 1500 form
         N OK
         S OK=1
         S IB19=IB19_$S(IB19'="":" ",1:"")_$G(IBDATA)
         I $L(IB19)'<83 S OK=0,IB19=$E(IB19,1,71) G LENOKQ
LENOKQ   Q OK
         ;
ASK19(IBIFN) --
          ; Ask to display CMS-1500 box 19 data for current IBIFN
         ;  changed to 71 length.
         N DIR,DIC,X,Y,DIE,DR,Z
         S DIR(0)="YA",DIR("B")="NO",DIR("A")="DISPLAY THE FULL CMS-1500 BOX 19?: "
         D ^DIR
         K DIR("B")
         I Y=1 D
         .S Z=$$BOX19(IBIFN) W !!,?4,"19",?45,$E(Z,1,23) W:$L(Z)>23 !,?4,$E(Z,24,71),!
         .S DIR(0)="E",DIR("A")="Enter <RET> to Continue " W ! D ^DIR K DIR
         Q
         ;
ONLAB(IBIFN) --
          ; Functions returns 1 if the bill IBIFN is outside non-lab
         N IBP,IBPUR
         S IBP=0
         S IBPUR=$P($G(^DGCR(399,IBIFN,"U2")),U,11)
         I IBPUR,"13"[IBPUR S IBP=1
         Q IBP
         ;
TEXT24(FLD,IBXSAVE,IBXDATA,IBSUB) --
          ; Format the text line of box 24 by fld
         ; INPUT:
         ;   FLD = the letter of the field in box 24 (A-J)
         ;   IBXSAVE = passed by reference = extracted data for the box 24 lines
         ;   IBSUB = the subscript of the IBXSAVE array to use.
         ;           If null, use "BOX24"
         ; OUTPUT:
         ;   IBXDATA = passed by reference, set to the correct part of the
         ;             text that will print in the field's positions
         ;
         ; esg - 8/14/06 - modified for the new cms-1500 form - IB*2*348
         ;
         N Z,IBLINE,IBVAL,IBS,IBE,IBTEXT,IBAUX,IBDAT,IBZ,IBREN,IBRENQ,IBRENNPI,IBRENSID
         K IBXDATA
         S (IBLINE,Z)=0 S:$G(IBSUB)="" IBSUB="BOX24"
         ;
         I FLD="I"!(FLD="J") D   ; extract the Rendering provider data
         . I '$G(IBXIEN) Q       ; assume that the claim# exists
         . S IBREN=$$CFIDS^IBCEF77(IBXIEN)
         . S IBRENQ=$P(IBREN,U,1)    ; qual
         . S IBRENSID=$P(IBREN,U,2)  ; id
         . S IBRENNPI=$P(IBREN,U,3)  ; npi
         . Q
         ;
         F  S Z=$O(IBXSAVE(IBSUB,Z)) Q:'Z  D
         . S IBDAT=$G(IBXSAVE(IBSUB,Z))
         . S IBAUX=$G(IBXSAVE(IBSUB,Z,"AUX"))
         . S IBTEXT=$G(IBXSAVE(IBSUB,Z,"TEXT"))
         . S IBZ=$P(IBAUX,U,9)
         . I IBZ="" S IBZ="  "
         . S IBTEXT=IBZ_IBTEXT
         . ;
         . I $S($G(IBAC)=4:$S($D(IBXSAVE(IBSUB,Z,"ARX")):1,1:$D(IBXSAVE(IBSUB,Z,"A"))),$D(IBXSAVE(IBSUB,Z,"RX")):0,1:$G(IBNOSHOW)) S
           IBTEXT=""
         . ;
         . I FLD="AF" S IBVAL=$P(IBDAT,U),IBS=1,IBE=9 D   ; From date of service
         .. S IBVAL=$E(IBVAL,1,2)_" "_$E(IBVAL,3,4)_" "_$E(IBVAL,7,8)
         .. Q
         . ;
         . I FLD="AT" S IBVAL=$S($P(IBDAT,U,2):$P(IBDAT,U,2),1:$P(IBDAT,U)),IBS=10,IBE=18 D    ; To date of service
         .. S IBVAL=$E(IBVAL,1,2)_" "_$E(IBVAL,3,4)_" "_$E(IBVAL,7,8)
         .. Q
         . ;
         . I FLD="B" S IBVAL=$P(IBDAT,U,3),IBS=19,IBE=21   ; place of service
         . I FLD="C" S IBVAL=$S($P(IBDAT,U,13)=1:"Y",1:""),IBS=22,IBE=24   ; emergency indicator
         . I FLD="D" S IBVAL=$P(IBDAT,U,5),IBS=25,IBE=44 D   ; procedures and modifiers
         .. N M S M=$$MODLST^IBEFUNC($P(IBDAT,U,10))       ; modifier list
         .. S IBVAL=$$FO^IBCNEUT1(IBVAL,6)_"  "            ; procedure code
         .. S IBVAL=IBVAL_$$FO^IBCNEUT1($P(M,",",1),3)     ; mod#1
         .. S IBVAL=IBVAL_$$FO^IBCNEUT1($P(M,",",2),3)     ; mod#2
         .. S IBVAL=IBVAL_$$FO^IBCNEUT1($P(M,",",3),3)     ; mod#3
         .. S IBVAL=IBVAL_$$FO^IBCNEUT1($P(M,",",4),3)     ; mod#4
         .. Q
         . ;
         . I FLD="E" D
         .. N NUM,IN,OUT,LET
         .. S IN="1,2,3,4,5,6,7,8,9"
         .. S OUT="A,B,C,D,E,F,G,H,I"
         .. S IBVAL=$P(IBDAT,U,7)
         .. F I=1:1:4 S NUM=$P(IBVAL,",",I) D
         ... I NUM<10 S $P(LET,",",I)=$TR(NUM,IN,OUT)
         ... I NUM=10 S $P(LET,",",I)="J"
         ... I NUM=11 S $P(LET,",",I)="K"
         ... I NUM=12 S $P(LET,",",I)="L"
         .. S IBVAL=$TR(LET,","),IBS=45,IBE=48  ; diagnosis pointer
         . I FLD="F" S IBVAL=$P(IBDAT,U,8)*$P(IBDAT,U,9),IBS=49,IBE=57 D
         .. ; total charges  **519 returned field length back to 8, 9 is too long for BOX24F
         .. S IBVAL=$$DOL^IBCEF77(IBVAL,8)
         .. I $L(IBVAL)>8 S IBVAL=$E(IBVAL,$L(IBVAL)-7,$L(IBVAL))
         .. Q
         . ;
         . I FLD="G" S IBVAL=$S($P(IBDAT,U,12):$P(IBDAT,U,12),1:$P(IBDAT,U,9)),IBS=58,IBE=61 D
         .. ; days or units or anesthesia minutes
         .. S IBVAL=$J(+IBVAL,4)
         .. Q
         . ;
         . ; columns H,I,J don't have any free text supplemental information
         . ;
         . I FLD="H" D     ; epsdt family plan
         .. S IBVAL=$P(IBAUX,U,7),IBS=0,IBE=0,IBTEXT=""   ; line 1 blank
         .. I IBVAL S IBVAL="Y"
         .. Q
         . I FLD="I" D     ; ID qualifier for rendering provider
         .. S IBVAL="",IBS=1,IBE=2   ; line 2 blank
         .. S IBTEXT=$G(IBRENQ)      ; qualifier on line 1
         .. Q
         . I FLD="J" D     ; rendering provider ID and NPI
         .. S IBTEXT=$G(IBRENSID),IBS=1,IBE=11   ; secondary ID line 1
         .. S IBVAL=$G(IBRENNPI)                 ; NPI# line 2
         .. Q
         . ;
         . S IBLINE=IBLINE+1                      ; top line
         . S IBXDATA(IBLINE)=$E(IBTEXT,IBS,IBE)   ; text in shaded area (top)
         . S IBLINE=IBLINE+1             ; bottom line
         . S IBXDATA(IBLINE)=IBVAL       ; field value in unshaded area (bottom)
         . Q
         ;
         Q
         ;
LINSPEC(IBIFN) --
          ; Checks the specialities of line and claim level providers
         ; called from IBCBB2 to check for Chiro codes & IBCBB9 to check for 99's on Medicare
         ; Default = 99 if no valid SPEC code found for line and claim level provider
         ; Get rendering for professional, attending for institutional
         ; If multiple lines w/ rendering or attending, returns a string of spec codes
         N Z,IBSPEC,IBINS,IBDT,IBCP,IBSPC
         S IBSPC=""
         S IBDT=$P($G(^DGCR(399,+IBIFN,"U")),U,1)  ; use statement from date
         S IBINS=($$FT^IBCEF(IBIFN)=3)
         D GETPRV^IBCEU(IBIFN,"ALL",.IBPRV)
         S Z=$S('IBINS:3,1:4)
         ; check claim level
         I $G(IBPRV(Z,1))'="" D
         . I $P(IBPRV(Z,1),U,3) S IBSPEC=$$SPEC^IBCEU($P($G(IBPRV(Z,1)),U,3),IBDT) I IBSPEC'="" S IBSPC=IBSPC_U_IBSPEC Q
         . S Z0=+$O(^DGCR(399,IBIFN,"PRV","B",Z,0))
         . I Z0 S IBSPEC=$P($G(^DGCR(399,IBIFN,"PRV",Z0,0)),U,8) S:IBSPEC="" IBSPEC=99 S IBSPC=IBSPC_U_IBSPEC
         ; Check line level
         S IBCP=0 F  S IBCP=$O(^DGCR(399,IBIFN,"CP",IBCP)) Q:'IBCP  D
         .S Z0=+$O(^DGCR(399,IBIFN,"CP",IBCP,"LNPRV","B",Z,0))
         .I Z0 S IBSPEC=$P($G(^DGCR(399,IBIFN,"CP",IBCP,"LNPRV",Z0,0)),U,8) S:IBSPEC="" IBSPEC="99" S IBSPC=IBSPC_U_IBSPEC
         ;/IB*2*608 - vd (US3214) - modified the following line to allow for No Rendering Provider.
         ;S:IBSPC="" IBSPC=99
         I $$FT^IBCEF(IBIFN)'=2 S:IBSPC="" IBSPC=99
         Q IBSPC
         ;
BILLSPEC(IBIFN,IBPRV) --
          ;  Returns the specialty of the provider on bill IBIFN
         ; If IBPRV is supplied, returns the data for that provider, otherwise,
         ;  returns the specialty of the 'main/required' provider on the bill.
         ;  Default = 99 if no valid code found
         ; IBPRV = vp of provider (file 200 or 355.93)
         N Z,IBSPEC,IBINS,IBDT
         S IBSPEC="",IBPRV=$G(IBPRV)
         S IBDT=$P($G(^DGCR(399,+IBIFN,"U")),U,1)  ; use statement from date
         ;
         I $G(IBPRV) D  G SPECQ
         . S IBSPEC=$$SPEC^IBCEU(IBPRV,IBDT)
         ;
         ;Get rendering for professional, attending for institutional,
         S IBINS=($$FT^IBCEF(IBIFN)=3)
         D GETPRV^IBCEU(IBIFN,"ALL",.IBPRV)
         S Z=$S('IBINS:3,1:4)
         I $G(IBPRV(Z,1))'="" D
         . I $P(IBPRV(Z,1),U,3) S IBSPEC=$$SPEC^IBCEU($P($G(IBPRV(Z,1)),U,3),IBDT) Q:IBSPEC'=""
         . S Z0=+$O(^DGCR(399,IBIFN,"PRV","B",Z,0))
         . I Z0,$P($G(^DGCR(399,IBIFN,"PRV",Z0,0)),U,8)'="" S IBSPEC=$P(^(0),U,8)
         ;
SPECQ    I IBSPEC="" S IBSPEC="99"
         Q IBSPEC
         ;
CHAMPVA(IBIFN) --
          ; Returns 1 if the bill IBIFN has a CHAMPVA rate type
         Q $E($P($G(^DGCR(399.3,+$P($G(^DGCR(399,IBIFN,0)),U,7),0)),U),1,7)="CHAMPVA"
         ;
FAC(IBIFN) --
          ; Obsolete function.  Used by old output formatter field and data element N-RENDERING INSTITUTION
         Q ""
         ;
MCR24K(IBIFN,IBPRV) --
          ;Function returns MEDICARE id# for professional (CMS-1500) box 24k for bill IBIFN if appropriate
         ;*432/TAZ - Added IBPRV to allow circumvent the call to F^IBCEF("N-SPECIALTY CODE","IBZ",,IBIFN) in MCRSPEC^IBCEU4
         ;JWS;IB*2.0*592:Added dental form to check for compatibility
         ;Q $S($$FT^IBCEF(IBIFN)=2&$$MCRONBIL^IBEFUNC(IBIFN):"V"_$$MCRSPEC^IBCEU4(IBIFN,1,$G(IBPRV))_$P($$SITE^VASITE,U,3),1:"")
         Q $S(($$FT^IBCEF(IBIFN)=2)!($$FT^IBCEF(IBIFN)=7)&$$MCRONBIL^IBEFUNC(IBIFN):"V"_$$MCRSPEC^IBCEU4(IBIFN,1,$G(IBPRV))_$P($$SIT
          E^VASITE,U,3),1:"")
         ;

*****   INDEX OF IBCEU3   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   ART          FORMAT+1~,FORMAT+2*,FORMAT+3*,FORMAT+4
   DATA         BOX19+11~,BOX19+23*,BOX19+24,BOX19+26*,BOX19+27*,BOX19+28,BOX19+31*,BOX19+32,FORMAT~,FORMAT+2,FORMAT+4
   DEL          BOX19+11~,BOX19+15*,BOX19+24,BOX19+28,BOX19+31,BOX19+32
   DIC          ASK19+2~
   DIE          ASK19+2~
   DIR          ASK19+2~,ASK19+8!
   DIR("A"      ASK19+3*,ASK19+8*
   DIR("B"      ASK19+3*,ASK19+5!
   DIR(0        ASK19+3*,ASK19+8*
   DR           ASK19+2~
   FLD          TEXT24~,TEXT24+16,TEXT24+34,TEXT24+38,TEXT24+42,TEXT24+43,TEXT24+44,TEXT24+53,TEXT24+64,TEXT24+70,TEXT24+77
                TEXT24+81,TEXT24+85
   I            BOX19+11~,BOX19+31*,TEXT24+58*,TEXT24+59,TEXT24+60,TEXT24+61,TEXT24+62
   IB19         BOX19+11~,BOX19+15*,BOX19+24*,BOX19+28*,BOX19+30,BOX19+32*,BOX19+33*,BOX19+35,OBOX19+20~,OBOX19+21*,OBOX19+29
                OBOX19+34,OBOX19+40,OBOX19+43,OBOX19+50,OBOX19+54,OBOX19+57,OBOX19+60,OBOX19+64,NPRT+2,NPRT+4,BOX19Q,LENOK~
                LENOK+6*,LENOK+7*
>> IBAC         TEXT24+32
   IBAUX        TEXT24+12~,TEXT24+26*,TEXT24+28,TEXT24+78
   IBBX19       BOX19+11~,BOX19+19*,BOX19+30,BOX19+31,BOX19+33
   IBCP         LINSPEC+5~,LINSPEC+17*,LINSPEC+18,LINSPEC+19
   IBDAT        TEXT24+12~,TEXT24+25*,TEXT24+34,TEXT24+38,TEXT24+42,TEXT24+43,TEXT24+44,TEXT24+45,TEXT24+57,TEXT24+64,TEXT24+70
   IBDATA       LENOK~,LENOK+6
   IBDT         LINSPEC+5~,LINSPEC+7*,LINSPEC+13,BILLSPEC+5~,BILLSPEC+7*,BILLSPEC+10,BILLSPEC+17
   IBE          TEXT24+12~,TEXT24+34*,TEXT24+38*,TEXT24+42*,TEXT24+43*,TEXT24+44*,TEXT24+63*,TEXT24+64*,TEXT24+70*,TEXT24+78*
                TEXT24+82*,TEXT24+86*,TEXT24+91
   IBGO         OBOX19+20~,OBOX19+21*,OBOX19+29*,OBOX19+30,OBOX19+34*,OBOX19+38,OBOX19+49,OBOX19+50*,OBOX19+52,OBOX19+54*,OBOX19+56
                OBOX19+57*,OBOX19+58,OBOX19+64*,OBOX19+66
   IBHAID       OBOX19+20~,OBOX19+47*,OBOX19+53,OBOX19+54*
   IBHOSP       OBOX19+20~,OBOX19+47*,OBOX19+57*
   IBID         OBOX19+20~,OBOX19+34*,OBOX19+36*
   IBIFN        BOX19~,BOX19+14,BOX19+17,BOX19+19,BOX19+22,BOX19+23,BOX19+27,OBOX19~,OBOX19+22,OBOX19+26,OBOX19+29,OBOX19+33
                OBOX19+36,OBOX19+39,OBOX19+42,OBOX19+45,OBOX19+53,OBOX19+59,OBOX19+63,NPRT,NPRT+3,ASK19~,ASK19+7,ONLAB~,ONLAB+3
                LINSPEC~,LINSPEC+7
                LINSPEC+8,LINSPEC+9,LINSPEC+14,LINSPEC+15,LINSPEC+17,LINSPEC+18,LINSPEC+19,LINSPEC+22,BILLSPEC~,BILLSPEC+7
                BILLSPEC+13,BILLSPEC+14,BILLSPEC+18,BILLSPEC+19,CHAMPVA~,CHAMPVA+1,FAC~,MCR24K~,MCR24K+4
   IBINS        LINSPEC+5~,LINSPEC+8*,LINSPEC+10,BILLSPEC+5~,BILLSPEC+13*,BILLSPEC+15
   IBLINE       TEXT24+12~,TEXT24+14*,TEXT24+90*,TEXT24+91,TEXT24+92*,TEXT24+93
   IBLSDT       OBOX19+20~,OBOX19+34*
>> IBNOSHOW     OBOX19+45,TEXT24+32
   IBP          ONLAB+1~,ONLAB+2*,ONLAB+4*,ONLAB+5
   IBPRT        OBOX19+20~,OBOX19+24*,OBOX19+27
   IBPRV        LINSPEC+9,BILLSPEC~,BILLSPEC+6*,BILLSPEC+9,BILLSPEC+10,BILLSPEC+14,MCR24K~,MCR24K+4
   IBPRV(       LINSPEC+12,LINSPEC+13,BILLSPEC+16,BILLSPEC+17
   IBPUR        ONLAB+1~,ONLAB+3*,ONLAB+4
   IBREM        OBOX19+20~,NPRT+1*,NPRT+2*,NPRT+4
   IBREN        TEXT24+12~,TEXT24+18*,TEXT24+19,TEXT24+20,TEXT24+21
   IBRENNPI     TEXT24+12~,TEXT24+21*,TEXT24+87
   IBRENQ       TEXT24+12~,TEXT24+19*,TEXT24+83
   IBRENSID     TEXT24+12~,TEXT24+20*,TEXT24+86
   IBRTP        BOX19+11~,BOX19+17*,BOX19+21
   IBS          TEXT24+12~,TEXT24+34*,TEXT24+38*,TEXT24+42*,TEXT24+43*,TEXT24+44*,TEXT24+63*,TEXT24+64*,TEXT24+70*,TEXT24+78*
                TEXT24+82*,TEXT24+86*,TEXT24+91
   IBSPC        LINSPEC+5~,LINSPEC+6*,LINSPEC+13*,LINSPEC+15*,LINSPEC+19*,LINSPEC+22*,LINSPEC+23
   IBSPEC       OBOX19+20~,OBOX19+26*,OBOX19+32,LINSPEC+5~,LINSPEC+13*,LINSPEC+15*,LINSPEC+19*,BILLSPEC+5~,BILLSPEC+6*,BILLSPEC+10*
                BILLSPEC+17*,BILLSPEC+19*,SPECQ*,SPECQ+1
   IBSPI        OBOX19+20~,OBOX19+63*,OBOX19+64
   IBSUB        OBOX19+20~,OBOX19+22*,OBOX19+23,OBOX19+24,OBOX19+45,OBOX19+49,OBOX19+50,OBOX19+53,OBOX19+57,TEXT24~,TEXT24+14*
                TEXT24+24,TEXT24+25,TEXT24+26,TEXT24+27,TEXT24+32
   IBTEXT       TEXT24+12~,TEXT24+27*,TEXT24+30*,TEXT24+32*,TEXT24+78*,TEXT24+83*,TEXT24+86*,TEXT24+91
   IBVAL        TEXT24+12~,TEXT24+34*,TEXT24+35*,TEXT24+38*,TEXT24+39*,TEXT24+42*,TEXT24+43*,TEXT24+44*,TEXT24+46*,TEXT24+47*
                TEXT24+48*,TEXT24+49*,TEXT24+50*,TEXT24+57*,TEXT24+58,TEXT24+63*,TEXT24+64*,TEXT24+66*,TEXT24+67*,TEXT24+70*
                TEXT24+72*,TEXT24+78*
                TEXT24+79*,TEXT24+82*,TEXT24+87*,TEXT24+93
   IBXDATA      OBOX19+20~,OBOX19+33!,OBOX19+34,OBOX19+36,OBOX19+39!,OBOX19+40,OBOX19+42!,OBOX19+43,OBOX19+59!,OBOX19+60,NPRT!
                NPRT+2,NPRT+3!,NPRT+4,TEXT24~,TEXT24+13!
   IBXDATA(     TEXT24+91*,TEXT24+93*
>> IBXIEN       TEXT24+17,TEXT24+18
   IBXRAY       OBOX19+20~,OBOX19+47*
   IBXSAVE      OBOX19+23~,OBOX19+45,TEXT24~
   IBXSAVE(     OBOX19+23,OBOX19+45,OBOX19+49,OBOX19+50,OBOX19+53,OBOX19+57,TEXT24+24,TEXT24+25,TEXT24+26,TEXT24+27,TEXT24+32
   IBZ          TEXT24+12~,TEXT24+28*,TEXT24+29*,TEXT24+30
   IN           TEXT24+54~,TEXT24+55*,TEXT24+59
   LET          TEXT24+54~,TEXT24+59*,TEXT24+60*,TEXT24+61*,TEXT24+62*,TEXT24+63
   LN           BOX19+11~,BOX19+15*,BOX19+22*,BOX19+23
   M            TEXT24+45~*,TEXT24+47,TEXT24+48,TEXT24+49,TEXT24+50
   NUM          TEXT24+54~,TEXT24+58*,TEXT24+59,TEXT24+60,TEXT24+61,TEXT24+62
   OK           LENOK+4~,LENOK+5*,LENOK+7*,LENOKQ
   OUT          FORMAT+1~,FORMAT+4*,FORMAT+5,TEXT24+54~,TEXT24+56*,TEXT24+59
   U            BOX19+17,BOX19+19,BOX19+24,FORMAT+2,FORMAT+3,FORMAT+4,OBOX19+29,OBOX19+32,OBOX19+50,OBOX19+53,OBOX19+57,ONLAB+3
                TEXT24+19,TEXT24+20,TEXT24+21,TEXT24+28,TEXT24+34,TEXT24+38,TEXT24+42,TEXT24+43,TEXT24+44,TEXT24+45,TEXT24+57
                TEXT24+64
                TEXT24+70,TEXT24+78,LINSPEC+7,LINSPEC+13,LINSPEC+15,LINSPEC+19,BILLSPEC+7,BILLSPEC+17,BILLSPEC+19,CHAMPVA+1
                MCR24K+4
   U8           BOX19+11~
   X            ASK19+2~
   Y            ASK19+2~,ASK19+6
   Z            OBOX19+20~,OBOX19+49*,OBOX19+50,OBOX19+53,OBOX19+57,ASK19+2~,ASK19+7*,TEXT24+12~,TEXT24+14*,TEXT24+24*,TEXT24+25
                TEXT24+26,TEXT24+27,TEXT24+32,LINSPEC+5~,LINSPEC+10*,LINSPEC+12,LINSPEC+13,LINSPEC+14,LINSPEC+18,BILLSPEC+5~
                BILLSPEC+15*
                BILLSPEC+16,BILLSPEC+17,BILLSPEC+18
   Z0           OBOX19+20~,LINSPEC+14*,LINSPEC+15,LINSPEC+18*,LINSPEC+19,BILLSPEC+18*,BILLSPEC+19

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399           BOX19+17,BOX19+19,BOX19+22,BOX19+23,BOX19+27,OBOX19+29,ONLAB+3,LINSPEC+7,LINSPEC+14,LINSPEC+15,LINSPEC+17
                       LINSPEC+18,LINSPEC+19,BILLSPEC+7,BILLSPEC+18,BILLSPEC+19,CHAMPVA+1
   ^DGCR(399.3         CHAMPVA+1
   ^IBE(353.3          FORMAT+3
   ^TMP("IBTX"         OBOX19+22

Naked Globals
   ^(0          BILLSPEC+19

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$BILLSPEC   OBOX19+26
   $$BOX19      ASK19+7
   $$FORMAT     BOX19+24,BOX19+28
   $$LENOK      OBOX19+29,OBOX19+34,OBOX19+40,OBOX19+43,OBOX19+50,OBOX19+54,OBOX19+57,OBOX19+60,OBOX19+64,NPRT+2,NPRT+4
   BOX19Q       OBOX19+30,OBOX19+38,OBOX19+40,OBOX19+43,OBOX19+49,OBOX19+58,OBOX19+60,OBOX19+66,NPRT+2,NPRT+4
   LENOKQ       LENOK+7
   NPRT         OBOX19+27
   SPECQ        BILLSPEC+9

External References
   $$GET1^DIQ          BOX19+14,OBOX19+63
   ^DIR                ASK19+4,ASK19+8
   $$COBCT^IBCEF       OBOX19+53
   $$FT^IBCEF          BOX19+14,LINSPEC+8,LINSPEC+22,BILLSPEC+13,MCR24K+4
   F^IBCEF             OBOX19+33,OBOX19+36,OBOX19+39,OBOX19+42,OBOX19+59,NPRT,NPRT+3
   B24^IBCEF3          OBOX19+45
   $$CFIDS^IBCEF77     TEXT24+18
   $$DOL^IBCEF77       TEXT24+66
   $$SPEC^IBCEU        LINSPEC+13,BILLSPEC+10,BILLSPEC+17
   GETPRV^IBCEU        LINSPEC+9,BILLSPEC+14
   $$MCRSPEC^IBCEU4    MCR24K+4
   $$DATE^IBCF2        OBOX19+29,OBOX19+34
   $$FO^IBCNEUT1       TEXT24+46,TEXT24+47,TEXT24+48,TEXT24+49,TEXT24+50
   $$MCRONBIL^IBEFUNC  MCR24K+4
   $$MODLST^IBEFUNC    TEXT24+45
   $$SITE^VASITE       MCR24K+4

*****   END   *****


IBCEU5   * *  214 Lines,  9956 Bytes, Checksum: B88004916                                             Mar 20, 2019@15:10:13 page 17
              2058 bytes in comments
IBCEU5   ;ALB/TMP - EDI UTILITIES (continued) FOR CMS-1500 ;13-DEC-99
         ;;2.0;INTEGRATED BILLING;**51,137,232,348,349,432,592,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         Q
         ;
EXTCR(IBPRV) --
          ; Called by trigger on field .02 of file 399.0222
         ; Also called by trigger on field .02 of file 399.0404 (DEM;432).
         ; Function returns the first 3 digits of the provider's degree if
         ; a VA provider or the credentials in file 355.9 if non-VA provider
         ; IBPRV = vp to file 200 or 355.93
         Q $E($$CRED^IBCEU(IBPRV),1,3)
         ; 
FTPRV(IBIFN,NOASK) --
          ; If form type changes from UB-04 to CMS-1500 or vice
         ; versa, ask to change provider function to appropriate function for
         ; form type (ATTENDING = UB-04, RENDERING = CMS-1500)
         ; IBIFN = ien of bill in file 399
         ; NOASK (flag) = 1 if change should happen without asking first
         N ATT,REN,FT
         S FT=$$FT^IBCEF(IBIFN)
         S REN=$$CKPROV^IBCEU(IBIFN,3,1)
         S ATT=$$CKPROV^IBCEU(IBIFN,4,1)
         ;JWS;IB*2.0*592;add Dental form check 
         I $S(FT=2:'REN&ATT,FT=3:'ATT&REN,FT=7:'REN&ATT,1:0) D
         . I '$G(NOASK) D TXFERPRV(IBIFN,FT) Q
         . D PRVCHG(IBIFN,FT)
         D CLEANUP(IBIFN,FT)
         Q
         ;
TXFERPRV(IBIFN,FT) --
          ; Ask to change the function of the main provider on
         ;  bill IBIFN to the function appropriate to the form type FT
         ;  
         N DIR,X,Y,Z,DIE,DA,DR,HAVE,NEED,IBZ
         ; DEM;432 - Changed the prompt from uppercase to mixed case.
         W ! S DIR("A")="  Change the Claim Level "_$S(FT=3:"Rendering",1:"Attending")_" provider's function to "_$S(FT=3:"Attending
          ",1:"Rendering")_"?: "
         S DIR(0)="YA",DIR("B")="NO",DIR("?",1)="If you answer YES here, you will make the claim level provider functions",DIR("?")=
          "  consistent with the form type of the bill"
         D ^DIR K DIR
         I Y'=1 Q
         D PRVCHG(IBIFN,FT)
         Q
         ;
PRVCHG(IBIFN,IBFT) --
          ; Change provider type to type consistent with current
         ; data on bill
         N Z,IBZ,HAVE,NEED,DIE,DA,X,Y
         S HAVE=$S(IBFT=3:3,1:4)
         S NEED=$S(IBFT=3:4,1:3)
         S Z=$O(^DGCR(399,IBIFN,"PRV","B",HAVE,0))
         I Z D
         . S DA(1)=IBIFN,DA=+Z
         . D FDA^DILF(399.0222,.DA,.01,,NEED,"IBZ")
         . D FILE^DIE(,"IBZ")
         ;I Z S DA(1)=IBIFN,DIE="^DGCR(399,"_DA(1)_",""PRV"",",DA=+Z,DR=".01////"_NEED D FILE^DIE(,DIE
         Q
         ;
CLEANUP(IBIFN,FT) --
           ; If form type changes remove any extra provider FUNCTIONS.
         N X,PRV,CLEAN,DA,DIE
         ;
         ;JWS;IB*2.0*592 US1108 - If form type changes to (7) J430D - Dental, default Bill Charge Type
         I FT=7 S CLEAN(399,IBIFN_",",.27)=2
         ; (3) If form type changes from CMS-1500 to UB-04, remove any extra provider FUNCTIONS. 
         ;JWS;IB*2.0*592 US1108 - added 6-ASSISTANT SURGEON
         I FT=3 F X=5,6 D  ; 5-SUPERVISING, 6-ASSISTANT SURGEON
         . I $D(^DGCR(399,IBIFN,"PRV","B",X)) D
         .. S PRV=0 F  S PRV=$O(^DGCR(399,IBIFN,"PRV","B",X,PRV)) Q:+PRV=0  D
         ... S DA(1)=IBIFN,DA=PRV D FDA^DILF(399.0222,.DA,.01,,"@","CLEAN")
         ;
         ; (2) If form type changes from UB-04 to CMS-1500, remove any extra provider FUNCTIONS. 
         ;JWS;IB*2.0*592 US1108 - added 6-ASSISTANT SURGEON
         I FT=2 F X=2,4,6,9 D  ; 2-OPERATING, 4-ATTENDING, 6-ASSISTANT SURGEON, 9-OTHER
         . I $D(^DGCR(399,IBIFN,"PRV","B",X)) D
         .. S PRV=0 F  S PRV=$O(^DGCR(399,IBIFN,"PRV","B",X,PRV)) Q:+PRV=0  D
         ... S DA(1)=IBIFN,DA=PRV D FDA^DILF(399.0222,.DA,.01,,"@","CLEAN")
         ;
         I $D(CLEAN) D FILE^DIE(,"CLEAN")
         Q
         ;
PRVHELP  ; Text for the provider function help
         Q:$G(X)'="??"
         N IBZ,IBQUIT,IB,IB1,DIR,Z
         S IBQUIT=0
         S Z=""
         I '$D(IOSL)!'$D(IOST) D HOME^%ZIS
         Q:IOST'["C-"
         D:$G(D0) SPECIFIC(D0)
         N DIR,X,Y S DIR(0)="E" D ^DIR K DIR W @IOF
         S:$G(D0) Z=$$FT^IBCEF(D0)
         S IB=IOSL,IB1=1
         F IBZ=1:1 S:$P($T(HLPTXT+IBZ),";;",2)="" IBQUIT=1 Q:IBQUIT  S IB1=1 D
         . I $Y>(IB-3) N DIR,X,Y S IB1=0,DIR(0)="E" D ^DIR K DIR S IB=IB+IOSL I Y'=1 S IBQUIT=1 Q
         . W !,$P($T(HLPTXT+IBZ),";;",2)
         I IB1 D
         . N DIR,X,Y S DIR(0)="E" D ^DIR K DIR
         W @IOF
         Q
         ;
SPECIFIC(IBIFN) --
          ; Display specific provider requirements for the bill IBIFN
         N IBFT,IBPRV,IBR,ONBILL,Z,IBZ
         S IBFT=$$FT^IBCEF(IBIFN)
         D GETPRV^IBCEU(IBIFN,"ALL",.IBPRV) ;Returns needed providers
         ;JWS;IB*2.0*592 US1108 - added Dental form #7
         W !,"This bill is ",$S(IBFT=7:"J430D",IBFT=3:"UB-04",1:"CMS-1500"),"/",$S($$INPAT^IBCEF(IBIFN):"Inpatient",1:"Outpatient")
         W !!,"The valid provider functions for this bill are:"
         ;JWS;IB*2.0*592 US1108 - changed loop from :5 to :6 for Assistant Surgeon
         F IBZ=1:1:6,9 I $$PRVOK^IBCEU(IBZ,IBIFN) D
         . S ONBILL=$$CKPROV^IBCEU(IBIFN,IBZ)
         . S IBR=$S($G(IBPRV(IBZ,"NOTOPT")):1,$G(IBPRV(IBZ,"SITUATIONAL")):2,1:0)  ; DEM;432 added "SITUATIONAL" check.
         . ;JWS;IB*2.0*592 US1108 - dental form#7
         . I IBFT=7 S IBR=2
         . ; ib2.0*432
         . ; W !,IBZ,"  ",$$EXPAND^IBTRE(399.0222,.01,IBZ),?18,$S(IBR&'ONBILL:"**",1:""),?20,$S(IBR:"REQUIRED",1:"OPTIONAL"),$S(ONBI
          LL:" - ALREADY ON BILL",1:" - NOT ON BILL")
         . W !,IBZ,"  ",$$EXPAND^IBTRE(399.0222,.01,IBZ),?18,$S(IBR&'ONBILL:"**",1:""),?23,$S(IBR=1:"REQUIRED",IBR=2:"SITUATIONAL",1
          :"OPTIONAL")
         W !
         Q
         ;
HLPTXT   ; Helptext for provider function
         ;; 
         ;;PROVIDER FUNCTION requirements:
         ;; 
         ;;RENDERING: UB-04 Situational, CMS-1500 Situational, or J430D Situational
         ;;           This is the provider who performed a service.
         ;; 
         ;;ATTENDING: UB-04 REQUIRED
         ;;           The physician who has primary responsibility
         ;;           for the patient's medical care and treatment. 
         ;; 
         ;;OPERATING: UB-04 SITUATIONAL 
         ;;           The provider who performed the principal procedure(s)
         ;;           being billed.
         ;; UB-04 (inpatient): Situational IF type of bill has first 2
         ;;                    digits of 11, and there is a principal
         ;;                    procedure that will print in Form
         ;;                    Locator 74 of the claim, there must be
         ;;                    an Operating or Rendering Provider.
         ;; UB-04 (outpatient):REQUIRED IF type of bill has first 2
         ;;                    digits of 83, and there is a principal
         ;;                    procedure that will print in Form
         ;;                    Locator 74 of the claim.
         ;; 
         ;;REFERRING: UB-04, CMS-1500, or J430D SITUATIONAL
         ;;           The provider who referred the patient for the services being billed. 
         ;; 
         ;;SUPERVISING: CMS-1500 OPTIONAL or J430D SITUATIONAL
         ;;           Required when the rendering provider is supervised
         ;;           by another provider. Data will not be printed.
         ;; 
         ;;OTHER OPERATING: UB-04 SITUATIONAL
         ;;           Used to report another Operating Physician.  There must
         ;;           also be an Operating Physician on the claim.
         ;; 
         ;;ASSISTANT SURGEON: J430D SITUATIONAL
         ;;           Use when the Rendering Provider provided these services in the role
         ;;           of the Assisting Surgeon.
         ;; 
         ;;           There are providers who performed specific functions for
         ;;           the services on this bill.  These providers are needed to
         ;;           enable the V.A. to collect reimbursement when more than
         ;;           one provider function is involved in the billable episode
         ;;           (like an operating physician or referring provider). 
         ;; 
         ;;           This data identifies the type of function that was performed
         ;;           by a provider.
         ;;
         ;
LINKRX(IBIFN,IBREV) --
          ; Ask for revenue code's RX if not already there
         N DIR,X,Y,IBZ,IBRX,Z,Z0,DA
         Q:$P($G(^DGCR(399,IBIFN,"RC",IBREV,0)),U,11)!($P($G(^(0)),U,10)'=3)
         S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"RC",Z)) Q:'Z  I Z'=IBREV S Z0=$G(^(Z,0)) I $P(Z0,U,10)=3,$P(Z0,U,11) S IBRX(+$P(Z0,U,11))=
          ""
         S DIR(0)="PAO^IBA(362.4,:AEMQ",DIR("S")="I $P(^(0),U,2)=IBIFN,'$D(IBRX(+Y))"
         S DIR("A")="Select Rx for this charge: "
         S DIR("?",1)="Enter an Rx# for this revenue code"
         S DIR("?")=" The Rx must not already have an associated revenue code"
         D ^DIR K DIR
         I Y>0 D
         . S DA(1)=IBIFN,DA=IBREV,IBZ=""
         . D FDA^DILF(399.042,.DA,.11,"R",+Y,"IBZ")
         . D FILE^DIE(,"IBZ")
         Q
         ;
LINKCPT(IBIFN,IBREV) --
          ; Ask for revenue code's CPT
         N DIR,X,Y,IBZ,IBCP,Z,Z0,Z1,DA,IBRC,IBP
         S IBRC=$G(^DGCR(399,IBIFN,"RC",IBREV,0))
         Q:$P(IBRC,U,8)!($P(IBRC,U,10)'=4)
         S IBP=+$P(IBRC,U,6)
         I $P(IBRC,U,11) W !,"PROCEDURE #"_$P(IBRC,U,11)_" HAS BEEN ASSOCIATED WITH THIS MANUAL CHARGE"
         I '$P(IBRC,U,11) D  Q:IBRC=""
         . S DIR("?",1)="Respond YES if this revenue code charge specifically references the data for"
         . S DIR("?",2)="  a particular procedure that was manually entered on the previous screen."
         . S DIR("?",3)="  For outpatient UB-04 bills, associating a manual revenue code charge with",DIR("?")="  a procedure is the
           only way to print a modifier in box 44"
         . S DIR(0)="YA",DIR("A")="SHOULD A PROCEDURE ENTRY BE ASSOCIATED WITH THIS CHARGE?: ",DIR("B")=$S(IBP:"YES",1:"NO") W ! D ^
          DIR K DIR W !
         . I Y'=1 S IBRC="" Q
         I $P(IBRC,U,11) D
         . S DIR("?",1)="Respond YES if you no longer want this revenue code charge to reference a",DIR("?")="  specific manually en
          tered procedure"
         . S DIR(0)="YA",DIR("A")="DELETE THE EXISTING PROCEDURE ASSOCIATION?: ",DIR("B")="NO" W ! D ^DIR K DIR
         . I Y=1 D UPDPTR(IBIFN,IBREV,"") S $P(IBRC,U,11)=""
         S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"RC",Z)) Q:'Z  S Z0=$G(^(Z,0)) I IBREV'=Z,$P(Z0,U,11) D
         . ; Don't allow to link to 'used' proc
         . I $P(Z0,U,10)=4 S IBCP($P(Z0,U,11))="" Q
         . I $P(Z0,U,10)=3,$P(Z0,U,15) S IBCP($P(Z0,U,15))=""
         S DIR(0)="PAO^DGCR(399,"_IBIFN_",""CP"",:AEMQ",DIR("S")="I '$D(IBCP(+Y)),$P(^(0),U)[""CPT"",+^(0)="_+$P($G(^DGCR(399,IBIFN,
          "RC",IBREV,0)),U,6)
         S DIR("A")="SELECT A PROCEDURE ENTRY: "_$S($P(IBRC,U,11):"#"_$P(IBRC,U,11)_" - "_$$EXPAND^IBTRE(399.0304,.01,$P($G(^DGCR(39
          9,IBIFN,"CP",$P(IBRC,U,11),0)),U))_"// ",1:"")
         S DIR("?")="Enter a manually-added CPT procedure to associate with this charge"
         S DA(1)=IBIFN
         D ^DIR K DIR W !
         I Y>0 D UPDPTR(IBIFN,IBREV,+Y)
         Q
         ;
UPDPTR(IBIFN,IBREV,Y) --
          ;
         N IBZ,DA
         S DA(1)=IBIFN,DA=IBREV,IBZ=""
         D FDA^DILF(399.042,.DA,.11,"R",$S(Y:+Y,1:""),"IBZ")
         D FILE^DIE(,"IBZ")
         Q
         ;
INSFT(IBIFN) --
          ; Returns 1 if form type is UB-04, 0 if CMS-1500 or J430D
         Q ($$FT^IBCEF(IBIFN)=3)

*****   INDEX OF IBCEU5   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   ATT          FTPRV+5~,FTPRV+8*,FTPRV+10
   CLEAN        CLEANUP+1~,CLEANUP+19
   CLEAN(399    CLEANUP+4*
>> D0           PRVHELP+7,PRVHELP+9
   DA           TXFERPRV+3~,PRVCHG+2~,PRVCHG+7*,PRVCHG+8,CLEANUP+1~,CLEANUP+10*,CLEANUP+17*,LINKRX+1~,LINKRX+10*,LINKRX+11
                LINKCPT+1~,UPDPTR+1~,UPDPTR+2*,UPDPTR+3
   DA(1         PRVCHG+7*,CLEANUP+10*,CLEANUP+17*,LINKRX+10*,LINKCPT+23*,UPDPTR+2*
   DIE          TXFERPRV+3~,PRVCHG+2~,CLEANUP+1~
   DIR          TXFERPRV+3~,TXFERPRV+7!,PRVHELP+2~,PRVHELP+8~!,PRVHELP+12~!,PRVHELP+15~!,LINKRX+1~,LINKRX+8!,LINKCPT+1~,LINKCPT+10!
                LINKCPT+14!,LINKCPT+24!
   DIR("?"      TXFERPRV+6*,LINKRX+6*,LINKRX+7*,LINKCPT+7*,LINKCPT+8*,LINKCPT+9*,LINKCPT+13*,LINKCPT+22*
   DIR("A"      TXFERPRV+5*,LINKRX+5*,LINKCPT+10*,LINKCPT+14*,LINKCPT+21*
   DIR("B"      TXFERPRV+6*,LINKCPT+10*,LINKCPT+14*
   DIR("S"      LINKRX+4*,LINKCPT+20*
   DIR(0        TXFERPRV+6*,PRVHELP+8*,PRVHELP+12*,PRVHELP+15*,LINKRX+4*,LINKCPT+10*,LINKCPT+14*,LINKCPT+20*
   DR           TXFERPRV+3~
   FT           FTPRV+5~,FTPRV+6*,FTPRV+10,FTPRV+11,FTPRV+12,FTPRV+13,TXFERPRV~,TXFERPRV+5,TXFERPRV+9,CLEANUP~,CLEANUP+4,CLEANUP+7
                CLEANUP+14
   HAVE         TXFERPRV+3~,PRVCHG+2~,PRVCHG+3*,PRVCHG+5
   IB           PRVHELP+2~,PRVHELP+10*,PRVHELP+12*
   IB1          PRVHELP+2~,PRVHELP+10*,PRVHELP+11*,PRVHELP+12*,PRVHELP+14
   IBCP         LINKCPT+1~
   IBCP(        LINKCPT+18*,LINKCPT+19*
   IBFT         PRVCHG~,PRVCHG+3,PRVCHG+4,SPECIFIC+1~,SPECIFIC+2*,SPECIFIC+5,SPECIFIC+12
   IBIFN        FTPRV~,FTPRV+6,FTPRV+7,FTPRV+8,FTPRV+11,FTPRV+12,FTPRV+13,TXFERPRV~,TXFERPRV+9,PRVCHG~,PRVCHG+5,PRVCHG+7,CLEANUP~
                CLEANUP+4,CLEANUP+8,CLEANUP+9,CLEANUP+10,CLEANUP+15,CLEANUP+16,CLEANUP+17,SPECIFIC~,SPECIFIC+2,SPECIFIC+3
                SPECIFIC+5
                SPECIFIC+8,SPECIFIC+9,LINKRX~,LINKRX+2,LINKRX+3,LINKRX+10,LINKCPT~,LINKCPT+2,LINKCPT+15,LINKCPT+16,LINKCPT+20
                LINKCPT+21,LINKCPT+23,LINKCPT+25,UPDPTR~,UPDPTR+2,INSFT~,INSFT+1
   IBP          LINKCPT+1~,LINKCPT+4*,LINKCPT+10
   IBPRV        EXTCR~,EXTCR+5,SPECIFIC+1~,SPECIFIC+3
   IBPRV(       SPECIFIC+10
   IBQUIT       PRVHELP+2~,PRVHELP+3*,PRVHELP+11*,PRVHELP+12*
   IBR          SPECIFIC+1~,SPECIFIC+10*,SPECIFIC+12*,SPECIFIC+15
   IBRC         LINKCPT+1~,LINKCPT+2*,LINKCPT+3,LINKCPT+4,LINKCPT+5,LINKCPT+6,LINKCPT+11*,LINKCPT+12,LINKCPT+15*,LINKCPT+21
   IBREV        LINKRX~,LINKRX+2,LINKRX+3,LINKRX+10,LINKCPT~,LINKCPT+2,LINKCPT+15,LINKCPT+16,LINKCPT+20,LINKCPT+25,UPDPTR~,UPDPTR+2
   IBRX         LINKRX+1~
   IBRX(        LINKRX+3*
   IBZ          TXFERPRV+3~,PRVCHG+2~,PRVHELP+2~,PRVHELP+11*,SPECIFIC+1~,SPECIFIC+8*,SPECIFIC+9,SPECIFIC+10,SPECIFIC+15,LINKRX+1~
                LINKRX+10*,LINKCPT+1~,UPDPTR+1~,UPDPTR+2*
   IOF          PRVHELP+8,PRVHELP+16
   IOSL         PRVHELP+5,PRVHELP+10,PRVHELP+12
   IOST         PRVHELP+5,PRVHELP+6
   NEED         TXFERPRV+3~,PRVCHG+2~,PRVCHG+4*,PRVCHG+8
   NOASK        FTPRV~,FTPRV+11
   ONBILL       SPECIFIC+1~,SPECIFIC+9*,SPECIFIC+15
   PRV          CLEANUP+1~,CLEANUP+9*,CLEANUP+10,CLEANUP+16*,CLEANUP+17
   REN          FTPRV+5~,FTPRV+7*,FTPRV+10
   U            LINKRX+2,LINKRX+3,LINKCPT+3,LINKCPT+4,LINKCPT+5,LINKCPT+6,LINKCPT+12,LINKCPT+15,LINKCPT+16,LINKCPT+18,LINKCPT+19
                LINKCPT+20,LINKCPT+21
   X            TXFERPRV+3~,PRVCHG+2~,CLEANUP+1~,CLEANUP+7*,CLEANUP+8,CLEANUP+9,CLEANUP+14*,CLEANUP+15,CLEANUP+16,PRVHELP+1
                PRVHELP+8~,PRVHELP+12~,PRVHELP+15~,LINKRX+1~,LINKCPT+1~
   Y            TXFERPRV+3~,TXFERPRV+8,PRVCHG+2~,PRVHELP+8~,PRVHELP+12~,PRVHELP+15~,LINKRX+1~,LINKRX+9,LINKRX+11,LINKCPT+1~
                LINKCPT+11,LINKCPT+15,LINKCPT+25,UPDPTR~,UPDPTR+3
   Z            TXFERPRV+3~,PRVCHG+2~,PRVCHG+5*,PRVCHG+6,PRVCHG+7,PRVHELP+2~,PRVHELP+4*,PRVHELP+9*,SPECIFIC+1~,LINKRX+1~,LINKRX+3*
                LINKCPT+1~,LINKCPT+16*
   Z0           LINKRX+1~,LINKRX+3*,LINKCPT+1~,LINKCPT+16*,LINKCPT+18,LINKCPT+19
   Z1           LINKCPT+1~

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399           PRVCHG+5,CLEANUP+8,CLEANUP+9,CLEANUP+15,CLEANUP+16,LINKRX+2,LINKRX+3,LINKCPT+2,LINKCPT+16,LINKCPT+20
                       LINKCPT+21

Naked Globals
   ^(           LINKRX+3,LINKCPT+16
   ^(0          LINKRX+2

Cache Objects
   NONE

Marked Items
   $T(HLPTXT+IBZPRVHELP+11,PRVHELP+13

Label References
   CLEANUP      FTPRV+13
   PRVCHG       FTPRV+12,TXFERPRV+9
   SPECIFIC     PRVHELP+7
   TXFERPRV     FTPRV+11
   UPDPTR       LINKCPT+15,LINKCPT+25

External References
   HOME^%ZIS           PRVHELP+5
   FILE^DIE            PRVCHG+9,CLEANUP+19,LINKRX+12,UPDPTR+4
   FDA^DILF            PRVCHG+8,CLEANUP+10,CLEANUP+17,LINKRX+11,UPDPTR+3
   ^DIR                TXFERPRV+7,PRVHELP+8,PRVHELP+12,PRVHELP+15,LINKRX+8,LINKCPT+10,LINKCPT+14,LINKCPT+24
   $$FT^IBCEF          FTPRV+6,PRVHELP+9,SPECIFIC+2,INSFT+1
   $$INPAT^IBCEF       SPECIFIC+5
   $$CKPROV^IBCEU      FTPRV+7,FTPRV+8,SPECIFIC+9
   $$CRED^IBCEU        EXTCR+5
   $$PRVOK^IBCEU       SPECIFIC+8
   GETPRV^IBCEU        SPECIFIC+3
   $$EXPAND^IBTRE      SPECIFIC+15,LINKCPT+21

*****   END   *****


IBCF23A  * *  165 Lines,  9154 Bytes, Checksum: B52551501                                             Mar 20, 2019@15:10:13 page 18
              2569 bytes in comments
IBCF23A  ;ALB/ARH - HCFA 1500 19-90 DATA - Split from IBCF23 ;12-JUN-93
         ;;2.0;INTEGRATED BILLING;**51,432,516,547,577,592,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
         ; $$INSTALDT^XPDUTL(IBPATCH,.IBARY) - ICR 10141
         ;
B24      ; set individual entries in print array, external format
         ; IBAUX = additional data for EDI output
         ; IBRXF = array of RX procedures
         ;JWS;IB*2.0*592;US131
         ; IBDEN = Dental data for EDI output
         ; IBDEN1 = array of Dental data for EDI output
         N IBX,Z,IBD1,IBD2,IBCPLINK
         S IBI=IBI+1,IBPROC=$P(IBSS,U,2),IBD1=$$DATE^IBCF23(IBDT1),IBD2=$S(IBDT1'=IBDT2:$$DATE^IBCF23(IBDT2),1:"")
         I '$D(IBXIEN) S IBD1=$E(IBD1,5,8)_$E(IBD1,1,4),IBD2=$E(IBD2,5,8)_$E(IBD2,1,4)
         S IBFLD(24,IBI)=IBD1_U_IBD2_U_$P($G(^IBE(353.1,+$P(IBSS,U,6),0)),U)_U_$P($G(^IBE(353.2,+$P(IBSS,U,7),0)),U)
         I +IBPROC D
         . S IBFLD(24,IBI)=IBFLD(24,IBI)_U_$P($$PRCD^IBCEF1(IBPROC,1),U,2) S:$P(IBPROC,";",2)'["ICPT" IBFLD(24,IBI_"X")=""
         I 'IBPROC S IBFLD(24,IBI)=IBFLD(24,IBI)_U_$S('$D(IBXIEN):IBPROC,1:+IBREV),IBFLD(24,IBI_"A")=$P($G(^DGCR(399.2,+IBREV,0)),U,
          2)
         I $D(IBRXF),IBCHARG="" S IBFLD(24,IBI_"A")=$P($G(^DGCR(399.2,+IBREV,0)),U,2)
         S IBFLD(24,IBI)=IBFLD(24,IBI)_U_$P(IBSS,U,5)_U_IBCHARG_U_IBUNIT_U_$P(IBSS,U,8)_U_$G(IBPCHG)_U_$G(IBMIN)_U_$G(IBEMG)
         I $D(IBSS("L")) S Z=0 F  S Z=$O(IBSS("L",Z)) Q:'Z  S IBFLD(24,IBI,$P(IBSS("L",Z),U),$P(IBSS("L",Z),U,2))=$G(IBFLD(24,IBI,$P
          (IBSS("L",Z),U),$P(IBSS("L",Z),U,2)))+1
         S:$TR($G(IBAUX),U)'="" IBFLD(24,IBI,"AUX")=$G(IBAUX)
         S:$D(IBRXF) IBFLD(24,IBI,"RX")=IBRXF
         K IBPROC,IBSS("L")
         S IBCPLINK=$P(IBSS,U,$L(IBSS,U))
         S IBFLD(24,IBI)=IBFLD(24,IBI)_U_IBCPLINK
         ; MRD;IB*2.0*516 - Added NDC and Units to line level of claim.
         ;I IBCPLINK'="" S $P(IBFLD(24,IBI),U,14,15)=$TR($P($G(^DGCR(399,IBIFN,"CP",IBCPLINK,1)),U,7,8),"-")
         ; vd/Beginning of IB*2*577 - Added Unit/Basis of Measurment to line level of claim.
         I IBCPLINK'="" S $P(IBFLD(24,IBI),U,14,16)=$TR($P($G(^DGCR(399,IBIFN,"CP",IBCPLINK,1)),U,7,8),"-")_U_$P($G(^DGCR(399,IBIFN,
          "CP",IBCPLINK,2)),U)
         ; vd/End of IB*2*577
         ;JWS;IB*2.0*592;US131
         I $G(IBDEN)'="" S IBFLD(24,IBI,"DEN")=$G(IBDEN)
         I $D(IBDEN1) M IBFLD(24,IBI,"DEN1")=IBDEN1
         I $D(IBDEND) S IBFLD(24,IBI,"DEND")=$G(IBDEND)
         ;end ;JWS;IB*2.0*592;US131
         Q
         ;
AUXOK(IBSS,IBSS1) --
          ; Check all other flds are the same to combine procs
         ; IBSS = subscript of IBCP to check for dups to combine - pass by ref
         ; IBSS(IBSS,"AUX-X",n) = all the previously extracted line items for the
         ;  same set of basic data, but having different "AUX" data
         ; IBSS1 = the "AUX" data of the current IBCP entry
         ;
         ; Returns entry # in IBSS array if match found, or 0 if no match
         ; Set the IBSS "AUX-X" node for no match
         N Z,Z0,Z1,XIEN
         S Z=0 F  S Z=$O(IBSS(IBSS,"AUX-X",Z)) Q:'Z  I IBSS1=IBSS(IBSS,"AUX-X",Z) Q
         ;JWS;IB*2.0*592;Dental fields to check for roll-up
         S XIEN=$G(IBSS(IBSS,1))
         I $D(IBCP(IBPO,"DEN"))!($D(IBCP(IBPO,"DEN1")))!($D(IBCP(IBPO,"DEND")))!($D(IBCP(XIEN,"DEN")))!($D(IBCP(XIEN,"DEN1")))!($D(I
          BCP(XIEN,"DEND"))) D
         . I $G(IBCP(IBPO,"DEN"))'=$G(IBCP(XIEN,"DEN")) S Z=0 Q
         . I $G(IBCP(IBPO,"DEND"))'=$G(IBCP(XIEN,"DEND")) S Z=0 Q
         . S Z1=0 F  S Z1=$O(IBCP(IBPO,"DEN1",Z1)) Q:'Z1  I $G(IBCP(IBPO,"DEN1",Z1,0))'=$G(IBCP(XIEN,"DEN1",Z1,0)) S Z=0 Q
         I 'Z S Z0=+$O(IBSS(IBSS,"AUX-X",""),-1)+1,IBSS(IBSS,"AUX-X",Z0)=IBSS1
         Q +Z
         ;
PRC      ; Extract procedure data for HCFA 1500
         ; IBRC(IBSS) = #rev codes with same billing criteria (IBSS)
         ; IBLINK('CP' ien,'RC' ien) = IBSS including modifiers,rx seq in pc 7,8
         ; IBLINK1(IBSS, 'RC' ien) =  auto (1)^ 'CP' ien (soft link)
         ;
         ; proc array w/chrg
         ;JWS;IB*2.0*592;US131; added IBLN1, IBDENLN
         ;IA# 3820
         N IBPR,IBP,IBDENLN,IBLN1
         S IBI=0 F  S IBI=$O(^DGCR(399,IBIFN,"CP",IBI)) Q:'IBI  K IBDENLN S IBLN=^(IBI,0),IBLN1=$G(^(1)),IBAUXLN=$G(^("AUX")),IBDENL
          N=$G(^("DEN")) D
         . I $O(^DGCR(399,IBIFN,"CP",IBI,"DEN1",0)) M IBDENLN("DEN1")=^DGCR(399,IBIFN,"CP",IBI,"DEN1")
         . ;end ;JWS;IB*2.0*592;US131
         . N Z,Z0,Z1,Q1
         . S IBPDT=$P(IBLN,U,2)
         . S IBSS=$$IBSS(IBI,.IBDXI,IBLN)
         . S IBPO=$S($P(IBLN,U,4):+$P(IBLN,U,4),1:IBI+1000) ;Set print order
         . S IBCP(IBPO)=IBPDT_"^"_IBSS,IBCP(IBPO,"AUX")=IBAUXLN
         . S IBCP(IBPO,"LNK")=IBI
         . ;JWS;IB*2.0*592;US131
         . I $G(IBLN1)'="" S IBCP(IBPO,"DEND")=IBLN1
         . I $G(IBDENLN)'="" S IBCP(IBPO,"DEN")=IBDENLN
         . I $O(IBDENLN("DEN1",0)) M IBCP(IBPO,"DEN1")=IBDENLN("DEN1")
         . ;end ;JWS;IB*2.0*592;US131
         . ; Rx
         . N IBZ,IBITEM
         . S IBZ=$S($P(IBSS,U):$P(IBSS,U),1:"")
         . I IBZ'="",$D(IBLINKRX(IBZ,IBI)) D  Q:IBCHARG'=""
         .. S IBPO1=IBPO
         .. S IBITEM=+$O(IBLINKRX(IBZ,IBI,0)),IBRV=$G(IBLINKRX(IBZ,IBI,IBITEM))
         .. Q:$S(IBRV="":1,1:'$G(IBRC(IBRV)))
         .. S IBCHARG=$P(IBRV,U,6),IBRC(IBRV)=IBRC(IBRV)-1
         .. S $P(IBCP(IBPO1),U,9)=IBCHARG,IBCP(IBPO1,"RX")=IBITEM K IBLINKRX(IBZ,IBI,IBITEM)
         . ; find chrgs directly linked to proc
         . S IBK=0 F  S IBK=$O(IBLINK(IBI,IBK)) Q:'IBK  S IBRV1=IBLINK(IBI,IBK),IBRV=$P(IBRV1,U,1,6) I +IBRC(IBRV1) D
         .. S IBCHARG=$P(IBRV,U,6),IBRC(IBRV1)=IBRC(IBRV1)-1
         .. I IBCHARG'="" S $P(IBSS,U,8)=IBCHARG,IBCP(IBPO)=IBPDT_"^"_IBSS,IBPO=IBPO+.1
         ;
         ; add chrgs associated with a proc (not a direct link)
         ; find chrg associated with proc, if any (match proc,div,+/-basc)
         K IBP(0)
         F IBP=3,2 Q:$D(IBP(0))  S IBPO="" F  S IBPO=$O(IBCP(IBPO)) Q:'IBPO  I $P(IBCP(IBPO),U,9)="" D
         . S IBSS=$P(IBCP(IBPO),U,2,9)
         . S IBCHARG="",(IBRV,IBSS)=$P(IBSS,U,1,IBP) F  S IBRV=$O(IBRC(IBRV)) Q:$P(IBRV,U,1,IBP)'=IBSS  S IBP(0)=0 I +IBRC(IBRV) D  
          Q
         .. S IBCHARG=$P(IBRV,U,6),IBRC(IBRV)=IBRC(IBRV)-1
         .. I IBRC(IBRV) S Z=0 F  S Z=$O(IBCP(IBPO,Z)) Q:'Z  S IBRC(IBRV)=IBRC(IBRV)-1
         . S $P(IBCP(IBPO),U,9)=IBCHARG
         . I IBCHARG'="" S Z=$O(IBLINK1(IBRV,0)) I Z S IBCP(IBPO,"L",Z)=IBLINK1(IBRV,Z) K IBLINK1(IBRV,Z)
         ;
         ; add chrgs not associated with a proc to first proc with no chrg
         ; Aggggh!!! TP
         S IBPO="" F  S IBPO=$O(IBCP(IBPO)) Q:'IBPO  I $P(IBCP(IBPO),U,9)="" D
         . S IBCHARG="",IBRV="^" F  S IBRV=$O(IBRC(IBRV)) Q:IBRV=""!+IBRV  I +IBRC(IBRV) D  Q
         .. S IBCHARG=$P(IBRV,U,6),IBRC(IBRV)=IBRC(IBRV)-1
         .. S Z=$O(IBLINK1(IBRV,0)) I Z S IBCP(IBPO,"L",Z)=IBLINK1(IBRV,Z) K IBLINK1(IBRV,Z)
         . S $P(IBCP(IBPO),U,9)=IBCHARG
         ;
         Q
IBSS(IBI,IBDXI,IBLN) --
          ; Creates index sequence for procedure
         N IBPC,IBJ,IBSS,IBLPI,IBX,IBLPAR
         S (IBPC,IBLPI)=0
         F IBJ=1,6,5,0,9,10 S IBPC=IBPC+1 S:IBJ $P(IBSS,U,IBPC,IBPC+1)=($P(IBLN,U,IBJ)_U)
         S $P(IBSS,U,7)=($$GETMOD^IBEFUNC(IBIFN,IBI)_U) ;Modifiers
         ;IB*547/TAZ - IBDXI not defined, use internal DX pointer
         I '$G(IBNWPTCH) F IBJ=11:1:14 I $P(IBLN,U,IBJ) S $P(IBSS,U,4)=$P(IBSS,U,4)_$S(IBJ>11:",",1:"")_$G(IBDXI(+$P(IBLN,U,IBJ))) ;
           dx
         I $G(IBNWPTCH) F IBJ=11:1:14 S IBX=$P(IBLN,U,IBJ) I IBX S $P(IBSS,U,4)=$P(IBSS,U,4)_$S(IBJ>11:",",1:"")_$G(IBDXI(IBX),IBX) 
          ; dx
         S $P(IBSS,U,10)=$P(IBLN,U,16),$P(IBSS,U,9)=$P(IBLN,U,19),$P(IBSS,U,11)=+$P(IBLN,U,17)
         G:'$G(IBNWPTCH) IBSSX
         ;IB*547/TAZ - Add additional fields for roll-up compare
         S $P(IBSS,U,21)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","ASSOCIATED CLINIC","I")
         S $P(IBSS,U,22)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","TYPE OF SERVICE","I")
         S $P(IBSS,U,23)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","ATTACHMENT CONTROL NUMBER","I")
         S $P(IBSS,U,24)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","NDC","I")
         S $P(IBSS,U,25)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","PROCEDURE DESCRIPTION","I")
         S $P(IBSS,U,26)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","ADDITIONAL OB MINUTES","I")
         ;JRA;IB*2.0*608 Put Certificate of Medical Necessity (CMN) info in pieces 30,31,32
         M IBLPAR=^DGCR(399,IBIFN,"CP",IBI)
         S $P(IBSS,U,30)=$TR($G(IBLPAR("CMN")),U,"~")
         S $P(IBSS,U,31)=$TR($G(IBLPAR("CMN-10126")),U,"~")
         S $P(IBSS,U,32)=$TR($G(IBLPAR("CMN-484")),U,"~")
         K IBLPAR
         ;Add Provider info in pieces 41-49
         M IBLPAR=^DGCR(399,IBIFN,"CP",IBI,"LNPRV")
         F  S IBLPI=$O(IBLPAR(IBLPI)) Q:'IBLPI  S IBX=IBLPAR(IBLPI,0),$P(IBSS,U,40+IBX)=$TR(IBX,"^","~")
         K IBLPAR
IBSSX    ;
         Q IBSS
         ;
IBNWPTCH(IBIFN,IBPATCH) --
          ;
         ;Checks the date the primary claim was 1st transmitted and returns 1 if the transmitted date is after the patch
         ;referenced in variable IBPATCH was released. This allows the MRA/EOBs returning to roll up procedures the same
         ;way as they went out.  Otherwise the order changes and the MRA/EOB won't match up.
         ;
         N IBARY,IBIDT,IBPFN,IBEFN,IBBN,IBX,IBBDT
         S IBX=0
         I $$INSTALDT^XPDUTL(IBPATCH,.IBARY) D   ;ICR 10141
         . S IBX=1
         . S IBIDT=$O(IBARY(""))
         . ; Get Primary Bill Number. This will insure COB data is consistent across all bills.
         . S IBPFN=$$GET1^DIQ(399,IBIFN_",","PRIMARY BILL #","I") I 'IBPFN S IBPFN=IBIFN
         . ; Find 1st Accepted Entry (A1, A2, or Z) of Primary Bill in EDI TRANSMIT BILL FILE (364) to determine Batch Number
         . S (IBEFN,IBBN)=0 F  S IBEFN=$O(^IBA(364,"B",IBPFN,IBEFN)) Q:'IBEFN  D  I IBBN Q
         .. I ",A1,A2,Z,"'[(","_$$GET1^DIQ(364,IBEFN_",","TRANSMISSION STATUS","I")_",") Q
         .. S IBBN=$$GET1^DIQ(364,IBEFN_",","BATCH NUMBER","I")
         . ;Retrieve the date the batch was 1st sent.  If IBBN="" IBBDT will be null
         . S IBBDT=$$GET1^DIQ(364.1,$$GET1^DIQ(364,IBBN_",","BATCH NUMBER","I")_",","DATE FIRST SENT","I")
         . I IBBDT,(IBBDT<IBIDT) S IBX=0
         Q IBX

*****   INDEX OF IBCF23A   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   IBARY        IBNWPTCH+5~,IBNWPTCH+7
   IBARY(""     IBNWPTCH+9
>> IBAUX        B24+16
>> IBAUXLN      PRC+9*,PRC+16
   IBBDT        IBNWPTCH+5~,IBNWPTCH+17*,IBNWPTCH+18
   IBBN         IBNWPTCH+5~,IBNWPTCH+13*,IBNWPTCH+15*,IBNWPTCH+17
>> IBCHARG      B24+13,B24+14,PRC+26,PRC+30*,PRC+31,PRC+34*,PRC+35,PRC+42*,PRC+43*,PRC+45,PRC+46,PRC+51*,PRC+52*,PRC+54
>> IBCP(        AUXOK+12,AUXOK+13,AUXOK+14,AUXOK+15,PRC+16*,PRC+17*,PRC+19*,PRC+20*,PRC+21*,PRC+31*,PRC+35*,PRC+40,PRC+41,PRC+44
                PRC+45*,PRC+46*,PRC+50,PRC+53*,PRC+54*
   IBCPLINK     B24+6~,B24+19*,B24+20,B24+24
   IBD1         B24+6~,B24+7*,B24+8*,B24+9
   IBD2         B24+6~,B24+7*,B24+8*,B24+9
>> IBDEN        B24+27
>> IBDEN1       B24+28
>> IBDEND       B24+29
   IBDENLN      PRC+8~,PRC+9!*,PRC+20
   IBDENLN("DEN1" 
                PRC+10*,PRC+21
>> IBDT1        B24+7
>> IBDT2        B24+7
   IBDXI        PRC+14,IBSS~
   IBDXI(       IBSS+6,IBSS+7
   IBEFN        IBNWPTCH+5~,IBNWPTCH+13*,IBNWPTCH+14,IBNWPTCH+15
>> IBEMG        B24+14
>> IBFLD(24     B24+9*,B24+11*,B24+12*,B24+13*,B24+14*,B24+15*,B24+16*,B24+17*,B24+20*,B24+24*,B24+27*,B24+28*,B24+29*
   IBI          B24+7*,B24+9,B24+11,B24+12,B24+13,B24+14,B24+15,B24+16,B24+17,B24+20,B24+24,B24+27,B24+28,B24+29,PRC+9*,PRC+10
                PRC+14,PRC+15,PRC+17,PRC+26,PRC+28,PRC+31,PRC+33,IBSS~,IBSS+4,IBSS+11,IBSS+12,IBSS+13,IBSS+14,IBSS+15,IBSS+16
                IBSS+18,IBSS+24
   IBIDT        IBNWPTCH+5~,IBNWPTCH+9*,IBNWPTCH+18
   IBIFN        B24+24,PRC+9,PRC+10,IBSS+4,IBSS+11,IBSS+12,IBSS+13,IBSS+14,IBSS+15,IBSS+16,IBSS+18,IBSS+24,IBNWPTCH~,IBNWPTCH+11
   IBITEM       PRC+24~,PRC+28*,PRC+31
   IBJ          IBSS+1~,IBSS+3*,IBSS+6*,IBSS+7*
>> IBK          PRC+33*
>> IBLINK(      PRC+33
>> IBLINK1(     PRC+46!,PRC+53!
>> IBLINKRX(    PRC+26,PRC+28,PRC+31!
   IBLN         PRC+9*,PRC+13,PRC+14,PRC+15,IBSS~,IBSS+3,IBSS+6,IBSS+7,IBSS+8
   IBLN1        PRC+8~,PRC+9*,PRC+19
   IBLPAR       IBSS+1~,IBSS+18*,IBSS+22!,IBSS+24*,IBSS+26!
   IBLPAR(      IBSS+25
   IBLPAR("CMN" IBSS+19
   IBLPAR("CMN-10126" 
                IBSS+20
   IBLPAR("CMN-484" 
                IBSS+21
   IBLPI        IBSS+1~,IBSS+2*,IBSS+25*
>> IBMIN        B24+14
>> IBNWPTCH     IBSS+6,IBSS+7,IBSS+9
   IBP          PRC+8~,PRC+40*,PRC+42
   IBP(0        PRC+39!,PRC+40,PRC+42*
   IBPATCH      IBNWPTCH~,IBNWPTCH+7
   IBPC         IBSS+1~,IBSS+2*,IBSS+3*
>> IBPCHG       B24+14
>> IBPDT        PRC+13*,PRC+16,PRC+35
   IBPFN        IBNWPTCH+5~,IBNWPTCH+11*,IBNWPTCH+13
>> IBPO         AUXOK+12,AUXOK+13,AUXOK+14,AUXOK+15,PRC+15*,PRC+16,PRC+17,PRC+19,PRC+20,PRC+21,PRC+27,PRC+35*,PRC+40*,PRC+41,PRC+44
                PRC+45,PRC+46,PRC+50*,PRC+53,PRC+54
>> IBPO1        PRC+27*,PRC+31
   IBPR         PRC+8~
   IBPROC       B24+7*,B24+10,B24+11,B24+12,B24+18!
>> IBRC(        PRC+29,PRC+30*,PRC+33,PRC+34*,PRC+42,PRC+43*,PRC+44*,PRC+51,PRC+52*
>> IBREV        B24+12,B24+13
>> IBRV         PRC+28*,PRC+29,PRC+30,PRC+33*,PRC+34,PRC+42*,PRC+43,PRC+44,PRC+46,PRC+51*,PRC+52,PRC+53
>> IBRV1        PRC+33*,PRC+34
>> IBRXF        B24+13,B24+17
   IBSS         B24+7,B24+9,B24+14,B24+19,AUXOK~,AUXOK+9,AUXOK+11,AUXOK+16,PRC+14*,PRC+16,PRC+25,PRC+35*,PRC+41*,PRC+42*,IBSS+1~
                IBSS+3*,IBSS+4*,IBSS+6*,IBSS+7*,IBSS+8*,IBSS+11*,IBSS+12*,IBSS+13*,IBSS+14*,IBSS+15*,IBSS+16*,IBSS+19*,IBSS+20*
                IBSS+21*
                IBSS+25*,IBSSX+1
   IBSS(        AUXOK+9,AUXOK+11,AUXOK+16*
   IBSS("L"     B24+15,B24+18!
   IBSS1        AUXOK~,AUXOK+9,AUXOK+16
>> IBUNIT       B24+14
   IBX          B24+6~,IBSS+1~,IBSS+7*,IBSS+25*,IBNWPTCH+5~,IBNWPTCH+6*,IBNWPTCH+8*,IBNWPTCH+18*,IBNWPTCH+19
>> IBXIEN       B24+8,B24+12
   IBZ          PRC+24~,PRC+25*,PRC+26,PRC+28,PRC+31
   Q1           PRC+12~
   U            B24+7,B24+9,B24+11,B24+12,B24+13,B24+14,B24+15,B24+16,B24+19,B24+20,B24+24,PRC+13,PRC+15,PRC+25,PRC+30,PRC+31
                PRC+33,PRC+34,PRC+35,PRC+40,PRC+41,PRC+42,PRC+43,PRC+45,PRC+50,PRC+52,PRC+54,IBSS+3,IBSS+4,IBSS+6,IBSS+7,IBSS+8
                IBSS+11,IBSS+12
                IBSS+13,IBSS+14,IBSS+15,IBSS+16,IBSS+19,IBSS+20,IBSS+21,IBSS+25
   XIEN         AUXOK+8~,AUXOK+11*,AUXOK+12,AUXOK+13,AUXOK+14,AUXOK+15
   Z            B24+6~,B24+15*,AUXOK+8~,AUXOK+9*,AUXOK+13*,AUXOK+14*,AUXOK+15*,AUXOK+16,AUXOK+17,PRC+12~,PRC+44*,PRC+46*,PRC+53*
   Z0           AUXOK+8~,AUXOK+16*,PRC+12~
   Z1           AUXOK+8~,AUXOK+15*,PRC+12~

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399           B24+24,PRC+9,PRC+10,IBSS+18,IBSS+24
   ^DGCR(399.2         B24+12,B24+13
   ^IBA(364            IBNWPTCH+13
   ^IBE(353.1          B24+9
   ^IBE(353.2          B24+9

Naked Globals
   ^(           PRC+9
   ^("AUX"      PRC+9
   ^("DEN"      PRC+9
   ^(1          PRC+9

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$IBSS       PRC+14
   IBSSX        IBSS+9

External References
   $$GET1^DIQ          IBSS+11,IBSS+12,IBSS+13,IBSS+14,IBSS+15,IBSS+16,IBNWPTCH+11,IBNWPTCH+14,IBNWPTCH+15,IBNWPTCH+17
   $$PRCD^IBCEF1       B24+11
   $$DATE^IBCF23       B24+7
   $$GETMOD^IBEFUNC    IBSS+4
   $$INSTALDT^XPDUTL   IBNWPTCH+7

*****   END   *****


IBCNSC01 * *  220 Lines,  10535 Bytes, Checksum: B76348341                                            Mar 20, 2019@15:10:13 page 19
              1306 bytes in comments
IBCNSC01 ;ALB/NLR - INSURANCE COMPANY EDIT ;6/1/05 10:06am
         ;;2.0;INTEGRATED BILLING;**52,137,191,184,232,320,349,371,399,416,432,494,519,547,592,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
PARAM    ; -- Insurance company parameters region
         N OFFSET,START,IBCNS0,IBCNS03,IBCNS06,IBCNS08,IBCNS13,IBCNS3,IBHPD
         S IBCNS0=$G(^DIC(36,+IBCNS,0)),IBCNS3=$G(^(3))
         S IBCNS03=$P(IBCNS0,"^",3),IBCNS06=$P(IBCNS0,"^",6),IBCNS08=$P(IBCNS0,"^",8)
         S IBCNS13=$G(^DIC(36,+IBCNS,.13))
         S START=1,OFFSET=2
         D SET^IBCNSP(START,OFFSET+25," Billing Parameters ",IORVON,IORVOFF)
         ;
         D SET^IBCNSP(START+1,OFFSET+1,"Signature Required?: "_$S(+IBCNS03:"YES",1:"NO"))
         D SET^IBCNSP(START+2,OFFSET+10,"Reimburse?: "_$E($$EXPAND^IBTRE(36,1,$P(IBCNS0,"^",2)),1,21))
         D SET^IBCNSP(START+3,OFFSET+3,"Mult. Bedsections: "_$S(+IBCNS06:"YES",IBCNS06=0:"NO",1:""))
         D SET^IBCNSP(START+4,OFFSET+6,"One Opt. Visit: "_$S(+IBCNS08:"YES",1:"NO"))
         D SET^IBCNSP(START+5,OFFSET+4,"Diff. Rev. Codes: "_$P(IBCNS0,"^",7))
         D SET^IBCNSP(START+6,OFFSET+1,"Amb. Sur. Rev. Code: "_$P(IBCNS0,"^",9))
         D SET^IBCNSP(START+7,OFFSET+1,"Rx Refill Rev. Code: "_$P(IBCNS0,"^",15))
         D SET^IBCNSP(START+8,OFFSET+3,"Filing Time Frame: "_$P(IBCNS0,"^",12)_$S(+$P(IBCNS0,"^",18):" ("_$$FTFN^IBCNSU31(,+IBCNS)_"
          )",1:""))
         ;
         S OFFSET=45
         D SET^IBCNSP(START+1,OFFSET+4,"Type Of Coverage: "_$$EXPAND^IBTRE(36,.13,+$P(IBCNS0,U,13)))
         D SET^IBCNSP(START+2,OFFSET+7,"Billing Phone: "_$P(IBCNS13,"^",2))
         D SET^IBCNSP(START+3,OFFSET+2,"Verification Phone: "_$P(IBCNS13,"^",4))
         D SET^IBCNSP(START+4,OFFSET+2,"Precert Comp. Name: "_$P($G(^DIC(36,+$P(IBCNS13,"^",9),0)),"^",1))
         D SET^IBCNSP(START+5,OFFSET+7,"Precert Phone: "_$$PHONE(IBCNS13))
         I +IBCNS3=2 D SET^IBCNSP(START+6,OFFSET,"Max # Test Bills/Day: "_$P(IBCNS3,U,6))
         ;
         S START=11,OFFSET=2
         D SET^IBCNSP(START,OFFSET+28," EDI Parameters ",IORVON,IORVOFF)
         ;/IB*2*608 (vd) for US1909 changed the line below from "TEST ONLY" to "YES-TEST"
         ;D SET^IBCNSP(START+1,OFFSET+13,"Transmit?: "_$S(+IBCNS3=1:"YES-LIVE",+IBCNS3=2:"TEST ONLY",$P(IBCNS3,U,1)="":"",1:"NO"))
         D SET^IBCNSP(START+1,OFFSET+13,"Transmit?: "_$S(+IBCNS3=1:"YES-LIVE",+IBCNS3=2:"YES-TEST",$P(IBCNS3,U,1)="":"",1:"NO"))
         D SET^IBCNSP(START+2,OFFSET+1,"Inst Payer Primary ID: "_$P(IBCNS3,U,4))
         ;
         ;WCJ;IB*2.0*547; Lots o Changes below to include new Alternate Primary ID
         N IBAC,IBACND,LOOP
         S IBACMAX=0
         F IBACND=15,16 D
         .S LOOP=0 F  S LOOP=$O(^DIC(36,+IBCNS,IBACND,LOOP)) Q:'+LOOP  D
         ..S IBAC(IBACND,"CT")=$G(IBAC(IBACND,"CT"))+1 I IBAC(IBACND,"CT")>IBACMAX S IBACMAX=IBAC(IBACND,"CT")
         ..S IBAC(IBACND,IBAC(IBACND,"CT"))=$P($G(^DIC(36,+IBCNS,IBACND,LOOP,0)),U,1,2)
         ;
         S LOOP=0 F  S LOOP=$O(IBAC(15,LOOP)) Q:'LOOP  D
         .D SET^IBCNSP(START+2+(LOOP*2-1),OFFSET,"Alt-I Payer Prim ID Type: "_$$GET1^DIQ(355.98,+$P($G(IBAC(15,LOOP)),U),.01))
         .D SET^IBCNSP(START+2+(LOOP*2),OFFSET,"Alt-Inst Payer Prim ID: "_$P($G(IBAC(15,LOOP)),U,2))
         ;
         D SET^IBCNSP(START+3+(2*IBACMAX),OFFSET,"Inst Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.01))
         D SET^IBCNSP(START+4+(2*IBACMAX),OFFSET+5,"Inst Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.02))
         D SET^IBCNSP(START+5+(2*IBACMAX),OFFSET,"Inst Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.03))
         D SET^IBCNSP(START+6+(2*IBACMAX),OFFSET+5,"Inst Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.04))
         ;
         ;JWS;IB*2.0*592;Dental Payer ID, moved UMO ID and HPD down 1
         D SET^IBCNSP(START+7+(2*IBACMAX),OFFSET+7,"Dental Payer ID: "_$P(IBCNS3,U,15))
         D SET^IBCNSP(START+8+(2*IBACMAX),OFFSET+12,"Bin Number: "_$P($G(^DIC(36,+IBCNS,3)),"^",3))
         ;IB*2.0*547;WCJ Added and bumped HPID down
         D SET^IBCNSP(START+9+(2*IBACMAX),OFFSET+10,"UMO (278) ID: "_$P($G(^DIC(36,+IBCNS,7)),U))
         ;ib*2.0*519
         S IBHPD=$$HPD^IBCNHUT1(+IBCNS)
         D SET^IBCNSP(START+10+(2*IBACMAX),OFFSET+13,$P($$HOD^IBCNHUT1(IBHPD),U,2)_": "_IBHPD)
         ;
         S OFFSET=41
         D SET^IBCNSP(START+1,OFFSET+8," Insurance Type: "_$$EXPAND^IBTRE(36,3.09,+$P(IBCNS3,U,9)))
         D SET^IBCNSP(START+2,OFFSET+1," Prof Payer Primary ID: "_$P(IBCNS3,U,2))
         ;
         S LOOP=0 F  S LOOP=$O(IBAC(16,LOOP)) Q:'LOOP  D
         .D SET^IBCNSP(START+2+(LOOP*2-1),OFFSET+1,"Alt-P Payer Prim ID Type: "_$$GET1^DIQ(355.98,+$P($G(IBAC(16,LOOP)),U),.01))
         .D SET^IBCNSP(START+2+(LOOP*2),OFFSET+1,"Alt-Prof Payer Prim ID: "_$P($G(IBAC(16,LOOP)),U,2))
         ;
         D SET^IBCNSP(START+3+(2*IBACMAX),OFFSET," Prof Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.05))
         D SET^IBCNSP(START+4+(2*IBACMAX),OFFSET+5," Prof Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.06))
         D SET^IBCNSP(START+5+(2*IBACMAX),OFFSET," Prof Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.07))
         D SET^IBCNSP(START+6+(2*IBACMAX),OFFSET+5," Prof Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.08))
         ;IB*2.0*432/TAZ Added fields 6.09 and 6.1
         D SET^IBCNSP(START+8+(2*IBACMAX),OFFSET-3," Prnt Sec/Tert Auto Claims: "_$$GET1^DIQ(36,+IBCNS,6.09))
         D SET^IBCNSP(START+9+(2*IBACMAX),OFFSET-5," Prnt Med Sec Claims w/o MRA: "_$$GET1^DIQ(36,+IBCNS,6.1))
         Q
         ;
PHONE(IBCNS13) --
          ; -- Compute precert company phone
         N IBX,IBSAVE,IBCNT S IBX=""
         I '$P(IBCNS13,"^",9) S IBX=$P(IBCNS13,"^",3) G PHONEQ
REDOX    S IBSAVE=+$P(IBCNS13,"^",9)
         S IBCNT=$G(IBCNT)+1
         ; -- if you process the same co. more than once you are in an infinite loop
         I $D(IBCNT(IBCNS)) G PHONEQ
         S IBCNT(IBCNS)=""
         S IBCNS13=$G(^DIC(36,+$P(IBCNS13,"^",9),.13))
         S IBX=$P(IBCNS13,"^") S:$L($P(IBCNS13,"^",3)) IBX=$P(IBCNS13,"^",3)
         ; -- if process the same co. more than once you are in an infinite loop
         I $P(IBCNS13,"^",9),$P(IBCNS13,"^",9)'=IBSAVE G REDOX
PHONEQ   Q IBX
         ;
MAIN     ; -- Insurance company main address
         N OFFSET,START,IBCNS11,IBCNS13,IBADD
         S IBCNS11=$G(^DIC(36,+IBCNS,.11))
         S IBCNS13=$G(^DIC(36,+IBCNS,.13))
         ;
         ;S START=21,OFFSET=25
         S START=22+(2*IBACMAX),OFFSET=25
MAINAD   ; KDM US2487 IB*2.0*592  call in tag from IBCNSI
         D SET^IBCNSP(START,OFFSET," Main Mailing Address ",IORVON,IORVOFF)
         S OFFSET=2
         D SET^IBCNSP(START+1,OFFSET,"       Street: "_$P(IBCNS11,"^",1)) S IBADD=1
         D SET^IBCNSP(START+2,OFFSET,"     Street 2: "_$P(IBCNS11,"^",2)) S IBADD=2
         D SET^IBCNSP(START+3,OFFSET,"     Street 3: "_$P(IBCNS11,"^",3)) S IBADD=3
         ; D SET^IBCNSP(START+4,OFFSET,"Claim Off. ID: "_$P(IBCNS11,U,11))
         S OFFSET=45
         D SET^IBCNSP(START+1,OFFSET,"   City/State: "_$E($P(IBCNS11,"^",4),1,15)_$S($P(IBCNS11,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$
          P(IBCNS11,"^",5),0)),"^",2)_" "_$E($P(IBCNS11,"^",6),1,5))
         D SET^IBCNSP(START+2,OFFSET,"        Phone: "_$P(IBCNS13,"^",1))
         D SET^IBCNSP(START+3,OFFSET,"          Fax: "_$P(IBCNS11,"^",9))
         Q
         ;
         ;
PAYER    ; This procedure builds the display for the payer associated with
         ; this insurance company.
         ; ESG - 7/29/02 - IIV project
         ;     -  9/9/09 - eIV updated
         ;     -  2/4/13 - remove ePharmacy references (IB*2*494)
         ;
         N PAYERIEN,PAYR,APPDATA,APP,DATA,APPNAME,A1,A2,A3,A4,A5,A6,A7,A8
         N START,TITLE,OFFSET,IBLINE
         S PAYERIEN=$P($G(^DIC(36,+IBCNS,3)),U,10),PAYR="",APPDATA=0
         I PAYERIEN D
         . S PAYR=$G(^IBE(365.12,PAYERIEN,0))
         . S APP=0
         . F  S APP=$O(^IBE(365.12,PAYERIEN,1,APP)) Q:'APP  D
         .. S DATA=$G(^IBE(365.12,PAYERIEN,1,APP,0))
         .. S APPNAME=$$EXTERNAL^DILFD(365.121,.01,"",$P(DATA,U,1))
         .. I APPNAME="" Q
         .. I APPNAME="IIV" S APPNAME="eIV"   ; IB*2*416 - change external display to be eIV
         .. I APPNAME="E-PHARM" Q             ; IB*2*494 - don't display ePharmacy application data
         .. I $D(APPDATA(APPNAME)) Q
         .. S (A1,A2,A3,A4,A5,A6,A7)="NO",A8=""
         .. I $P(DATA,U,2) S A1="YES"      ; national active
         .. I $P(DATA,U,3) S A2="YES"      ; local active
         .. I $P(DATA,U,7) S A3="YES"      ; auto-accept
         .. I $P(DATA,U,8) S A4="YES"      ; ident inquiries require subscr ID (*416 field not used)
         .. I $P(DATA,U,9) S A5="YES"      ; use SSN for subscriber ID (*416 field not used)
         .. I $P(DATA,U,10) S A6="YES"     ; transmit SSN (*416 field not used)
         .. I $P(DATA,U,11) S A7="YES"     ; deactivated?
         .. ; A8 = deactivation date
         .. I $P(DATA,U,12) S A8=$P($$FMTE^XLFDT($P(DATA,U,12),"5Z"),"@",1)
         .. S APPDATA(APPNAME)=A1_U_A2_U_A3_U_A4_U_A5_U_A6_U_A7_U_A8
         .. S APPDATA=APPDATA+1
         .. Q
         . Q
         ;
         S START=$O(^TMP("IBCNSC",$J,""),-1)+1
         S IB1ST("PAYER")=START
         S TITLE=" Payer Information:  e-IV "     ; esg - IB*2*494 - remove ePharmacy reference
         S OFFSET=(40-($L(TITLE)/2))\1+1
         D SET^IBCNSP(START,OFFSET,TITLE,IORVON,IORVOFF)
         D SET^IBCNSP(START+1,9,"Payer Name: "_$P(PAYR,U,1))
         D SET^IBCNSP(START+2,5,"VA National ID: "_$P(PAYR,U,2))
         D SET^IBCNSP(START+2,51,"CMS National ID: "_$P(PAYR,U,3))
         S IBLINE=START+2
         ;
         ; Handle the case where no application data is defined
         I 'APPDATA D  G PAYERX
         . S IBLINE=IBLINE+1
         . D SET^IBCNSP(IBLINE,2," ")    ; blank line
         . S IBLINE=IBLINE+1
         . D SET^IBCNSP(IBLINE,16,"Payer Application data is not defined!")
         . Q
         ;
         ; Display all the applications
         S APPNAME=""
         F  S APPNAME=$O(APPDATA(APPNAME)) Q:APPNAME=""  D
         . S IBLINE=IBLINE+1
         . D SET^IBCNSP(IBLINE,2," ")    ; blank line
         . ;
         . S IBLINE=IBLINE+1
         . D SET^IBCNSP(IBLINE,2,"Payer Application: "_APPNAME)
         . D SET^IBCNSP(IBLINE,51,"FSC Auto-Update: "_$P(APPDATA(APPNAME),U,3))
         . ;
         . S IBLINE=IBLINE+1
         . D SET^IBCNSP(IBLINE,4,"National Active: "_$P(APPDATA(APPNAME),U,1))
         . D SET^IBCNSP(IBLINE,55,"Deactivated: "_$P(APPDATA(APPNAME),U,7))
         . ;
         . S IBLINE=IBLINE+1
         . D SET^IBCNSP(IBLINE,7,"Local Active: "_$P(APPDATA(APPNAME),U,2))
         . ;
         . ; If no deactivated date, then exit
         . I $P(APPDATA(APPNAME),U,8)="" Q
         . ;
         . D SET^IBCNSP(IBLINE,50,"Date Deactivated: "_$P(APPDATA(APPNAME),U,8))
         . ;
         . Q
PAYERX   ;
         ; Two trailing blank lines after payer information display
         S IBLINE=IBLINE+1
         D SET^IBCNSP(IBLINE,2," ")    ; blank line
         S IBLINE=IBLINE+1
         D SET^IBCNSP(IBLINE,2," ")    ; blank line
         Q
         ;
         ;
REMARKS  ;
         ;
         N OFFSET,START,IBLCNT,IBI
         S START=$O(^TMP("IBCNSC",$J,""),-1)+1,OFFSET=2
         S IB1ST("REM")=START
         ;
         D SET^IBCNSP(START,OFFSET," Remarks ",IORVON,IORVOFF)
         S (IBLCNT,IBI)=0 F  S IBI=$O(^DIC(36,+IBCNS,11,IBI)) Q:IBI<1  D
         . S IBLCNT=IBLCNT+1
         . D SET^IBCNSP(START+IBLCNT,OFFSET,"  "_$E($G(^DIC(36,+IBCNS,11,IBI,0)),1,80))
         . Q
         D SET^IBCNSP(START+IBLCNT+1,OFFSET," ")   ; blank line after remarks
         Q
         ;
SYN      ;
         N OFFSET,START,SYN,SYNOI
         S START=$O(^TMP("IBCNSC",$J,""),-1)+1,OFFSET=2
         S IB1ST("SYN")=START
         D SET^IBCNSP(START,OFFSET," Synonyms ",IORVON,IORVOFF)
         S SYN="" F SYNOI=1:1:8 S SYN=$O(^DIC(36,+IBCNS,10,"B",SYN)) Q:SYN=""  D SET^IBCNSP(START+SYNOI,OFFSET,$S(SYNOI>7:"  ...edit
           to see more...",1:"  "_SYN))
         Q
         ;

*****   INDEX OF IBCNSC01   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   A1           PAYER+6~,PAYER+19*,PAYER+20*,PAYER+29
   A2           PAYER+6~,PAYER+19*,PAYER+21*,PAYER+29
   A3           PAYER+6~,PAYER+19*,PAYER+22*,PAYER+29
   A4           PAYER+6~,PAYER+19*,PAYER+23*,PAYER+29
   A5           PAYER+6~,PAYER+19*,PAYER+24*,PAYER+29
   A6           PAYER+6~,PAYER+19*,PAYER+25*,PAYER+29
   A7           PAYER+6~,PAYER+19*,PAYER+26*,PAYER+29
   A8           PAYER+6~,PAYER+19*,PAYER+28*,PAYER+29
   APP          PAYER+6~,PAYER+11*,PAYER+12*,PAYER+13
   APPDATA      PAYER+6~,PAYER+8*,PAYER+30*,PAYER+45
   APPDATA(     PAYER+18,PAYER+29*,PAYER+54,PAYER+60,PAYER+63,PAYER+64,PAYER+67,PAYER+70,PAYER+72
   APPNAME      PAYER+6~,PAYER+14*,PAYER+15,PAYER+16*,PAYER+17,PAYER+18,PAYER+29,PAYER+53*,PAYER+54*,PAYER+59,PAYER+60,PAYER+63
                PAYER+64,PAYER+67,PAYER+70,PAYER+72
   DATA         PAYER+6~,PAYER+13*,PAYER+14,PAYER+20,PAYER+21,PAYER+22,PAYER+23,PAYER+24,PAYER+25,PAYER+26,PAYER+28
>> IB1ST("PAYER" 
                PAYER+35*
>> IB1ST("REM"  REMARKS+4*
>> IB1ST("SYN"  SYN+3*
   IBAC         PARAM+33~
   IBAC(        PARAM+37*,PARAM+38*
   IBAC(15      PARAM+40,PARAM+41,PARAM+42
   IBAC(16      PARAM+62,PARAM+63,PARAM+64
>> IBACMAX      PARAM+34*,PARAM+37*,PARAM+44,PARAM+45,PARAM+46,PARAM+47,PARAM+50,PARAM+51,PARAM+53,PARAM+56,PARAM+66,PARAM+67
                PARAM+68,PARAM+69,PARAM+71,PARAM+72,MAIN+6
   IBACND       PARAM+33~,PARAM+35*,PARAM+36,PARAM+37,PARAM+38
   IBADD        MAIN+1~,MAINAD+3*,MAINAD+4*,MAINAD+5*
>> IBCNS        PARAM+2,PARAM+4,PARAM+15,PARAM+36,PARAM+38,PARAM+44,PARAM+45,PARAM+46,PARAM+47,PARAM+51,PARAM+53,PARAM+55,PARAM+66
                PARAM+67,PARAM+68,PARAM+69,PARAM+71,PARAM+72,REDOX+3,REDOX+4,MAIN+2,MAIN+3,PAYER+8,REMARKS+7,REMARKS+9,SYN+5
   IBCNS0       PARAM+1~,PARAM+2*,PARAM+3,PARAM+9,PARAM+12,PARAM+13,PARAM+14,PARAM+15,PARAM+18
   IBCNS03      PARAM+1~,PARAM+3*,PARAM+8
   IBCNS06      PARAM+1~,PARAM+3*,PARAM+10
   IBCNS08      PARAM+1~,PARAM+3*,PARAM+11
   IBCNS11      MAIN+1~,MAIN+2*,MAINAD+3,MAINAD+4,MAINAD+5,MAINAD+8,MAINAD+10
   IBCNS13      PARAM+1~,PARAM+4*,PARAM+19,PARAM+20,PARAM+21,PARAM+22,PHONE~,PHONE+2,REDOX,REDOX+5*,REDOX+6,REDOX+8,MAIN+1~,MAIN+3*
                MAINAD+9
   IBCNS3       PARAM+1~,PARAM+2*,PARAM+23,PARAM+29,PARAM+30,PARAM+50,PARAM+59,PARAM+60
   IBCNT        PHONE+1~,REDOX+1*
   IBCNT(       REDOX+3,REDOX+4*
   IBHPD        PARAM+1~,PARAM+55*,PARAM+56
   IBI          REMARKS+2~,REMARKS+7*,REMARKS+9
   IBLCNT       REMARKS+2~,REMARKS+7*,REMARKS+8*,REMARKS+9,REMARKS+11
   IBLINE       PAYER+7~,PAYER+42*,PAYER+46*,PAYER+47,PAYER+48*,PAYER+49,PAYER+55*,PAYER+56,PAYER+58*,PAYER+59,PAYER+60,PAYER+62*
                PAYER+63,PAYER+64,PAYER+66*,PAYER+67,PAYER+72,PAYERX+2*,PAYERX+3,PAYERX+4*,PAYERX+5
   IBSAVE       PHONE+1~,REDOX*,REDOX+8
   IBX          PHONE+1~*,PHONE+2*,REDOX+6*,PHONEQ
>> IORVOFF      PARAM+6,PARAM+26,MAINAD+1,PAYER+38,REMARKS+6,SYN+4
>> IORVON       PARAM+6,PARAM+26,MAINAD+1,PAYER+38,REMARKS+6,SYN+4
   LOOP         PARAM+33~,PARAM+36*,PARAM+38,PARAM+40*,PARAM+41,PARAM+42,PARAM+62*,PARAM+63,PARAM+64
   OFFSET       PARAM+1~,PARAM+5*,PARAM+6,PARAM+8,PARAM+9,PARAM+10,PARAM+11,PARAM+12,PARAM+13,PARAM+14,PARAM+15,PARAM+17*,PARAM+18
                PARAM+19,PARAM+20,PARAM+21,PARAM+22,PARAM+23,PARAM+25*,PARAM+26,PARAM+29,PARAM+30,PARAM+41,PARAM+42,PARAM+44
                PARAM+45
                PARAM+46,PARAM+47,PARAM+50,PARAM+51,PARAM+53,PARAM+56,PARAM+58*,PARAM+59,PARAM+60,PARAM+63,PARAM+64,PARAM+66
                PARAM+67,PARAM+68,PARAM+69,PARAM+71,PARAM+72,MAIN+1~,MAIN+6*,MAINAD+1,MAINAD+2*,MAINAD+3,MAINAD+4,MAINAD+5
                MAINAD+7*,MAINAD+8
                MAINAD+9,MAINAD+10,PAYER+7~,PAYER+37*,PAYER+38,REMARKS+2~,REMARKS+3*,REMARKS+6,REMARKS+9,REMARKS+11,SYN+1~,SYN+2*
                SYN+4,SYN+5
   PAYERIEN     PAYER+6~,PAYER+8*,PAYER+9,PAYER+10,PAYER+12,PAYER+13
   PAYR         PAYER+6~,PAYER+8*,PAYER+10*,PAYER+39,PAYER+40,PAYER+41
   START        PARAM+1~,PARAM+5*,PARAM+6,PARAM+8,PARAM+9,PARAM+10,PARAM+11,PARAM+12,PARAM+13,PARAM+14,PARAM+15,PARAM+18,PARAM+19
                PARAM+20,PARAM+21,PARAM+22,PARAM+23,PARAM+25*,PARAM+26,PARAM+29,PARAM+30,PARAM+41,PARAM+42,PARAM+44,PARAM+45
                PARAM+46
                PARAM+47,PARAM+50,PARAM+51,PARAM+53,PARAM+56,PARAM+59,PARAM+60,PARAM+63,PARAM+64,PARAM+66,PARAM+67,PARAM+68
                PARAM+69,PARAM+71,PARAM+72,MAIN+1~,MAIN+6*,MAINAD+1,MAINAD+3,MAINAD+4,MAINAD+5,MAINAD+8,MAINAD+9,MAINAD+10,PAYER+7~
                PAYER+34*
                PAYER+35,PAYER+38,PAYER+39,PAYER+40,PAYER+41,PAYER+42,REMARKS+2~,REMARKS+3*,REMARKS+4,REMARKS+6,REMARKS+9
                REMARKS+11,SYN+1~,SYN+2*,SYN+3,SYN+4,SYN+5
   SYN          SYN+1~,SYN+5*
   SYNOI        SYN+1~,SYN+5*
   TITLE        PAYER+7~,PAYER+36*,PAYER+37,PAYER+38
   U            PARAM+18,PARAM+23,PARAM+29,PARAM+30,PARAM+38,PARAM+41,PARAM+42,PARAM+50,PARAM+53,PARAM+56,PARAM+59,PARAM+60
                PARAM+63,PARAM+64,PAYER+8,PAYER+14,PAYER+20,PAYER+21,PAYER+22,PAYER+23,PAYER+24,PAYER+25,PAYER+26,PAYER+28,PAYER+29
                PAYER+39
                PAYER+40,PAYER+41,PAYER+60,PAYER+63,PAYER+64,PAYER+67,PAYER+70,PAYER+72

Global Variables  ( * Changed  ! Killed)
   ^DIC(36             PARAM+2,PARAM+4,PARAM+21,PARAM+36,PARAM+38,PARAM+51,PARAM+53,REDOX+5,MAIN+2,MAIN+3,PAYER+8,REMARKS+7
                       REMARKS+9,SYN+5
   ^DIC(5              MAINAD+8
   ^IBE(365.12         PAYER+10,PAYER+12,PAYER+13
   ^TMP("IBCNSC"       PAYER+34,REMARKS+3,SYN+2

Naked Globals
   ^(3          PARAM+2

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$PHONE      PARAM+22
   PAYERX       PAYER+45
   PHONEQ       PHONE+2,REDOX+3
   REDOX        REDOX+8

External References
   $$EXTERNAL^DILFD    PAYER+14
   $$GET1^DIQ          PARAM+41,PARAM+44,PARAM+45,PARAM+46,PARAM+47,PARAM+63,PARAM+66,PARAM+67,PARAM+68,PARAM+69,PARAM+71,PARAM+72
   $$HOD^IBCNHUT1      PARAM+56
   $$HPD^IBCNHUT1      PARAM+55
   SET^IBCNSP          PARAM+6,PARAM+8,PARAM+9,PARAM+10,PARAM+11,PARAM+12,PARAM+13,PARAM+14,PARAM+15,PARAM+18,PARAM+19,PARAM+20
                       PARAM+21,PARAM+22,PARAM+23,PARAM+26,PARAM+29,PARAM+30,PARAM+41,PARAM+42,PARAM+44,PARAM+45,PARAM+46,PARAM+47
                       PARAM+50,PARAM+51
                       PARAM+53,PARAM+56,PARAM+59,PARAM+60,PARAM+63,PARAM+64,PARAM+66,PARAM+67,PARAM+68,PARAM+69,PARAM+71,PARAM+72
                       MAINAD+1,MAINAD+3,MAINAD+4,MAINAD+5,MAINAD+8,MAINAD+9,MAINAD+10,PAYER+38,PAYER+39,PAYER+40,PAYER+41,PAYER+47
                       PAYER+49,PAYER+56
                       PAYER+59,PAYER+60,PAYER+63,PAYER+64,PAYER+67,PAYER+72,PAYERX+3,PAYERX+5,REMARKS+6,REMARKS+9,REMARKS+11,SYN+4
                       SYN+5
   $$FTFN^IBCNSU31     PARAM+15
   $$EXPAND^IBTRE      PARAM+9,PARAM+18,PARAM+59
   $$FMTE^XLFDT        PAYER+28

*****   END   *****


IBCU7    * *  405 Lines,  17691 Bytes, Checksum: B180096059                                           Mar 20, 2019@15:10:13 page 20
              4453 bytes in comments
IBCU7    ;ALB/AAS - INTERCEPT SCREEN INPUT OF PROCEDURE CODES ;29-OCT-91
         ;;2.0;INTEGRATED BILLING;**62,52,106,125,51,137,210,245,228,260,348,371,432,447,488,461,516,522,577,604,616,592,608**;21-MA
          R-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
         ;MAP TO DGCRU7
         ;
         ; This routine is a copy of IBUC7 for testing purposes.
         ;
CHKX     ;  -interception of input x from Additional Procedure input
         G:X=" " CHKXQ
         I $$INPAT^IBCEF(DA(1)),'$P($G(^IBE(350.9,1,1)),"^",15),X'?1A1.2N D  G CHKXQ
         . K X
         . D EN^DDIOL("Site param does not allow entry of non-PTF procedures") ;Fileman error here will be: The previous error occur
          red when performing an action specified in a Pre-lookup transform (7.5 node).
         G:'$D(^UTILITY($J,"IB")) CHKXQ
         ;S M=($A($E(X,1))-64),S=+$E(X,2) Q:'$G(^UTILITY($J,"IB",M,S))  S X="`"_+^(S)
         S M=0 I X?1A1.2N S N=$G(^UTILITY($J,"IB","B",X)) S M=+N,S=+$P(N,U,2),P=X S S=$G(^UTILITY($J,"IB",M,S)) I +S S X="`"_+S I $P
          (N,U,3)="N" S X=""""_X_"""" S $P(^UTILITY($J,"IB","B",P),U,3)="Y"
         I +M,$D(DGPROCDT),DGPROCDT'=$P($G(^UTILITY($J,"IB",M,1)),"^",2) S DGPROCDT=$P(^(1),"^",2) W !!,"Procedure Date: " S Y=DGPRO
          CDT X ^DD("DD") W Y,!
CHKXQ    Q
         ;
CODMUL   ;Date oriented entry of procedure
DELASK   I $D(IBZ20),IBZ20,IBZ20'=$P(^DGCR(399,IBIFN,0),U,9) S %=2 W !,"SINCE THE PROCEDURE CODING METHOD HAS BEEN CHANGED, DO YOU W
          ANT TO DELETE ALL",!,"PROCEDURE CODES IN THIS BILL"
         I  D YN^DICN Q:%=-1  D:%=1 DELADD I %Y?1."?" W !!,"If you answer 'Yes', all procedure codes will be DELETED from this bill.
          ",! G DELASK
         K %,%Y,DA,IBZ20,DIK ;W !,"Procedure Entry:"
         ;
CODDT    I $D(IBIFN),$D(^DGCR(399,IBIFN,0)),$P(^(0),U,9) S DIC("V")=$S($P(^(0),U,9)=9:"I +Y(0)=80.1",$P(^(0),U,9)=4!($P(^(0),U,9)=5)
          :"I +Y(0)=81",1:"")
         I $P($G(^DGCR(399,IBIFN,0)),"^",5)<3 S IBZTYPE=1 I $P($G(^UTILITY($J,"IB",1,1)),"^",2) S DGPROCDT=$P(^(1),"^",2) D ASKCOD
         S X=$$PRCDIV^IBCU71(IBIFN) I +X W !!,$P(X,U,2),!
         N Z,Z0 S Z=$G(^DGCR(399,IBIFN,"U")),Z0=$$FMTE^XLFDT($P(Z,U),"2D")_"-"_$$FMTE^XLFDT($P(Z,U,2),"2D")
         W !,"Select PROCEDURE DATE"_$S($TR(Z0,"-")'="":" ("_Z0_")",1:"")_": " R X:DTIME G:'$T!("^"[X) CODQ D:X["?" CODHLP
         S IBEX=0 D  ; Get procedure date
         . I X=" ",$D(DGPROCDT),DGPROCDT?7N S Y=DGPROCDT D D^DIQ W "   (",Y,")" Q
         . I X=" ",+$P($G(^DGCR(399,IBIFN,"OP",0)),"^",4) S (DGPROCDT,Y)=$O(^DGCR(399,IBIFN,"OP",0)) D D^DIQ W "   (",Y,")" Q
         . S %DT="EXP",%DT(0)=-DT D ^%DT K %DT I Y<1 S IBEX=1 Q
         . I '$$OPV2^IBCU41(Y,IBIFN,1) S IBEX=1 Q
         . S:'$G(IBZTYPE) X=$$OPV^IBCU41(Y,IBIFN) S DGPROCDT=Y
         I 'IBEX D ASKCOD,ADDCPT^IBCU71:$D(DGCPT)
         K IBEX
         G CODDT
         ;
ASKCOD   N Z,Z0,DA,IBACT,IBQUIT,IBLNPRV,IBCODE,IBPIEN  ;WCJ;2.0*432
         N IBPOPOUT  S IBPOPOUT=0  ; IB*2.0*447 BI
         K DGCPT
         S DGCPT=0,DGCPTUP=$P($G(^IBE(350.9,1,1)),"^",19),DGADDVST=0,IBFT=$P($G(^DGCR(399,IBIFN,0)),"^",19)
         I '$D(^DGCR(399,IBIFN,"CP",0)) S ^DGCR(399,IBIFN,"CP",0)=U_$$GETSPEC^IBEFUNC(399,304)
         ;
         F  S IBQUIT=0 D  Q:IBQUIT
         . S IBPOPOUT=0
         . D DICV ; restrict code type to PCM
         . S DIC("A")="   Select PROCEDURE: "
         . S DIC="^DGCR(399,"_IBIFN_",""CP"","
         . S DIC(0)="AEQMNL"
         . S DIC("S")="I '$D(DIV(""S""))&($P(^(0),U,2)=DGPROCDT)"
         . S DIC("DR")="1///^S X=DGPROCDT"
         . S DA(1)=IBIFN,DLAYGO=399
         . W ! D ^DIC I Y<1 S IBQUIT=1 Q
         . S IBPROCP=+Y
         . S IBCODE="" I Y["ICPT" S IBPIEN=+$P(Y,U,2),IBCODE=$P($$CPT^ICPTCOD(IBPIEN),U,2) ;IB*2.0*616, get procedure code, supporte
          d by ICR 1995
         . ; If we just added inactive code - it must be deleted.
         . S IBACT=0 ; Active flag
         . I Y["ICD0" S IBACT=$$ICD0ACT^IBACSV(+$P(Y,U,2),$$BDATE^IBACSV(IBIFN))
         . I Y["ICPT" S IBACT=$$CPTACT^IBACSV(+$P(Y,U,2),DGPROCDT)
         . S DGCPTNEW=$P(Y,"^",3) ;Was the procedure just added?
         . I DGCPTNEW,'IBACT D DELPROC Q
         . I 'IBACT W !,*7,"Warning:  Procedure code is inactive on this date",!
         . I DGCPTNEW,$D(^UTILITY($J,"IB")),$$INPAT^IBCEF(IBIFN),Y["ICPT(" D DATA^IBCU74(Y,.IBLNPRV)
         . S DGADDVST=$S(DGCPTNEW:1,$D(DGADDVST):DGADDVST,1:0)
         . N IBPRV,IBPRVO,IBPRVN
         . ;
         . ; Line level provider function by form type.
         . ;     CMS-1500 (FORM TYPE=2)
         . ;              RENDERING PROVIDER, REFERRING PROVIDER,
         . ;              and SUPERVISING PROVIDER.
         . ;     UB-04 (FORM TYPE=3)
         . ;              RENDERING PROVIDER, REFERRING PROVIDER,
         . ;              OPERATING PROVIDER, and OTHER OPERATING
         . ;              PROVIDER.
         . ;
         . ; Removed: Call to $$MAINPRV^IBCEU(IBIFN) is for claim
         . ;          level provider defaults.
         . ;     1. For new line level providers we don't need
         . ;        or want default claim level provider
         . ;        (requirement).
         . ;     2. We don't want to default claim level to
         . ;        line level provider (requirement).
         . ;
         . K DIC("V")  ; DEM;432 - KILL DIC("V") because this was for previous variable pointer use.
         . ;
         . N IBPROCSV  ; DEM;432 - Variable IBPROCSV is variable to preserve value of 'Y', which is procedure code info returned by 
          call to ^DIC.
         . S IBPROCSV=Y  ; DEM;432 - Preserve value of Y for after calls to FileMan (Y = procedure code info returned by call to ^DI
          C).
         . K DR   ;WCJ;IB*2.0*432
         . ;
         . I IBPROCSV["ICD0" S DR=".01",DIE=DIC,(IBPROCP,DA)=+Y D ^DIE Q:'$D(DA)!($D(Y))  K DR ; IB*2.0*461
         . ;
         . ;JRA;IB*2.0*608 Prompt user for Certificate of Medical Necessity (CMN) info
         . I $$FT^IBCEF(IBIFN)=2,$$CMNPRMT^IBJPS8(IBIFN,IBPROCP,$P($P(IBPROCSV,U,2),";")) D CMN^IBCU75(IBIFN,IBPROCP)
         . ;
         . I IBPROCSV["ICPT" S DR=".01;16",DIE=DIC,(IBPROCP,DA)=+Y D ^DIE Q:'$D(DA)!($D(Y))  K DR ; IB*2.0*447 BI
         . ;
         . S DR=""
         . ;
         . ; MRD;IB*2.0*516 - Added line level PROCEDURE DESCRIPTION field,
         . ; asked only if the procedure is an "NOC".
         . I IBPROCSV["ICPT",$$NOCPROC(IBPROCSV,IBCODE,DGPROCDT) D  ; added IBCODE,DGPROCDT in *604
         . . S DA=$P(IBPROCSV,"^")  ; The line# on the bill/claim.
         . . S DR=51                ; Field# for PROCEDURE DESCRIPTION
         . . D ^DIE
         . . Q
         . ;
         . D EN^IBCU7B ; DEM;432 - Call to line level provider user input.
         . S Y=IBPROCSV  ; DEM;432 - Restore value of Y after calls to FileMan
         . K IBPROCSV
         . K DR   ;WCJ;IB*2.0*432
         . I IBPOPOUT Q   ; IB*2.0*447 BI
         . S DR="" I Y["ICPT" S DR="6;5//"_$$DEFDIV(IBIFN)_";"
         . ;JWS;IB*2.0*592 US1108 - Dental
         . ;IA# 10018
         . S DR=DR_$S(IBFT=7:"8;",IBFT=2:"8;9;17//NO;",1:"")_3,DIE=DIC,(IBPROCP,DA)=+Y D ^DIE Q:'$D(DA)!($E($G(Y))=U)
         . K DR   ;WCJ;IB*2.0*432
         . ;
         . ; MRD;IB*2.0*516 - Allow user to add an NDC and Units.  Ask only if
         . ; coding system is not ICD and this is not a prescription claim. If
         . ; an NDC is entered, prompt for Units.
         . I $P($G(^DGCR(399,IBIFN,0)),U,9)'=9,'$$RXLINK^IBCSC5C(IBIFN,IBPROCP) D
         . . ;JWS;IB*2.0*592 US1108 - Dental
         . . I IBFT=7 Q
         . . K DA
         . . S DA=IBPROCP,DA(1)=IBIFN,DIE="^DGCR(399,"_IBIFN_",""CP"","
         . . ; vd/Beginning IB*2*577 - Added the prompt for Unit/Basis of Measurement.
         . . ; S DR="53NDC NUMBER;I X="""" S Y="""";54//1"
         . . S DR="53NDC NUMBER;I X="""" S Y="""";52R~//UN;54R~QUANTITY//1"  ;Prompt for NDC, UN & amt.
         . . ; vd/Ending IB*2*577
         . . D ^DIE
         . . Q
         . ;
         . I IBFT=3 D:'$$INPAT^IBCEF(IBIFN) ATTACH  ; DEM;432 - Prompt for Attachment Control Number.
         . ; DEM;432 - Add Additional OB Minutes to DR string for call to DIE.
         . S DR=$$SPCUNIT(IBIFN,IBPROCP) S:DR["15;" DR=DR_"74Additional OB Minutes" D ^DIE ; miles/minutes/hours
         . ;JWS;IB*2.0*592 US1108 - Dental
         . I IBFT=2!(IBFT=7) D
         .. D DX^IBCU72(IBIFN,IBPROCP)
         .. ;JWS;IB*2.0*592 US1108 - Dental
         .. I IBFT'=7 S X=$$ADDTNL(IBIFN,.DA)
         . Q:$$INPAT^IBCEF(IBIFN)  ;only outpatient bills
         . ;JWS;IB*2.0*592 US1108 - Dental input fields
         . I IBFT=7 D ORAL^IBCU72
         . ;add procedures to array for download to PCE: dgcpt(assoc clinic,cpt,'provider^first dx^modifiers',cnt)=""
         . S DGPROC=$G(^DGCR(399,IBIFN,"CP",+DA,0))
         . S X=$P(DGPROC,U,18)_U_+$G(^IBA(362.3,+$P(DGPROC,U,11),0))_U_$P(DGPROC,U,15)
         . I 'DGCPTNEW,$P(DGPROC,"^",7)="" S DGCPTNEW=2
         . I DGCPTUP,DGCPTNEW S DGCPT=DGCPT+1 I $P(DGPROC,"^",7) S DGCPT($P(DGPROC,"^",7),+DGPROC,X,DGCPT)=""
         . ; add visit date to bill
         . I DGADDVST S (X,DINUM)=DGPROCDT D VFILE1^IBCOPV1 K DINUM,X,DGNOADD,DGADDVST
         ; Delete modifiers with only a sequence #, no code
         S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  S Z0=0 F  S Z0=$O(^DGCR(399,IBIFN,"CP",Z,"MOD",Z0)) Q:'Z0  I $P($G(^(Z0,0)),
          U,2)="" S DA(2)=IBIFN,DA(1)=Z,DA=Z0,DIK="^DGCR(399,"_DA(2)_",""CP"","_DA(1)_",""MOD""," D ^DIK
         Q
CODQ     K %DT,DGPROC,DIC,DIE,DR,DGPROCDT,IBPROCP,DLAYGO
         K IBFT,DGNOADD,DGADDVST,DGCPT,DGCPTUP,IBZTYPE,DGCPTNEW
         Q
         ;
DELPROC  ; Remove the selected procedure, because of inactive status (cancel selection)
         W !!,*7,"The Procedure code is inactive on ",$$DAT1^IBOUTL(DGPROCDT),"."
         W !,"Please select another Procedure."
         S DA(1)=IBIFN,DA=+Y,DIK="^DGCR(399,"_IBIFN_",""CP"","
         D ^DIK
         Q
         ;
DELADD   N Z,Z0,DA,DIK,X,Y
         S DA(1)=IBIFN
         ;Delete references to proc on rev codes
         S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"RC",Z)) Q:'Z  S Z0=$G(^(Z,0)) I Z0'="",$P(Z0,U,15)!$S($P(Z0,U,10)=3:$P(Z0,U,11),1:0) S DIE
          ="^DGCR(399,"_DA(1)_",""RC"",",DA=Z,DR=".11///@;.15///@"_$S($P(Z0,U,8):"",1:";.08////1") D ^DIE
         S DIK="^DGCR(399,"_DA(1)_",""CP""," F DA=0:0 S DA=$O(^DGCR(399,DA(1),"CP",DA)) Q:'DA  D ^DIK
         S DGRVRCAL=1
         Q
         ;
DTMES    ;Message if procedure date not in date range
         Q:'$D(IBIFN)  Q:'$D(^DGCR(399,IBIFN,"U"))  S DGNODUU=^("U")
         G:X'<$P(DGNODUU,"^")&(X'>$P(DGNODUU,"^",2)) DTMESQ
         W *7,!!?3,"Date must be within STATEMENT COVERS FROM and STATEMENT COVERS TO period."
         S Y=$P(DGNODUU,"^") X ^DD("DD")
         W !?3,"Enter a date between ",Y," and " S Y=$P(DGNODUU,"^",2) X ^DD("DD") W Y,!
         K X,Y
DTMESQ   K DGNODUU Q
         ;
CODHLP   ;Display Additional Procedure codes
         N I,J,Y,IBMOD
         I '$O(^DGCR(399,IBIFN,"CP",0)) W !!?5,"No Codes Entered!",! Q
         W ! F I=0:0 S I=$O(^DGCR(399,IBIFN,"CP",I)) Q:'I  S Y=$G(^(I,0)) S Z=$$PRCNM^IBCSCH1($P(Y,"^",1),$P(Y,"^",2)) W !?5,$E($P(Z
          ,"^",2),1,33),?40,"- ",$P(Z,"^") D
         . N IBY
         . S IBY=$P(Y,U,2)
         . S IBMOD=$$GETMOD^IBEFUNC(IBIFN,I,1)
         . I IBMOD'="" S IBMOD="/"_IBMOD W IBMOD
         . W ?60,"Date: " S Y=IBY D DT^DIQ
         W !
         ;
         K Z Q
         ;
DICV     I $D(IBIFN),$D(^DGCR(399,IBIFN,0)),$P(^(0),U,9) S DIC("V")=$S($P(^(0),U,9)=9:"I +Y(0)=80.1",$P(^(0),U,9)=4!($P(^(0),U,9)=5)
          :"I +Y(0)=81",1:"")
         Q
         ;
DEFDIV(IBIFN) --
          ; Find default division for bill IBIFN
         Q $P($G(^DG(40.8,+$P($G(^DGCR(399,IBIFN,0)),U,22),0)),U)
         ;
ADDTNL(IBIFN,DA) --
          ;
         N DR,IBOK,X,Y,DIR
         S IBOK=1
         S DR="19T;50.09T;50.08T" D ^DIE  ; WCJ;IB*2.0*488 Added Ts
         ;I '($$FT^IBCEF(IBIFN)'=3&($$INPAT^IBCEF(IBIFN))) D ATTACH  ; DEM;432 - Prompt for Attachment Control Number.
         I '($$FT^IBCEF(IBIFN)=3&($$INPAT^IBCEF(IBIFN))) D ATTACH  ; DEM;432 - Prompt for Attachment Control Number.
         I $D(Y) S IBOK=0 G ADDTNLQ
         ;/Beginning of IB*2.0*488 (vd)
         ;S DIR("B")="NO",DIR("A")="EDIT CMS-1500 SPECIAL PROGRAM FIELDS and BOX 19?: ",DIR("A",1)=" ",DIR(0)="YA"
         ;S DIR("?",1)="Respond YES only if you need to add/edit data for chiropractic visits,"
         ;S DIR("?")="EPSDT care, or if billing for HOSPICE and attending is not a hospice employee."
         ;D ^DIR K DIR
         ;I Y'=1 S IBOK=0 G ADDTNLQ
         ;S DR="W !,""  <<EPSDT>>"";50.07;W !!,""  <<HOSPICE>>"";50.03"
         S DR="50.07T;50.03T"   ;WCJ;IB*2.0*488 added Ts
         ;/End of IB*2.0*488 (vd)
         D ^DIE
         W !
ADDTNLQ  Q IBOK
         ;
XTRA1(Y) ;
         K Y
         Q
         ;
SPCUNIT(IBIFN,DA) --
          ; return fields for special units if applicable, in DR form
         N IB0,IBCPT,IBDR,IBCT,IBFT,DFN S IBDR=""
         S IB0=$G(^DGCR(399,+$G(IBIFN),0)),IBCT=$P(IB0,U,27),IBFT=$P(IB0,U,19),DFN=$P(IB0,U,2)
         S IBCPT=$G(^DGCR(399,+$G(IBIFN),"CP",+$G(DA),0)) I IBCPT'["ICPT" G SPCUNTQ
         I +$$ITMUNIT^IBCRU4(+IBCPT,5,IBCT) S IBDR="15;" D SROMIN^IBCU74(IBIFN,DA) G SPCUNTQ ; minutes
         I +$$ITMUNIT^IBCRU4(+IBCPT,4,IBCT) S IBDR="21;" G SPCUNTQ ; miles
         I +$$ITMUNIT^IBCRU4(+IBCPT,6,IBCT) S IBDR="22//"_$$OBSHOUR^IBCU74(DFN,$P(IBCPT,U,2))_";" G SPCUNTQ ; hours
         I +IBFT=2,$P($G(^IBE(353.2,+$P(IBCPT,U,10),0)),U,2)="ANESTHESIA" S IBDR="15;" ; minutes
SPCUNTQ  Q IBDR
         ;
ATTACH   ; DEM;432 - Attachment control number.
         ; Ask if user wants to enter Attachment Control Number.
         N DIR,X,Y,DA,DIE,DR
         S DIR("A")="Enter Attachment Control Number"
         S DIR(0)="Y",DIR("B")="NO"
         D ^DIR
         Q:'Y
         ; User chose to enter Attachment Control Number.
         ; User enters Attachment Control fields.
         S DA(1)=IBIFN,DA=IBPROCP
         S DIE="^DGCR(399,"_DA(1)_",""CP"","
         S DR="71Report Type;72Report Transmission Method;70Attachment Control Number"
         D ^DIE
         Q
         ;
NOCPROC(IBPROCSV,IBCODE,IBDATE) --
          ; MRD;IB*2.0*516 - Function to determine if procedure is an
         ; "NOC". Returns '1' if "NOC" procedure, otherwise '0'.
         ;
         N IBNOC,IBPROCEX,IBPROCIN,IBPROCNM,IBX,IBLINES,IBSTR,IBEND,IBLN
         S IBNOC=0
         I $G(IBPROCSV)="" G NOCPROCQ
         I $G(IBCODE)="" G NOCPROCQ
         I $G(IBDATE)'?7N G NOCPROCQ
         S IBPROCIN=$P($P(IBPROCSV,U,2),";") ;parsing out the IEN
         I IBPROCIN="" G NOCPROCQ
         ;
         ; If procedure code ends in '99', quit with a '1'.
         ;
         I $E(IBCODE,$L(IBCODE)-1,$L(IBCODE))=99 S IBNOC=1 G NOCPROCQ ;Does code end with 99? If so NOC
         ;
         ; Pull procedure name, then check to see if it contains one of the
         ; specified strings.
         ;
         S IBPROCNM=$$CPT^ICPTCOD(IBCODE,IBDATE)
         S IBPROCNM=$P(IBPROCNM,U,3)
         I IBPROCNM'="",($$NOC(IBPROCNM)) S IBNOC=1 G NOCPROCQ ; Does external match NOC strings? if so NOC
         ;
         ;Does array strings match any of the specified strings
         S IBLINES=$$CPTD^ICPTCOD(IBCODE,"IBINFO",,IBDATE) ;get number of lines/array of lines
         S IBEND=1 S:IBLINES>1 IBEND=IBLINES-1 ;set up counter for loop
         F IBLN=1:1:IBEND D  Q:IBNOC=1  ;loop through array so we can check if node values = NOC
         . N IBSTR S IBSTR=$$TM($G(IBINFO(IBLN)))_" "_$$TM($G(IBINFO(IBLN+1)))_" " ;Build strings for NOC comparison
         . S IBNOC=$$NOC(IBSTR) ;is current combination of strings a NOC?
         . Q
         ;
NOCPROCQ ; Quit out.
         K IBINFO ;killing the array made in CPTD^ICPTCOD
         Q IBNOC
         ;
NOC(IBTEXT) --
          ; Quit with '1' if IBTEXT contains one of the specified strings.
         ;
         S IBTEXT=$TR(IBTEXT,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
         ;
         I IBTEXT["NOT OTHERWISE" Q 1
         I IBTEXT["NOT ELSEWHERE" Q 1
         I IBTEXT["NOT LISTED" Q 1
         I IBTEXT["UNLISTED" Q 1
         I IBTEXT["UNSPECIFIED" Q 1
         I IBTEXT["UNCLASSIFIED" Q 1
         I IBTEXT["NON-SPECIFIED" Q 1
         I IBTEXT["NOS " Q 1
         I IBTEXT["NOS;" Q 1
         I IBTEXT["NOS." Q 1
         I IBTEXT["NOS," Q 1
         I IBTEXT["NOS/" Q 1
         I IBTEXT["(NOS)" Q 1
         I IBTEXT["NOC " Q 1
         I IBTEXT["NOC;" Q 1
         I IBTEXT["NOC." Q 1
         I IBTEXT["NOC," Q 1
         I IBTEXT["NOC/" Q 1
         I IBTEXT["(NOC)" Q 1
         ;
         ; Check if last three charcters are 'NOC' or 'NOS'.
         ;
         S IBTEXT=$E(IBTEXT,$L(IBTEXT)-2,$L(IBTEXT))
         Q 0
         ;
TM(IBX,IBY) --
          ; Trim Character Y - Default " "
         S IBX=$G(IBX) Q:IBX="" IBX  S IBY=$G(IBY) S:'$L(IBY) IBY=" "
         F  Q:$E(IBX,1)'=IBY  S IBX=$E(IBX,2,$L(IBX))
         F  Q:$E(IBX,$L(IBX))'=IBY  S IBX=$E(IBX,1,($L(IBX)-1))
         Q IBX
         ;
ORALCAV(FLD) --
          ;EP;IB*2.0*592
         ; Dictionary Screen function called from Procedures Oral Cavity Fields:
         ; 399.0304.90.01, 399.0304.90.02, 399.0304.90.03, 399.0304.90.04, 399.0304.90.05 
         ; Prevents the same Oral Cavity from being selected more than once.
         ; Input: FLD - Field # of the field being checked
         ; DA - IEN of the Service Line Multiple being edited
         ; DA(1) - IEN of the 399 entry being edited
         ; Y - Internal Value of the user response
         ; Returns: 1 - Data input by the user is valid, 0 otherwise
         N NDE,RTN
         S NDE=$G(^DGCR(399,DA(1),"CP",DA,"DEN"))
         S RTN=1 ; Assume Valid Input
         Q:Y="" 1 ; No value entered
         ;
         ; Make sure there are no duplicates
         I FLD=90.01 D  Q RTN
         . I $P(NDE,"^",2)=Y S RTN=0 Q
         . I $P(NDE,"^",3)=Y S RTN=0 Q
         . I $P(NDE,"^",4)=Y S RTN=0 Q
         . I $P(NDE,"^",5)=Y S RTN=0 Q
         I FLD=90.02 D  Q RTN
         . I $P(NDE,"^",1)=Y S RTN=0 Q
         . I $P(NDE,"^",3)=Y S RTN=0 Q
         . I $P(NDE,"^",4)=Y S RTN=0 Q
         . I $P(NDE,"^",5)=Y S RTN=0 Q
         I FLD=90.03 D  Q RTN
         . I $P(NDE,"^",1)=Y S RTN=0 Q
         . I $P(NDE,"^",2)=Y S RTN=0 Q
         . I $P(NDE,"^",4)=Y S RTN=0 Q
         . I $P(NDE,"^",5)=Y S RTN=0 Q
         I FLD=90.04 D  Q RTN
         . I $P(NDE,"^",1)=Y S RTN=0 Q
         . I $P(NDE,"^",2)=Y S RTN=0 Q
         . I $P(NDE,"^",3)=Y S RTN=0 Q
         . I $P(NDE,"^",5)=Y S RTN=0 Q
         I FLD=90.05 D  Q RTN
         . I $P(NDE,"^",1)=Y S RTN=0 Q
         . I $P(NDE,"^",2)=Y S RTN=0 Q
         . I $P(NDE,"^",3)=Y S RTN=0 Q
         . I $P(NDE,"^",4)=Y S RTN=0 Q
         Q RTN
         ;
TOOTHS(FLD) --
          ;EP;IB*2.0*592
         ; Dictionary Screen function called from Dental Service Line Tooth fields:
         ; 399,91,.02, 399,91,.03, 399,91,.04, 399,91,.05, 399,91,.06. Prevents the 
         ; same Tooth Surface from being selected more than once.
         ; Input: FLD - Field # of the field being checked
         ; DA - Tooth Surface multiple IEN
         ; DA(1) - Service Line multiple IEN
         ; DA(2) - IEN of the 399 entry being edited
         ; Y - Internal Value of the user response
         ; Returns: 1 - Data input by the user is valid, 0 otherwise
         N NDE,RTN
         S NDE=$G(^DGCR(399,DA(2),"CP",DA(1),"DEN1",DA,0))
         S RTN=1 ; Assume Valid Input
         Q:Y="" 1 ; No value entered
         ;
         ; Make sure there are no duplicates
         I FLD=.02 D  Q RTN
         . I $P(NDE,"^",3)=Y S RTN=0 Q
         . I $P(NDE,"^",4)=Y S RTN=0 Q
         . I $P(NDE,"^",5)=Y S RTN=0 Q
         . I $P(NDE,"^",6)=Y S RTN=0 Q
         I FLD=.03 D  Q RTN
         . I $P(NDE,"^",2)=Y S RTN=0 Q
         . I $P(NDE,"^",4)=Y S RTN=0 Q
         . I $P(NDE,"^",5)=Y S RTN=0 Q
         . I $P(NDE,"^",6)=Y S RTN=0 Q
         I FLD=.04 D  Q RTN
         . I $P(NDE,"^",2)=Y S RTN=0 Q
         . I $P(NDE,"^",3)=Y S RTN=0 Q
         . I $P(NDE,"^",5)=Y S RTN=0 Q
         . I $P(NDE,"^",6)=Y S RTN=0 Q
         I FLD=.05 D  Q RTN
         . I $P(NDE,"^",2)=Y S RTN=0 Q
         . I $P(NDE,"^",3)=Y S RTN=0 Q
         . I $P(NDE,"^",4)=Y S RTN=0 Q
         . I $P(NDE,"^",6)=Y S RTN=0 Q
         I FLD=.06 D  Q RTN
         . I $P(NDE,"^",2)=Y S RTN=0 Q
         . I $P(NDE,"^",3)=Y S RTN=0 Q
         . I $P(NDE,"^",4)=Y S RTN=0 Q
         . I $P(NDE,"^",5)=Y S RTN=0 Q
         Q RTN
         ; 

*****   INDEX OF IBCU7   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   %            DELASK*,DELASK+1,DELASK+2!
   %DT          CODDT+8*!,CODQ!
   %DT(0        CODDT+8*
   %Y           DELASK+1,DELASK+2!
   DA           DELASK+2!,ASKCOD~,ASKCOD+52*,ASKCOD+57*,ASKCOD+64*,ASKCOD+77*,ASKCOD+86!,ASKCOD+87*,ASKCOD+102,ASKCOD+107
                ASKCOD+114*,DELPROC+3*,DELADD~,DELADD+3*,DELADD+4*,ADDTNL~,SPCUNIT~,SPCUNIT+3,SPCUNIT+4,ATTACH+2~,ATTACH+9*
                ORALCAV+10,TOOTHS+11
   DA(1         CHKX+2,ASKCOD+14*,ASKCOD+87*,ASKCOD+114*,DELPROC+3*,DELADD+1*,DELADD+3,DELADD+4,ATTACH+9*,ATTACH+10,ORALCAV+10
                TOOTHS+11
   DA(2         ASKCOD+114*,TOOTHS+11
   DFN          SPCUNIT+1~,SPCUNIT+2*,SPCUNIT+6
   DGADDVST     ASKCOD+3*,ASKCOD+26*,ASKCOD+112!,CODQ+1!
   DGCPT        CODDT+11,ASKCOD+2!,ASKCOD+3*,ASKCOD+110*,CODQ+1!
   DGCPT(       ASKCOD+110*
   DGCPTNEW     ASKCOD+22*,ASKCOD+23,ASKCOD+25,ASKCOD+26,ASKCOD+109*,ASKCOD+110,CODQ+1!
   DGCPTUP      ASKCOD+3*,ASKCOD+110,CODQ+1!
   DGNOADD      ASKCOD+112!,CODQ+1!
   DGNODUU      DTMES+1*,DTMES+2,DTMES+4,DTMES+5,DTMESQ!
   DGPROC       ASKCOD+107*,ASKCOD+108,ASKCOD+109,ASKCOD+110,CODQ!
   DGPROCDT     CHKX+8*,CODDT+1*,CODDT+6,CODDT+7*,CODDT+10*,ASKCOD+21,ASKCOD+63,ASKCOD+112,CODQ!,DELPROC+1
>> DGRVRCAL     DELADD+5*
   DIC          ASKCOD+10*,ASKCOD+52,ASKCOD+57,ASKCOD+77,CODQ!
   DIC("A"      ASKCOD+9*
   DIC("DR"     ASKCOD+13*
   DIC("S"      ASKCOD+12*
   DIC("V"      CODDT*,ASKCOD+46!,DICV*
   DIC(0        ASKCOD+11*
   DIE          ASKCOD+52*,ASKCOD+57*,ASKCOD+77*,ASKCOD+87*,CODQ!,DELADD+3*,ATTACH+2~,ATTACH+10*
   DIK          DELASK+2!,ASKCOD+114*,DELPROC+3*,DELADD~,DELADD+4*
   DINUM        ASKCOD+112*!
   DIR          ADDTNL+1~,ATTACH+2~
   DIR("A"      ATTACH+3*
   DIR("B"      ATTACH+4*
   DIR(0        ATTACH+4*
   DLAYGO       ASKCOD+14*,CODQ!
   DR           ASKCOD+50!,ASKCOD+52*!,ASKCOD+57*!,ASKCOD+59*,ASKCOD+65*,ASKCOD+72!,ASKCOD+74*,ASKCOD+77*,ASKCOD+78!,ASKCOD+90*
                ASKCOD+97*,CODQ!,DELADD+3*,ADDTNL+1~,ADDTNL+3*,ADDTNL+14*,ATTACH+2~,ATTACH+11*
   DT           CODDT+8
   DTIME        CODDT+4
   FLD          ORALCAV~,ORALCAV+15,ORALCAV+20,ORALCAV+25,ORALCAV+30,ORALCAV+35,TOOTHS~,TOOTHS+16,TOOTHS+21,TOOTHS+26,TOOTHS+31
                TOOTHS+36
   I            CODHLP+1~,CODHLP+3*,CODHLP+6
   IB0          SPCUNIT+1~,SPCUNIT+2*
   IBACT        ASKCOD~,ASKCOD+19*,ASKCOD+20*,ASKCOD+21*,ASKCOD+23,ASKCOD+24
   IBCODE       ASKCOD~,ASKCOD+17*,ASKCOD+63,NOCPROC~,NOCPROC+6,NOCPROC+13,NOCPROC+18,NOCPROC+23
   IBCPT        SPCUNIT+1~,SPCUNIT+3*,SPCUNIT+4,SPCUNIT+5,SPCUNIT+6,SPCUNIT+7
   IBCT         SPCUNIT+1~,SPCUNIT+2*,SPCUNIT+4,SPCUNIT+5,SPCUNIT+6
   IBDATE       NOCPROC~,NOCPROC+7,NOCPROC+18,NOCPROC+23
   IBDR         SPCUNIT+1~*,SPCUNIT+4*,SPCUNIT+5*,SPCUNIT+6*,SPCUNIT+7*,SPCUNTQ
   IBEND        NOCPROC+3~,NOCPROC+24*,NOCPROC+25
   IBEX         CODDT+5*,CODDT+8*,CODDT+9*,CODDT+11,CODDT+12!
   IBFT         ASKCOD+3*,ASKCOD+77,ASKCOD+85,ASKCOD+95,ASKCOD+99,ASKCOD+102,ASKCOD+105,CODQ+1!,SPCUNIT+1~,SPCUNIT+2*,SPCUNIT+7
   IBIFN        DELASK,CODDT,CODDT+1,CODDT+2,CODDT+3,CODDT+7,CODDT+9,CODDT+10,ASKCOD+3,ASKCOD+4,ASKCOD+10,ASKCOD+14,ASKCOD+20
                ASKCOD+25,ASKCOD+55,ASKCOD+74,ASKCOD+83,ASKCOD+87,ASKCOD+95,ASKCOD+97,ASKCOD+100,ASKCOD+102,ASKCOD+103,ASKCOD+107
                ASKCOD+114
                DELPROC+3,DELADD+1,DELADD+3,DTMES+1,CODHLP+2,CODHLP+3,CODHLP+6,DICV,DEFDIV~,DEFDIV+1,ADDTNL~,ADDTNL+5,SPCUNIT~
                SPCUNIT+2,SPCUNIT+3,SPCUNIT+4,ATTACH+9
   IBINFO       NOCPROCQ+1!
   IBINFO(      NOCPROC+26
   IBLINES      NOCPROC+3~,NOCPROC+23*,NOCPROC+24
   IBLN         NOCPROC+3~,NOCPROC+25*,NOCPROC+26
   IBLNPRV      ASKCOD~,ASKCOD+25
   IBMOD        CODHLP+1~,CODHLP+6*,CODHLP+7*
   IBNOC        NOCPROC+3~,NOCPROC+4*,NOCPROC+13*,NOCPROC+20*,NOCPROC+25,NOCPROC+27*,NOCPROCQ+2
   IBOK         ADDTNL+1~,ADDTNL+2*,ADDTNL+6*,ADDTNLQ
   IBPIEN       ASKCOD~,ASKCOD+17*
   IBPOPOUT     ASKCOD+1~*,ASKCOD+7*,ASKCOD+73
   IBPROCEX     NOCPROC+3~
   IBPROCIN     NOCPROC+3~,NOCPROC+8*,NOCPROC+9
   IBPROCNM     NOCPROC+3~,NOCPROC+18*,NOCPROC+19*,NOCPROC+20
   IBPROCP      ASKCOD+16*,ASKCOD+52*,ASKCOD+55,ASKCOD+57*,ASKCOD+77*,ASKCOD+83,ASKCOD+87,ASKCOD+97,ASKCOD+100,CODQ!,ATTACH+9
   IBPROCSV     ASKCOD+48~,ASKCOD+49*,ASKCOD+52,ASKCOD+55,ASKCOD+57,ASKCOD+63,ASKCOD+64,ASKCOD+70,ASKCOD+71!,NOCPROC~,NOCPROC+5
                NOCPROC+8
   IBPRV        ASKCOD+27~
   IBPRVN       ASKCOD+27~
   IBPRVO       ASKCOD+27~
   IBQUIT       ASKCOD~,ASKCOD+6*,ASKCOD+15*
   IBSTR        NOCPROC+3~,NOCPROC+26~*,NOCPROC+27
   IBTEXT       NOC~,NOC+2*,NOC+4,NOC+5,NOC+6,NOC+7,NOC+8,NOC+9,NOC+10,NOC+11,NOC+12,NOC+13,NOC+14,NOC+15,NOC+16,NOC+17,NOC+18
                NOC+19,NOC+20,NOC+21,NOC+22,NOC+26*
   IBX          NOCPROC+3~,TM~,TM+1*,TM+2*,TM+3*,TM+4
   IBY          CODHLP+4~,CODHLP+5*,CODHLP+8,TM~,TM+1*,TM+2,TM+3
   IBZ20        DELASK,DELASK+2!
   IBZTYPE      CODDT+1*,CODDT+10,CODQ+1!
   J            CODHLP+1~
>> M            CHKX+7*,CHKX+8
>> N            CHKX+7*
   NDE          ORALCAV+9~,ORALCAV+10*,ORALCAV+16,ORALCAV+17,ORALCAV+18,ORALCAV+19,ORALCAV+21,ORALCAV+22,ORALCAV+23,ORALCAV+24
                ORALCAV+26,ORALCAV+27,ORALCAV+28,ORALCAV+29,ORALCAV+31,ORALCAV+32,ORALCAV+33,ORALCAV+34,ORALCAV+36,ORALCAV+37
                ORALCAV+38
                ORALCAV+39,TOOTHS+10~,TOOTHS+11*,TOOTHS+17,TOOTHS+18,TOOTHS+19,TOOTHS+20,TOOTHS+22,TOOTHS+23,TOOTHS+24,TOOTHS+25
                TOOTHS+27,TOOTHS+28,TOOTHS+29,TOOTHS+30,TOOTHS+32,TOOTHS+33,TOOTHS+34,TOOTHS+35,TOOTHS+37,TOOTHS+38,TOOTHS+39
                TOOTHS+40
>> P            CHKX+7*
   RTN          ORALCAV+9~,ORALCAV+11*,ORALCAV+15,ORALCAV+16*,ORALCAV+17*,ORALCAV+18*,ORALCAV+19*,ORALCAV+20,ORALCAV+21*
                ORALCAV+22*,ORALCAV+23*,ORALCAV+24*,ORALCAV+25,ORALCAV+26*,ORALCAV+27*,ORALCAV+28*,ORALCAV+29*,ORALCAV+30
                ORALCAV+31*,ORALCAV+32*
                ORALCAV+33*,ORALCAV+34*,ORALCAV+35,ORALCAV+36*,ORALCAV+37*,ORALCAV+38*,ORALCAV+39*,ORALCAV+40,TOOTHS+10~,TOOTHS+12*
                TOOTHS+16,TOOTHS+17*,TOOTHS+18*,TOOTHS+19*,TOOTHS+20*,TOOTHS+21,TOOTHS+22*,TOOTHS+23*,TOOTHS+24*,TOOTHS+25*
                TOOTHS+26
                TOOTHS+27*,TOOTHS+28*,TOOTHS+29*,TOOTHS+30*,TOOTHS+31,TOOTHS+32*,TOOTHS+33*,TOOTHS+34*,TOOTHS+35*,TOOTHS+36
                TOOTHS+37*,TOOTHS+38*,TOOTHS+39*,TOOTHS+40*,TOOTHS+41
>> S            CHKX+7*
   U            CHKX+7,DELASK,CODDT,CODDT+2,CODDT+3,ASKCOD+4,ASKCOD+17,ASKCOD+20,ASKCOD+21,ASKCOD+55,ASKCOD+77,ASKCOD+83,ASKCOD+108
                ASKCOD+114,DELADD+3,CODHLP+5,DICV,DEFDIV+1,SPCUNIT+2,SPCUNIT+6,SPCUNIT+7,NOCPROC+8,NOCPROC+19
   X            CHKX+1,CHKX+2,CHKX+3!,CHKX+7*,CODDT+2*,CODDT+4*,CODDT+6,CODDT+7,CODDT+10*,ASKCOD+102*,ASKCOD+108*,ASKCOD+110
                ASKCOD+112*!,DELADD~,DTMES+2,DTMES+6!,ADDTNL+1~,ATTACH+2~
   Y            CHKX+8*,CODDT+6*,CODDT+7*,CODDT+8,CODDT+9,CODDT+10,ASKCOD+15,ASKCOD+16,ASKCOD+17,ASKCOD+20,ASKCOD+21,ASKCOD+22
                ASKCOD+25,ASKCOD+49,ASKCOD+52,ASKCOD+57,ASKCOD+70*,ASKCOD+74,ASKCOD+77,DELPROC+3,DELADD~,DTMES+4*,DTMES+5*,DTMES+6!
                CODHLP+1~
                CODHLP+3*,CODHLP+5,CODHLP+8*,ADDTNL+1~,ADDTNL+6,XTRA1~,XTRA1+1!,ATTACH+2~,ATTACH+6,ORALCAV+12,ORALCAV+16,ORALCAV+17
                ORALCAV+18,ORALCAV+19,ORALCAV+21,ORALCAV+22,ORALCAV+23,ORALCAV+24,ORALCAV+26,ORALCAV+27,ORALCAV+28,ORALCAV+29
                ORALCAV+31
                ORALCAV+32,ORALCAV+33,ORALCAV+34,ORALCAV+36,ORALCAV+37,ORALCAV+38,ORALCAV+39,TOOTHS+13,TOOTHS+17,TOOTHS+18
                TOOTHS+19,TOOTHS+20,TOOTHS+22,TOOTHS+23,TOOTHS+24,TOOTHS+25,TOOTHS+27,TOOTHS+28,TOOTHS+29,TOOTHS+30,TOOTHS+32
                TOOTHS+33,TOOTHS+34
                TOOTHS+35,TOOTHS+37,TOOTHS+38,TOOTHS+39,TOOTHS+40
   Z            CODDT+3~*,ASKCOD~,ASKCOD+114*,DELADD~,DELADD+3*,CODHLP+3*,CODHLP+11!
   Z0           CODDT+3~*,CODDT+4,ASKCOD~,ASKCOD+114*,DELADD~,DELADD+3*

Global Variables  ( * Changed  ! Killed)
   ^DD("DD"            CHKX+8,DTMES+4,DTMES+5
   ^DG(40.8            DEFDIV+1
   ^DGCR(399           DELASK,CODDT,CODDT+1,CODDT+3,CODDT+7,ASKCOD+3,ASKCOD+4*,ASKCOD+83,ASKCOD+107,ASKCOD+114,DELADD+3,DELADD+4
                       DTMES+1,CODHLP+2,CODHLP+3,DICV,DEFDIV+1,SPCUNIT+2,SPCUNIT+3,ORALCAV+10,TOOTHS+11
   ^IBA(362.3          ASKCOD+108
   ^IBE(350.9          CHKX+2,ASKCOD+3
   ^IBE(353.2          SPCUNIT+7
   ^UTILITY($J         CHKX+5,CHKX+7*,CHKX+8,CODDT+1,ASKCOD+25

Naked Globals
   ^(           ASKCOD+114,DELADD+3,CODHLP+3
   ^("U"        DTMES+1
   ^(0          CODDT,DICV
   ^(1          CHKX+8,CODDT+1

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$ADDTNL     ASKCOD+102
   $$DEFDIV     ASKCOD+74
   $$NOC        NOCPROC+20,NOCPROC+27
   $$NOCPROC    ASKCOD+63
   $$SPCUNIT    ASKCOD+97
   $$TM         NOCPROC+26
   ADDTNLQ      ADDTNL+6
   ASKCOD       CODDT+1,CODDT+11
   ATTACH       ASKCOD+95,ADDTNL+5
   CHKXQ        CHKX+1,CHKX+2,CHKX+5
   CODDT        CODDT+13
   CODHLP       CODDT+4
   CODQ         CODDT+4
   DELADD       DELASK+1
   DELASK       DELASK+1
   DELPROC      ASKCOD+23
   DICV         ASKCOD+8
   DTMESQ       DTMES+2
   NOCPROCQ     NOCPROC+5,NOCPROC+6,NOCPROC+7,NOCPROC+9,NOCPROC+13,NOCPROC+20
   SPCUNTQ      SPCUNIT+3,SPCUNIT+4,SPCUNIT+5,SPCUNIT+6

External References
   ^%DT                CODDT+8
   EN^DDIOL            CHKX+4
   ^DIC                ASKCOD+15
   YN^DICN             DELASK+1
   ^DIE                ASKCOD+52,ASKCOD+57,ASKCOD+66,ASKCOD+77,ASKCOD+92,ASKCOD+97,DELADD+3,ADDTNL+3,ADDTNL+16,ATTACH+12
   ^DIK                ASKCOD+114,DELPROC+4,DELADD+4
   D^DIQ               CODDT+6,CODDT+7
   DT^DIQ              CODHLP+8
   ^DIR                ATTACH+5
   $$BDATE^IBACSV      ASKCOD+20
   $$CPTACT^IBACSV     ASKCOD+21
   $$ICD0ACT^IBACSV    ASKCOD+20
   $$FT^IBCEF          ASKCOD+55,ADDTNL+5
   $$INPAT^IBCEF       CHKX+2,ASKCOD+25,ASKCOD+95,ASKCOD+103,ADDTNL+5
   VFILE1^IBCOPV1      ASKCOD+112
   $$ITMUNIT^IBCRU4    SPCUNIT+4,SPCUNIT+5,SPCUNIT+6
   $$RXLINK^IBCSC5C    ASKCOD+83
   $$PRCNM^IBCSCH1     CODHLP+3
   $$OPV^IBCU41        CODDT+10
   $$OPV2^IBCU41       CODDT+9
   $$PRCDIV^IBCU71     CODDT+2
   ADDCPT^IBCU71       CODDT+11
   DX^IBCU72           ASKCOD+100
   ORAL^IBCU72         ASKCOD+105
   $$OBSHOUR^IBCU74    SPCUNIT+6
   DATA^IBCU74         ASKCOD+25
   SROMIN^IBCU74       SPCUNIT+4
   CMN^IBCU75          ASKCOD+55
   EN^IBCU7B           ASKCOD+69
   $$GETMOD^IBEFUNC    CODHLP+6
   $$GETSPEC^IBEFUNC   ASKCOD+4
   $$CMNPRMT^IBJPS8    ASKCOD+55
   $$DAT1^IBOUTL       DELPROC+1
   $$CPT^ICPTCOD       ASKCOD+17,NOCPROC+18
   $$CPTD^ICPTCOD      NOCPROC+23
   $$FMTE^XLFDT        CODDT+3

*****   END   *****


IBCU75   * *  202 Lines,  12010 Bytes, Checksum: B79458011                                            Mar 20, 2019@15:10:13 page 21
              2364 bytes in comments
IBCU75   ;ALB/JRA - INTERCEPT SCREEN INPUT OF PROCEDURE CODES (ENTER CMN INFO) ;23-Apr-18
         ;;2.0;INTEGRATED BILLING;**608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
         Q
         ;
CMN(IBXIEN,IBPROCP) --
          ;JRA;IB*2.0*608 Prompt user for CMN info
         ;Input: IBXIEN  = Internal bill/claim number
         ;       IBPROCP = Procedure line subscript in ^DGCR
         ;
         Q:('$G(IBXIEN)!('$G(IBPROCP)))
         N ABGMSG,ABGPO2,CERTDT,CERTYP,CHNGFRM,CMNNODE,CMNREQ,CMSG,DA,DIC,DIE,DIR,DGLB,DR,DRTAG,DTOLD,EDIT,EVNTDT,FIEN,FNAM,FORM,FRM
          TAG
         N FRMTYP,HT,HTOLD,I,IBPEB,WTOLD,LKGLB,LPM4ABG,LPM4SAT,MSG,NODE0,O2SAT,OK,OLDVAL,PROCA,PROCB,QUIT,RRDT,TDY,THERPYDT,X,Y
         S DGLB="^TMP(""CMN"",$J)" K @DGLB
         S LKGLB="^DGCR(399,"_IBXIEN_")" L +@LKGLB:0 I '$T W !,$C(7),"Another user is editing this entry -- EXITING" H 2 Q
         S EVNTDT=$$FMTE^DILIBF($G(IBDT),"5U")  ;Get the Event Date - will be the default for several date fields.
         S TDY=$$HTFM^DILIBF(+$H)
         S ABGMSG="""ABG PO2"" and/or ""O2 Saturation"" Test(s) REQUIRED"
         S DA=IBPROCP,DA(1)=IBXIEN,DIE="^DGCR(399,"_IBXIEN_",""CP"","
         ;Set FORM array of CMN Data Nodes (D399.6 field 3) indexed by CMN Form Type ien
         S FNAM="" F  S FNAM=$O(^IBE(399.6,"B",FNAM)) Q:FNAM=""  S FIEN=+$O(^IBE(399.6,"B",FNAM,"")) I FIEN D
         . S FORM(FIEN)=$P($G(^IBE(399.6,FIEN,0)),U,4) K:$TR(FORM(FIEN)," ")="" FORM(FIEN)
         I $D(FORM)'>1 S FORM(1)="CMN-484",FORM(2)="CMN-10126"  ;Default nodes for CMN data
         S DIE("NO^")="BACKOUTOK"
         S CMNREQ("MSG")="If ""CMN Required?"" is changed to ""NO"", existing CMN data will be deleted!"
         S FRMTYP("MSG")="Changing the Form Type will delete any data specific to the current Form Type!"
         S CERTYP("MSG")="You are changing the Certification Type!"
         S CERTYP("MSGI")="Changing Certification Type to ""I"" will delete ""Recertification/Revision Date!"""
         D CMNREQ
         S QUIT=0 F  D  Q:QUIT
         . D ^DIE
         . S CMNREQ=$G(CMNREQ),FRMTYP=$G(FRMTYP),CERTYP=$G(CERTYP)
         . S CMNREQ=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,23,"I") I CMNREQ=0 S QUIT=1 Q
         . S FRMTYP=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24,"I")
         . S CERTYP=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.01,"I")
         . I FRMTYP,CERTYP'="" S QUIT=1 Q
         . I CMNREQ="" W $C(7),!,?3,"""CMN Required?"" is a REQUIRED field!" D CMNREQ Q
         . S MSG=""
         . I FRMTYP="" S MSG="""Form Type"" and ""Certification Type"" are REQUIRED!",DRTAG="CMNREQ"
         . E  I CERTYP="" S MSG="""Certification Type"" is REQUIRED!",DRTAG="CMNREQ"
         . I MSG]"" S DR="",MSG=MSG_$C(13,10)_"   ** To exit, set ""CMN Required?"" to ""NO""" W $C(7),!,?3,MSG D @DRTAG Q
         . S QUIT=1
         ;
         ;If CMN is not required, delete all CMN data that may be associated with this procedure & exit
         I $G(CMNREQ)=0 D  Q
         . S FIEN="" F  S FIEN=$O(FORM(FIEN)) Q:FIEN=""  I FORM(FIEN)]"" D
         . . S CMNNODE="^DGCR(399,"_IBXIEN_",""CP"","_IBPROCP_","""_FORM(FIEN)_""")" K @CMNNODE
         . S CMNNODE="^DGCR(399,"_IBXIEN_",""CP"","_IBPROCP_",""CMN"")" K @CMNNODE S @CMNNODE=0
         ;
         ;If user selected Form Type we need to remove data that may exist for any other Form Type.
         I $G(FRMTYP) S FIEN="" F  S FIEN=$O(FORM(FIEN)) Q:FIEN=""  I FIEN'=FRMTYP D
         . S CMNNODE="^DGCR(399,"_IBXIEN_",""CP"","_IBPROCP_","""_FORM(FIEN)_""")" K @CMNNODE
         ;
         I $G(CERTYP)="I" D SETFLD(24.07,"@")  ;If "Certification Type" is "INITIAL" delete "Recertification/Revision Date"
         ;
         I (($D(EDIT)&($G(EDIT)'="Y"))!(X=""!('$G(CMNREQ)!('$G(FRMTYP)!($G(CERTYP)=""))))) Q
         ;
         S FRMTAG="DR"_$S($G(FORM(FRMTYP))[484:484,1:10126)  ;Set tag to call to set DR with form-specific logic
         D DRCOMM
         ;
         ;Prompt user for remaining questions & check for missing required fields
         S (QUIT,UPCT)=0,DRTAG(1)="" F  D  Q:QUIT
         . D ^DIE
         . K MSG S MSG=0
         . S DRTAG=""
         . S CERTYP=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.01,"I")
         . S HT=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.02,"I")
         . S THERPYDT=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.05,"I")
         . S CERTDT=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.06,"I")
         . S RRDT=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.07,"I")
         . I 'CERTDT S MSG=MSG+1,MSG(MSG)="""Last Certification Date""" S DRTAG="DRCOMM"
         . I 'RRDT,CERTYP'="I" S MSG=MSG+1,MSG(MSG)="""Recertification/Revision Date""" S:DRTAG="" DRTAG="RRDT"
         . I 'THERPYDT S MSG=MSG+1,MSG(MSG)="""Date Therapy Started""" S:DRTAG="" DRTAG="STRTDT"
         . I FORM(FRMTYP)[10126 D
         . . I $$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.217,"I")="" S MSG=MSG+1,MSG(MSG)="""Is this for Parenteral nutrition, Enteral nut
          rition, or Both?""" S:DRTAG="" DRTAG="DR10126"
         . I +MSG D  Q
         . . S:X="" UPCT=UPCT+1 I UPCT>1,DRTAG=DRTAG(1) S QUIT=1 Q
         . . S DR="" W $C(7) F I=1:1:MSG W !,?3,MSG(I)_" is REQUIRED!"
         . . W !,?3,"** Exiting now will leave required fields unanswered."
         . . W !,?3,"** If you must exit, enter '^' again."
         . . S DRTAG(1)=DRTAG D @DRTAG
         . S QUIT=1
         ;
         ;Delete dates associated with result fields that were deleted
         I $D(@DGLB)>1 D
         . N FLD
         . S FLD="" F  S FLD=$O(@DGLB@(FLD)) Q:FLD=""  D SETFLD(FLD,"@")
         . K @DGLB
         Q
         ;
CMNREQ   ; Set DR with logic for 1st 3 fields: "CMN Required?", "Form Type" and "Certification Type"
         S DR="@23;S CMNREQ(""OLD"")=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,23,""I"");23R~T//NO;S CMNREQ=X I 'X,'CMNREQ(""OLD"") S Y=""@99
          9"";"
         S DR=DR_"I CMNREQ=0,CMNREQ(""OLD"")=1 S FRM=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24,""I"") S:'FRM OK=1 S:FRM OK=$$USEROK^IBCU75
          (23,1,CMNREQ(""MSG""))"
         S DR=DR_" S:OK Y=""@999"" I 'OK S Y=""@23"";"
FRMTYP   ;Entry point to set DR with logic for "Form Type" and "Certification Type" fields in preparation for re-prompting.
         S DR=DR_"@24;S DIC(0)=""N"" S FRMTYP(""OLD"")=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24,""I"");24R~T;S FRMTYP=X I FRMTYP(""OLD"")
          ]"""",FRMTYP]"""""
         S DR=DR_",FRMTYP'=FRMTYP(""OLD"") S OK=$$USEROK^IBCU75(24,FRMTYP(""OLD""),FRMTYP(""MSG"")) S:OK CHNGFRM=1 S:'OK Y=""@24"";"
         S DR=DR_"I $G(CHNGFRM)!($$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.01,""I"")="""") D COPYCMN^IBCU75(IBXIEN,IBPROCP,FRMTYP);"
         S DR=DR_"I $$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.01,""I"")]"""",'$G(CHNGFRM) R !,""Edit CMN Information for this Procedure? N
          O// "",EDIT S EDIT=$E($ZCONVERT(EDIT,""U"")) "
         S DR=DR_"W:(EDIT]""""&(EDIT'=""^"")) ""  ""_$S(EDIT=""Y"":""YES"",1:""NO"") I EDIT'=""Y"" S Y=""@999"";"
CERTYP   ;Entry point to set DR with logic for "Certification Type" field in preparation for re-prompting.
         S DR=DR_"@01;S CERTYP(""OLD"")=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.01,""I"");24.01R~T//INITIAL"
         S DR=DR_";S CERTYP=X I CERTYP(""OLD"")]"""",CERTYP]"""",CERTYP'=CERTYP(""OLD"")"
         S DR=DR_" S CMSG=$S(CERTYP=""I"":CERTYP(""MSGI""),1:CERTYP(""MSG""))"
         S DR=DR_" S OK=$$USEROK^IBCU75(24.01,CERTYP(""OLD""),CMSG) S:'OK Y=""@01"";@999;"
         Q
         ;
DRCOMM   ;Set DR with logic for the remaining fields common to all form types
         S DR="@06;S DTOLD=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.06,""I"");24.06R~T//"_EVNTDT_";D DTCHK^IBCU75(X,TDY,""06"",$G(DTOLD))
          ;"
         S DR=DR_"I CERTYP=""I"" S @DGLB@(24.07)="""",Y=""@02"";"
RRDT     ;Entry point to set DR with logic for "Recertification/Revision Date"... fields in preparation for re-prompting.
         S DR=DR_"@07;S DTOLD=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.07,""I"");24.07R~T//"_EVNTDT_";D DTCHK^IBCU75(X,TDY,""07"",$G(DTOL
          D));"
         S DR=DR_"@02;S HTOLD=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.02,""I"");24.02T;I X>96 S OK=$$USEROK^IBCU75(24.02,HTOLD,""Patient
           is over 8 feet tall!"")"
         S DR=DR_" I 'OK S Y=""@02"";@03;S WTOLD=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.03,""I"");24.03T;I X>500 S OK=$$USEROK^IBCU75(2
          4.03,WTOLD,"
         S DR=DR_"""Patient is over 500 pounds!"") I 'OK S Y=""@03"";24.04T;"
STRTDT   ;Entry point to set DR with logic for "Date Therapy Started"... fields in preparation for re-prompting.
         S DR=DR_"@05;S DTOLD=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.05,""I"");24.05R~T//"_EVNTDT_";D DTCHK^IBCU75(X,TDY,""05"",$G(DTOL
          D));@08;24.08T//N;"
         D @FRMTAG
         Q
         ;
DR484    ;Set DR with logic specific for form CMN-484
         S DR=DR_"@100;24.1T;S ABGPO2=X;@102;24.102T;S O2SAT=X;I ABGPO2="""",O2SAT="""" S Y=""@104"";"
         S DR=DR_"@103;S DTOLD=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.103,""I"");24.103T;D DTCHK^IBCU75(X,TDY,103,$G(DTOLD));"
         S DR=DR_"@104;I (ABGPO2<56!(ABGPO2>59)),(O2SAT'=89) S @DGLB@(24.104)="""",@DGLB@(24.105)="""""
         S DR=DR_",@DGLB@(24.106)="""",Y=""@107"";24.104T//NO;24.105T//NO;24.106T//NO;@107;24.107T;24.108T;24.109T;24.11T;I X'>4 S @
          DGLB@(24.111)="""""
         S DR=DR_",@DGLB@(24.113)="""",@DGLB@(24.114)="""",Y=""@115"";24.111T;S ABG4LPM=X;"
         S DR=DR_"@113;24.113T;I 'ABG4LPM,'X S Y=""@115"",@DGLB@(24.114)="""";"
         S DR=DR_"@114;S DTOLD=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.114,""I"");24.114T;D DTCHK^IBCU75(X,TDY,114,$G(DTOLD));@115;24.11
          5T;@999;"
         Q
         ;
DR10126  ;Set DR with logic specific to the CMN-10126
         S DR=DR_"@217;S IBPEB(""OLD"")=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.217,""I"");24.217R~T//P;S IBPEB=X I IBPEB(""OLD"")]"""",
          IBPEB]"""",IBPEB(""OLD"")'=IBPEB "
         S DR=DR_"S OK=$$USEROK^IBCU75(24.217,IBPEB(""OLD""),""You are changing the nutrition type!"") S:'OK Y=""@217"";I $G(IBPEB)=
          ""P"" S Y=""@206"" "
         S DR=DR_"N I F I=24.201:.001:24.205,24.218,24.219 S @DGLB@(I)="""";24.201T;24.202T;"
         S DR=DR_"24.204T;I '+X S Y=""@205"",@DGLB@(24.203)="""" I $$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.219)]"""" S Y=""@219"";"
         S DR=DR_"24.203T;I '+X S Y=""@205"" I $$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.219)]"""" S Y=""@219"";"
         S DR=DR_"@219;24.219T;I '+X S Y=""@205"",@DGLB@(24.218)="""";"
         S DR=DR_"24.218T;@205;24.205T;@206;24.206T;I $G(IBPEB)=""E"" S Y=""@999"" "
         S DR=DR_"N I F I=24.207:.001:24.216 S @DGLB@(I)="""";"
         S DR=DR_"24.207T;24.208T;24.209T;24.21T;24.211T;24.212T;24.213T;24.215T;24.216T;@214;24.214T;@999;"
         Q
         ;
COPYCMN(IBXIEN,IBPROCP,FRMTYP) --
          ;Copy CMN information from last procedure entered that has it to current procedure
         ;Input: IBXIEN  = Internal bill/claim number
         ;       IBPROCP = Procedure line subscript
         ;       FRMTYP  = CMN Form Type ien
         ;
         N DONE
         S DONE=0
         Q:('$G(IBXIEN)!('$G(IBPROCP)!('$G(FRMTYP))))
         N FRMND,FRMNDI,IBPROC,IBXSAVE,Z
         S FRMNDI=FORM(FRMTYP)
         D CMNDEX^IBCEF31(IBXIEN,.IBXSAVE)
         S Z="" F  S Z=$O(IBXSAVE("CMNDEX",Z),-1) Q:'Z  S IBPROC=+IBXSAVE("CMNDEX",Z) I IBPROCP,IBPROC'=IBPROCP D  Q:DONE
         . Q:('$D(^DGCR(399,IBXIEN,"CP",IBPROC,"CMN"))!('$D(^DGCR(399,IBXIEN,"CP",IBPROC,FRMNDI))))
         . S FRMND=$O(^DGCR(399,IBXIEN,"CP",IBPROC,"CMN")) Q:(FRMND=""!(FRMND'=FRMNDI))
         . S ^DGCR(399,IBXIEN,"CP",IBPROCP,"CMN")=^DGCR(399,IBXIEN,"CP",IBPROC,"CMN")
         . S ^DGCR(399,IBXIEN,"CP",IBPROCP,FRMND)=^DGCR(399,IBXIEN,"CP",IBPROC,FRMND)
         . S DONE=1
         Q 
         ;
USEROK(FLD,OLDVAL,MSG) --
          ;JRA;IB*2.0*608 Prompt user if OK to change field value
         ;Input: FLD    =  Field for which we are asking the user to confirm the change
         ;       OLDVAL =  Value of the field before user changed
         ;       MSG    =  Warning message to display to user regarding the implications of the change
         ;
         Q:'$G(FLD) 0
         N DIC,DIR,X,Y
         S OLDVAL=$G(OLDVAL)
         W $C(7) I $TR($G(MSG)," ")]"" W !,MSG
         S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="NO" D ^DIR
         I Y'=1 D SETFLD(FLD,OLDVAL)  ;Set field back to old value if user doesn't want to continue
         I Y=1 S X="^"
         Q Y
         ;
SETFLD(FLD,VAL) --
          ;JRA;IB*2.0*608 Set/Delete field data w/out user prompting
         ;Input: FLD = Field to set/delete
         ;       VAL = Value to set FLD to (Note: '@' will delete field value)
         ;
         Q:('$G(FLD)!($G(VAL)=""))
         N DIE,DI,DL,DP,DQ,DR,X,Y
         S DIE="^DGCR(399,"_IBXIEN_",""CP"","
         S DR=FLD_"////"_VAL
         D ^DIE
         Q
         ;
DTCHK(X,TDY,TAG,DTOLD) --
          ;JRA;IB*2.0*608 Check if future date entered by user
         ;Input:  X     = User entry for date field (internal FileMan date format)
         ;        TDY   = Today's internal FileMan date
         ;        TAG   = Field tag to jump to if user enters a future date (usually re-prompt same date)
         ;        DTOLD = The value of the date field prior to user edit
         ;
         Q:('$G(X))!('$G(TAG))
         N FLD
         S:$G(DTOLD)="" DTOLD="@"
         S:'$G(TDY) TDY=$$HTFM^DILIBF(+$H) Q:X'>TDY
         ;User entered future date so display error and change date back to previous value.
         W $C(7),!,?3,"Future dates not allowed??"
         S Y="@"_TAG
         D SETFLD("24."_TAG,DTOLD)  ;set back to prior date
         Q
         ;

*****   INDEX OF IBCU75   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   ABGMSG       CMN+5~,CMN+11*
   ABGPO2       CMN+5~
   CERTDT       CMN+5~,CMN+62*,CMN+64
   CERTYP       CMN+5~,CMN+25*,CMN+28*,CMN+29,CMN+33,CMN+47,CMN+49,CMN+59*,CMN+65
   CERTYP("MSG" CMN+20*
   CERTYP("MSGI" 
                CMN+21*
   CHNGFRM      CMN+5~
   CMNNODE      CMN+5~,CMN+40*,CMN+41*,CMN+45*
   CMNREQ       CMN+5~,CMN+25*,CMN+26*,CMN+30,CMN+38,CMN+49
   CMNREQ("MSG" CMN+18*
   CMSG         CMN+5~
   DA           CMN+5~,CMN+12*
   DA(1         CMN+12*
   DGLB         CMN+5~,CMN+7*,CMN+78,CMN+80,CMN+81
   DI           SETFLD+5~
   DIC          CMN+5~,USEROK+6~
   DIE          CMN+5~,CMN+12*,SETFLD+5~,SETFLD+6*
   DIE("NO^"    CMN+17*
   DIR          CMN+5~,USEROK+6~
   DIR("A"      USEROK+9*
   DIR("B"      USEROK+9*
   DIR(0        USEROK+9*
   DL           SETFLD+5~
   DONE         COPYCMN+5~,COPYCMN+6*,COPYCMN+11,COPYCMN+16*
   DP           SETFLD+5~
   DQ           SETFLD+5~
   DR           CMN+5~,CMN+34*,CMN+71*,CMNREQ+1*,CMNREQ+2*,CMNREQ+3*,FRMTYP+1*,FRMTYP+2*,FRMTYP+3*,FRMTYP+4*,FRMTYP+5*,CERTYP+1*
                CERTYP+2*,CERTYP+3*,CERTYP+4*,DRCOMM+1*,DRCOMM+2*,RRDT+1*,RRDT+2*,RRDT+3*,RRDT+4*,STRTDT+1*,DR484+1*,DR484+2*
                DR484+3*
                DR484+4*,DR484+5*,DR484+6*,DR484+7*,DR10126+1*,DR10126+2*,DR10126+3*,DR10126+4*,DR10126+5*,DR10126+6*,DR10126+7*
                DR10126+8*,DR10126+9*,SETFLD+5~,SETFLD+7*
   DRTAG        CMN+5~,CMN+32*,CMN+33*,CMN+34,CMN+58*,CMN+64*,CMN+65*,CMN+66*,CMN+68*,CMN+70,CMN+74
   DRTAG(1      CMN+55*,CMN+70,CMN+74*
   DTOLD        CMN+5~,DTCHK~,DTCHK+8*,DTCHK+13
   EDIT         CMN+5~,CMN+49
   EVNTDT       CMN+5~,CMN+9*,DRCOMM+1,RRDT+1,STRTDT+1
   FIEN         CMN+5~,CMN+14*,CMN+15,CMN+39*,CMN+40,CMN+44*,CMN+45
   FLD          CMN+79~,CMN+80*,USEROK~,USEROK+5,USEROK+10,SETFLD~,SETFLD+4,SETFLD+7,DTCHK+7~
   FNAM         CMN+5~,CMN+14*
   FORM         CMN+5~,CMN+16
   FORM(        CMN+15*!,CMN+39,CMN+40,CMN+44,CMN+45,CMN+51,CMN+67,COPYCMN+9
   FORM(1       CMN+16*
   FORM(2       CMN+16*
   FRMND        COPYCMN+8~,COPYCMN+13*,COPYCMN+15
   FRMNDI       COPYCMN+8~,COPYCMN+9*,COPYCMN+12,COPYCMN+13
   FRMTAG       CMN+5~,CMN+51*,STRTDT+2
   FRMTYP       CMN+6~,CMN+25*,CMN+27*,CMN+29,CMN+32,CMN+44,CMN+49,CMN+51,CMN+67,COPYCMN~,COPYCMN+7,COPYCMN+9
   FRMTYP("MSG" CMN+19*
   HT           CMN+6~,CMN+60*
   HTOLD        CMN+6~
   I            CMN+6~,CMN+71*
>> IBDT         CMN+9
   IBPEB        CMN+6~
   IBPROC       COPYCMN+8~,COPYCMN+11*,COPYCMN+12,COPYCMN+13,COPYCMN+14,COPYCMN+15
   IBPROCP      CMN~,CMN+4,CMN+12,CMN+26,CMN+27,CMN+28,CMN+40,CMN+41,CMN+45,CMN+59,CMN+60,CMN+61,CMN+62,CMN+63,CMN+68,COPYCMN~
                COPYCMN+7,COPYCMN+11,COPYCMN+14,COPYCMN+15
   IBXIEN       CMN~,CMN+4,CMN+8,CMN+12,CMN+26,CMN+27,CMN+28,CMN+40,CMN+41,CMN+45,CMN+59,CMN+60,CMN+61,CMN+62,CMN+63,CMN+68
                COPYCMN~,COPYCMN+7,COPYCMN+10,COPYCMN+12,COPYCMN+13,COPYCMN+14,COPYCMN+15,SETFLD+6
   IBXSAVE      COPYCMN+8~,COPYCMN+10
   IBXSAVE("CMNDEX" 
                COPYCMN+11
   LKGLB        CMN+6~,CMN+8*
   LPM4ABG      CMN+6~
   LPM4SAT      CMN+6~
   MSG          CMN+6~,CMN+31*,CMN+32*,CMN+33*,CMN+34*,CMN+57!*,CMN+64*,CMN+65*,CMN+66*,CMN+68*,CMN+69,CMN+71,USEROK~,USEROK+8
   MSG(         CMN+64*,CMN+65*,CMN+66*,CMN+68*,CMN+71
   NODE0        CMN+6~
   O2SAT        CMN+6~
   OK           CMN+6~
   OLDVAL       CMN+6~,USEROK~,USEROK+7*,USEROK+10
   PROCA        CMN+6~
   PROCB        CMN+6~
   QUIT         CMN+6~,CMN+23*,CMN+26*,CMN+29*,CMN+35*,CMN+55*,CMN+70*,CMN+75*
   RRDT         CMN+6~,CMN+63*,CMN+65
   TAG          DTCHK~,DTCHK+6,DTCHK+12,DTCHK+13
   TDY          CMN+6~,CMN+10*,DTCHK~,DTCHK+9*
   THERPYDT     CMN+6~,CMN+61*,CMN+66
   U            CMN+15
>> UPCT         CMN+55*,CMN+70*
   VAL          SETFLD~,SETFLD+4,SETFLD+7
   WTOLD        CMN+6~
   X            CMN+6~,CMN+49,CMN+70,USEROK+6~,USEROK+11*,SETFLD+5~,DTCHK~,DTCHK+6,DTCHK+9
   Y            CMN+6~,USEROK+6~,USEROK+10,USEROK+11,USEROK+12,SETFLD+5~,DTCHK+12*
   Z            COPYCMN+8~,COPYCMN+11*

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399           COPYCMN+12,COPYCMN+13,COPYCMN+14*,COPYCMN+15*
   ^IBE(399.6          CMN+14,CMN+15

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   @(           CMN+34,CMN+74,STRTDT+2
   CMNREQ       CMN+22,CMN+30
   DRCOMM       CMN+52
   SETFLD       CMN+47,CMN+80,USEROK+10,DTCHK+13

External References
   ^DIE                CMN+24,CMN+56,SETFLD+8
   $$FMTE^DILIBF       CMN+9
   $$HTFM^DILIBF       CMN+10,DTCHK+9
   ^DIR                USEROK+9
   $$CMNDATA^IBCEF31   CMN+26,CMN+27,CMN+28,CMN+59,CMN+60,CMN+61,CMN+62,CMN+63,CMN+68
   CMNDEX^IBCEF31      COPYCMN+10

*****   END   *****


IBJPS    * *  76 Lines,  2451 Bytes, Checksum: B6807999                                               Mar 20, 2019@15:10:13 page 22
              739 bytes in comments
IBJPS    ;ALB/MAF,ARH - IBSP IB SITE PARAMETER SCREEN ;22-DEC-1995
         ;;2.0;INTEGRATED BILLING;**39,52,70,115,143,51,137,161,155,320,348,349,377,384,400,432,494,461,516,547,592,608**;21-MAR-94;
          Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
EN       ; -- main entry point for IBJP IB SITE PARAMETERS, display IB site parameters
         D EN^VALM("IBJP IB SITE PARAMETERS")
         Q
         ;
HDR      ; -- header code
         S VALMHDR(1)="Only authorized persons may edit this data."
         Q
         ;
INIT     ; -- init variables and list array
         K ^TMP("IBJPS",$J),^TMP("IBJPSAX",$J)
         D BLD^IBJPS1
         Q
         ;
HELP     ; -- help code
         S X="?" D DISP^XQORM1 W !!
         Q
         ;
EXIT     ; -- exit code
         K ^TMP("IBJPS",$J),^TMP("IBJPSAX",$J)
         D CLEAR^VALM1
         Q
         ;
NXEDIT   ; -- IBJP IB SITE PARAMETER EDIT ACTION (EP): Select data set to edit, do edit
         N VALMY,IBSELN,IBSET
         D EN^VALM2($G(XQORNOD(0)))
         I $D(VALMY) S IBSELN=0 F  S IBSELN=$O(VALMY(IBSELN)) Q:'IBSELN  D
         . S IBSET=$P($G(^TMP("IBJPSAX",$J,IBSELN)),U,1) Q:'IBSET
         . D EDIT(IBSET)
         S VALMBCK="R"
         Q
         ;
EDIT(IBSET) --
          ; edit IB Site Parameters
         D FULL^VALM1
         N DR
         I IBSET'="" D
         . ; MRD;IB*2.0*516 - Added TRICARE Pay-To Providers.
         . ; WCJ;IB*2.0*547 - shifted the numbers down to insert a new one
         . I IBSET=8 D EN^IBJPS5 Q
         . I IBSET=11 D EN^IBJPS3(0) Q
         . I IBSET=12 D EN^IBJPS3(1) Q
         . ;WCJ;IB*2.0*547 added default Administrative contractors for billing (medicare and commercial)
         . I IBSET=17 D EN^IBJPS6(1) Q   ; medicare
         . I IBSET=18 D EN^IBJPS6(2) Q   ; commercial
         . I IBSET=21 D EN^IBJPS8 Q   ; WCJ;IB*2.0*608;US3;
         . S DR=$P($T(@IBSET),";;",2,999)
         . Q
         ; WCJ;IB*2.0*547 - shifted the number down to insert a new one
         I IBSET=9,$$ICD9SYS^IBACSV(DT)=30 S $P(DR,";",1)=7.05
         ;
         I $G(DR)'="" S DIE="^IBE(350.9,",DA=1 D ^DIE K DA,DR,DIE,DIC,X,Y
         D INIT^IBJPS S VALMBCK="R"
         Q
         ;
         ;WCJ;IB*2.0*547 - cleared the spot for the new #8, added 17 & 18, move 16 to 19.
         ;gef;IB*2.0*547 - added 20
         ;JWS;IB*2.0*592 - added field 8.2 to 16
1        ;;.09;.13;.14
2        ;;1.2;.15;.11;.12;7.04
3        ;;1.09;1.07;2.07
4        ;;4.04;6.25;6.24
5        ;;.02;1.14;1.25;1.08
6        ;;1.23;1.16;1.22;1.19;1.15;1.17
7        ;;1.33;1.32;1.31;1.27;8.14T;8.15T;8.16T;8.19T
9        ;;1.29;1.3;1.18;1.28
10       ;;1.01;1.02;1.05
13       ;;2.08;2.09
14       ;;11.01
15       ;;10.02;10.03;10.04;10.05;D INIT^IBATFILE
16       ;;2.11;8.01;8.09;8.03;8.06;8.04;8.07;8.02;8.12T;8.11T;8.17T;8.2T
19       ;;50.01;50.02;50.05;50.06;50.03;50.04;50.07
20       ;;52.01;52.02
         ;

*****   INDEX OF IBJPS   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   DA           EDIT+18*!
   DIC          EDIT+18!
   DIE          EDIT+18*!
   DR           EDIT+2~,EDIT+13*,EDIT+16*,EDIT+18!
   DT           EDIT+16
   IBSELN       NXEDIT+1~,NXEDIT+3*,NXEDIT+4
   IBSET        NXEDIT+1~,NXEDIT+4*,NXEDIT+5,EDIT~,EDIT+3,EDIT+6,EDIT+7,EDIT+8,EDIT+10,EDIT+11,EDIT+12,EDIT+16
   U            NXEDIT+4
>> VALMBCK      NXEDIT+6*,EDIT+19*
>> VALMHDR(1    HDR+1*
   VALMY        NXEDIT+1~,NXEDIT+3
   VALMY(       NXEDIT+3
   X            HELP+1*,EDIT+18!
>> XQORNOD(0    NXEDIT+2
   Y            EDIT+18!

Global Variables  ( * Changed  ! Killed)
   ^TMP("IBJPS"        INIT+1!,EXIT+1!
   ^TMP("IBJPSAX"      INIT+1!,EXIT+1!,NXEDIT+4

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   $T(@IBSET    EDIT+13

Label References
   EDIT         NXEDIT+5

External References
   ^DIE                EDIT+18
   $$ICD9SYS^IBACSV    EDIT+16
   INIT^IBJPS          EDIT+19
   BLD^IBJPS1          INIT+2
   EN^IBJPS3           EDIT+7,EDIT+8
   EN^IBJPS5           EDIT+6
   EN^IBJPS6           EDIT+10,EDIT+11
   EN^IBJPS8           EDIT+12
   EN^VALM             EN+1
   CLEAR^VALM1         EXIT+2
   FULL^VALM1          EDIT+1
   EN^VALM2            NXEDIT+2
   DISP^XQORM1         HELP+1

*****   END   *****


IBJPS2   * *  172 Lines,  8815 Bytes, Checksum: B59492878                                             Mar 20, 2019@15:10:13 page 23
              827 bytes in comments
IBJPS2   ;ALB/MAF,ARH - IBSP IB SITE PARAMETER BUILD (cont) ;22-DEC-1995
         ;;2.0;INTEGRATED BILLING;**39,52,115,143,51,137,161,155,320,348,349,377,384,400,432,494,461,516,547,592,608**;21-MAR-94;Bui
          ld 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
BLD2     ; - continue build screen array for IB parameters
         ;
         N Z,Z0,PTPSTR,BPZZ
         D RIGHT(1,1,1) ; - facility/med center  (new line for each)
         S IBLN=$$SET("Medical Center",$$EXSET^IBJU1($P(IBPD0,U,2),350.9,.02),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("MAS Service",$$EXSET^IBJU1($P(IBPD1,U,14),350.9,1.14),IBLN,IBLR,IBSEL)
         ;
         D LEFT(2)
         S IBLN=$$SET("Default Division",$$EXSET^IBJU1($P(IBPD1,U,25),350.9,1.25),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("Billing Supervisor",$$EXSET^IBJU1($P(IBPD1,U,8),350.9,1.08),IBLN,IBLR,IBSEL)
         ;
         D RIGHT(1,1,1)
         S IBLN=$$SET("Initiator Authorize",$$YN(+$P(IBPD1,U,23)),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("Ask HINQ in MCCR",$$YN(+$P(IBPD1,U,16)),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("Multiple Form Types",$$YN(+$P(IBPD1,U,22)),IBLN,IBLR,IBSEL)
         ;
         D LEFT(2)
         S IBLN=$$SET("Xfer Proc to Sched",$$YN(+$P(IBPD1,U,19)),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("Use Non-PTF Codes",$$YN(+$P(IBPD1,U,15)),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("Use OP CPT screen",$$YN(+$P(IBPD1,U,17)),IBLN,IBLR,IBSEL)
         ;
         ; IB patch 349 for UB-04 claim form and parameters
         D RIGHT(1,1,1)
         S IBLN=$$SET("UB-04 Print IDs",$$EXSET^IBJU1($P(IBPD1,U,33),350.9,1.33),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("CMS-1500 Print IDs",$$EXSET^IBJU1($P(IBPD1,U,32),350.9,1.32),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("CMS-1500 Auto Prter",$$EXSET^IBJU1($P(IBPD8,U,14),350.9,8.14),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("EOB Auto Prter",$$EXSET^IBJU1($P(IBPD8,U,16),350.9,8.16),IBLN,IBLR,IBSEL)
         ;
         D LEFT(2)
         S IBLN=$$SET("UB-04 Address Col",$P(IBPD1,U,31),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("CMS-1500 Addr Col",$P(IBPD1,U,27),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("UB-04 Auto Prter",$$EXSET^IBJU1($P(IBPD8,U,15),350.9,8.15),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("MRA Auto Prter",$$EXSET^IBJU1($P(IBPD8,U,19),350.9,8.19),IBLN,IBLR,IBSEL)
         ;
         ; VAD - IB*2.0*547 - inserted a new section 8.  Only count activated codes
         D RIGHT(3,1,1)
         S (Z,Z0)=0 F  S Z=$O(^IBE(350.9,1,15,"B",Z)) Q:'Z  I $P($G(^DGCR(399.2,Z,0)),U,3)=1 S Z0=Z0+1
         S PTPSTR=Z0_" Activated Codes Defined"
         S IBLN=$$SET("Printed Claims Rev Code Excl",PTPSTR,IBLN,IBLR,IBSEL)
         ;
         D RIGHT(1,1,1)
         S Z=$$ICD9SYS^IBACSV(DT)
         I Z=1 S IBLN=$$SET("Default RX DX Cd",$$EXSET^IBJU1($P(IBPD1,U,29),350.9,1.29)_" (ICD-9)",IBLN,IBLR,IBSEL)
         I Z'=1 S IBLN=$$SET("Default RX DX Cd",$$EXSET^IBJU1($P(IBPD7,U,5),350.9,7.05)_" (ICD-10)",IBLN,IBLR,IBSEL)
         S IBLN=$$SET("Default RX CPT Cd",$$EXSET^IBJU1($P(IBPD1,U,30),350.9,1.30),IBLN,IBLR,IBSEL)
         ;
         D LEFT(2)
         S IBLN=$$SET("Default ASC Rev Cd",$$EXSET^IBJU1($P(IBPD1,U,18),350.9,1.18),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("Default RX Rev Cd",$$EXSET^IBJU1($P(IBPD1,U,28),350.9,1.28),IBLN,IBLR,IBSEL)
         ;
         D RIGHT(1,1,1)
         S IBLN=$$SET("Bill Signer Name","<No longer used>",IBLN,IBLR,IBSEL)
         S IBLN=$$SET("Bill Signer Title","<No longer used>",IBLN,IBLR,IBSEL)
         ;
         D LEFT(2)
         S IBLN=$$SET("Federal Tax #",$P(IBPD1,U,5),IBLN,IBLR,IBSEL)
         ;
         D RIGHT(3,1,1) ; - Pay-To Providers - section 11
         S (Z,Z0)=0 F  S Z=$O(^IBE(350.9,1,19,Z)) Q:'Z  S:$P($G(^IBE(350.9,1,19,Z,0)),U,5)="" Z0=Z0+1
         S Z=+$P($G(^IBE(350.9,1,11)),U,3),PTPSTR=Z0_" defined"_$S(Z>0:", default - "_$P($$PTG^IBJPS3(Z,0),U),1:"")
         S IBLN=$$SET("Pay-To Providers",PTPSTR,IBLN,IBLR,IBSEL)
         ;
         ; MRD;IB*2.0*516 - Added TRICARE Pay-To Providers.
         D RIGHT(3,1,1) ; - TRICARE Pay-To Providers - section 12
         S (Z,Z0)=0 F  S Z=$O(^IBE(350.9,1,29,Z)) Q:'Z  S:$P($G(^IBE(350.9,1,29,Z,0)),U,5)="" Z0=Z0+1
         S Z=+$P($G(^IBE(350.9,1,11)),U,4),PTPSTR=Z0_" defined"_$S(Z>0:", default - "_$P($$PTG^IBJPS3(Z,1),U),1:"")
         S IBLN=$$SET("Non-MCCF Pay-To Providers",PTPSTR,IBLN,IBLR,IBSEL)  ; IB*2*608 (vd) - Changed "TRICARE..." to "Non-MCCF..."
         ;
         D RIGHT(3,1,1)
         S IBLN=$$SET("Inpt Health Summary",$$EXSET^IBJU1($P(IBPD2,U,8),350.9,2.08),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("Opt Health Summary",$$EXSET^IBJU1($P(IBPD2,U,9),350.9,2.09),IBLN,IBLR,IBSEL)
         ;
         ; ePharmacy parameters
         D RIGHT(7,1,1)
         S IBLN=$$SET("HIPPA NCPDP Active Flag",$S($P(IBPD11,U)=1:"Active",1:"Not Active"),IBLN,IBLR,IBSEL)
         ;
         ; transfer pricing
         D RIGHT(1,1,1)
         S IBLN=$$SET("Inpatient TP Active ",$$YN(+$P(IBPD10,U,2)),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("Outpatient TP Active",$$YN(+$P(IBPD10,U,3)),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("Pharmacy TP Active  ",$$YN(+$P(IBPD10,U,4)),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("Prosthetic TP Active",$$YN(+$P(IBPD10,U,5)),IBLN,IBLR,IBSEL)
         ;
         ; EDI/MRA parameters
         D RIGHT(7,1,1)
         N IBZ S IBZ=$P(IBPD8,U,3)
         S IBLN=$$SET(" EDI/MRA Activated",$$EXSET^IBJU1(+$P(IBPD8,U,10),350.9,8.1),IBLN,IBLR,IBSEL)
         S IBLN=$$SET(" EDI Contact Phone",$P(IBPD2,U,11),IBLN,IBLR,IBSEL)
         S IBLN=$$SET(" EDI 837 Live Transmit Queue",$P(IBPD8,U),IBLN,IBLR,IBSEL)
         S IBLN=$$SET(" EDI 837 Test Transmit Queue",$P(IBPD8,U,9),IBLN,IBLR,IBSEL)
         S IBLN=$$SET(" Auto-Txmt Bill Frequency",$S(IBZ:"Every"_$S(IBZ>1:" "_$P(IBPD8,U,3),1:""),1:"")_$S(IBZ:" Day"_$S(IBZ=1:"",1:
          "s"),1:"Never Run"),IBLN,IBLR,IBSEL)
         S IBLN=$$SET(" Hours To Auto-Transmit",$P(IBPD8,U,6),IBLN,IBLR,IBSEL)
         S IBLN=$$SET(" Max # Bills Per Batch",$P(IBPD8,U,4),IBLN,IBLR,IBSEL)
         S IBLN=$$SET(" Only Allow 1 Ins Co/Claim Batch?",$$EXPAND^IBTRE(350.9,8.07,+$P(IBPD8,U,7)),IBLN,IBLR,IBSEL)
         S IBLN=$$SET(" Last Auto-Txmt Run Date",$$DATE^IBJU1($P(IBPD8,U,5)),IBLN,IBLR,IBSEL)
         S IBLN=$$SET(" Days To Wait To Purge Msgs",$P(IBPD8,U,2),IBLN,IBLR,IBSEL)
         S IBLN=$$SET(" Allow MRA Processing?",$$YN(+$P(IBPD8,U,12)),IBLN,IBLR,IBSEL)
         S IBLN=$$SET(" Enable Automatic MRA Processing?",$$YN(+$P(IBPD8,U,11)),IBLN,IBLR,IBSEL)
         S IBLN=$$SET(" Enable Auto Reg EOB Processing?",$$YN(+$P(IBPD8,U,17)),IBLN,IBLR,IBSEL)
         ;JWS;IB*2.0*592;add on/off for Dental
         I $P(IBPD8,U,20)="" S $P(IBPD8,U,20)=1  ;default to yes
         S IBLN=$$SET(" Allow Dental Claim Processing?",$$YN(+$P(IBPD8,U,20)),IBLN,IBLR,IBSEL)
         ;
         ; WCJ;IB*2.0*547;administrative contractors medicare
         D RIGHT(3,1,1)
         S Z=+$P($G(^IBE(350.9,1,81,0)),U,4)_" defined"
         S IBLN=$$SET("Alt Prim Payer ID Typ-Medicare",Z,IBLN,IBLR,IBSEL)
         ;
         ; WCJ;IB*2.0*547;administrative contractors commercial
         D RIGHT(3,1,1)
         S Z=+$P($G(^IBE(350.9,1,82,0)),U,4)_" defined"
         S IBLN=$$SET("Alt Prim Payer ID Typ-Commercial",Z,IBLN,IBLR,IBSEL)
         ;
         ; Ingenix ClaimsManager Information
         D RIGHT(9,1,1)
         S IBLN=$$SET("Are we using ClaimsManager?",$$YN(+$P(IBPD50,U,1)),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("Is ClaimsManager working OK?",$$YN(+$P(IBPD50,U,2)),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("ClaimsManager TCP/IP Address",$P(IBPD50,U,5),IBLN,IBLR,IBSEL)
         S IBCISOCK=$O(^IBE(350.9,1,50.06,"B",""))
         S IBLN=$$SET("ClaimsManager TCP/IP Ports",IBCISOCK,IBLN,IBLR,IBSEL)
         F  S IBCISOCK=$O(^IBE(350.9,1,50.06,"B",IBCISOCK)) Q:IBCISOCK=""  D
         . S IBLN=$$SET("",IBCISOCK,IBLN,IBLR,IBSEL)
         . Q
         S IBLN=$$SET("General Error MailGroup",$$EXSET^IBJU1($P(IBPD50,U,3),350.9,50.03),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("Communication Error MailGroup",$$EXSET^IBJU1($P(IBPD50,U,4),350.9,50.04),IBLN,IBLR,IBSEL)
         S IBCIMFLG=$$EXTERNAL^DILFD(350.9,50.07,"",$P(IBPD50,U,7))
         I IBCIMFLG="" S IBCIMFLG="PRIORITY"
         S IBLN=$$SET("MailMan Messages",IBCIMFLG,IBLN,IBLR,IBSEL)
         ;
         ; Request For Additional Info patch 547
         D RIGHT(9,1,1)
         S Z=$G(^IBE(350.9,1,52)) S:$P(Z,U)="" $P(Z,U)="No Purge"
         S IBLN=$$SET("Days to store 277RFAI Transactions",$P(Z,U),IBLN,IBLR,IBSEL)
         S IBLN=$$SET("Days to wait to purge entry on RFAI Management Worklist",$P(Z,U,2),IBLN,IBLR,IBSEL)
         ;
         ; WCJ - IB*2.0*608;US3 - inserted a new section 20.
         D RIGHT(3,1,1)
         S Z="",Z0=0 F  S Z=$O(^IBE(350.9,1,16,"B",Z)) Q:'Z  S Z0=Z0+1
         S PTPSTR=Z0_" CMN CPT Codes Included"
         S IBLN=$$SET("CMN CPT Code Inclusion",PTPSTR,IBLN,IBLR,IBSEL)
         Q
         ;
SET(TTL,DATA,LN,LR,SEL,HDR) --
          ;
         N IBY,IBX,IBC S IBC=": " I TTL="" S IBC="  "
         S IBY=TTL_$J("",(IBTW(LR)-$L(TTL)-2))_$S('$G(HDR):IBC_DATA,1:""),IBX=$G(^TMP("IBJPS",$J,LN,0))
         S IBX=$$SETSTR^VALM1(IBY,IBX,IBTC(LR),(IBTW(LR)+IBSW(LR)))
         D SET1(IBX,LN,SEL)
         S LN=LN+1
         Q LN
         ;
SET1(STR,LN,SEL,HI) --
          ; set up TMP array with screen data
         S ^TMP("IBJPS",$J,LN,0)=STR
         S ^TMP("IBJPS",$J,"IDX",LN,SEL)=""
         S ^TMP("IBJPSAX",$J,SEL)=SEL
         I $G(HI)'="" D CNTRL^VALM10(LN,1,4,IOINHI,IOINORM)
         ;I $G(RV) D CNTRL^VALM10(LN,6,19,IOUON,IOUOFF)
         Q
         ;
YN(X)    Q $S(+X:"YES",1:"NO")
         ;
RIGHT(LR,SEL,BL) --
          ; - reset control variables for right side of screen
         S IBLN=$S(IBLN>IBGRPE:IBLN,1:IBGRPE) I $G(BL) S IBLN=$$SET("","",IBLN,IBLR,IBSEL)
         S IBLR=$G(LR),IBGRPB=IBLN I +$G(SEL) S IBSEL=IBSEL+1 D SET1("["_IBSEL_"]",IBLN,IBSEL,1)
         Q
         ;
LEFT(LR) ; - reset control variables for left side of screen
         S IBLR=$G(LR),IBGRPE=IBLN,IBLN=IBGRPB
         Q

*****   INDEX OF IBJPS2   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   BL           RIGHT~,RIGHT+1
   BPZZ         BLD2+2~
   DATA         SET~,SET+2
   DT           BLD2+41
   HDR          SET~,SET+2
   HI           SET1~,SET1+4
   IBC          SET+1~*,SET+2
>> IBCIMFLG     BLD2+125*,BLD2+126*,BLD2+127
>> IBCISOCK     BLD2+118*,BLD2+119,BLD2+120*,BLD2+121
>> IBGRPB       RIGHT+2*,LEFT+1
>> IBGRPE       RIGHT+1,LEFT+1*
>> IBLN         BLD2+4*,BLD2+5*,BLD2+8*,BLD2+9*,BLD2+12*,BLD2+13*,BLD2+14*,BLD2+17*,BLD2+18*,BLD2+19*,BLD2+23*,BLD2+24*,BLD2+25*
                BLD2+26*,BLD2+29*,BLD2+30*,BLD2+31*,BLD2+32*,BLD2+38*,BLD2+42*,BLD2+43*,BLD2+44*,BLD2+47*,BLD2+48*,BLD2+51*
                BLD2+52*,BLD2+55*
                BLD2+60*,BLD2+66*,BLD2+69*,BLD2+70*,BLD2+74*,BLD2+78*,BLD2+79*,BLD2+80*,BLD2+81*,BLD2+86*,BLD2+87*,BLD2+88*
                BLD2+89*,BLD2+90*,BLD2+91*,BLD2+92*,BLD2+93*,BLD2+94*,BLD2+95*,BLD2+96*,BLD2+97*,BLD2+98*,BLD2+101*,BLD2+106*
                BLD2+111*,BLD2+115*
                BLD2+116*,BLD2+117*,BLD2+119*,BLD2+121*,BLD2+123*,BLD2+124*,BLD2+127*,BLD2+132*,BLD2+133*,BLD2+139*,RIGHT+1*
                RIGHT+2,LEFT+1*
>> IBLR         BLD2+4,BLD2+5,BLD2+8,BLD2+9,BLD2+12,BLD2+13,BLD2+14,BLD2+17,BLD2+18,BLD2+19,BLD2+23,BLD2+24,BLD2+25,BLD2+26,BLD2+29
                BLD2+30,BLD2+31,BLD2+32,BLD2+38,BLD2+42,BLD2+43,BLD2+44,BLD2+47,BLD2+48,BLD2+51,BLD2+52,BLD2+55,BLD2+60,BLD2+66
                BLD2+69
                BLD2+70,BLD2+74,BLD2+78,BLD2+79,BLD2+80,BLD2+81,BLD2+86,BLD2+87,BLD2+88,BLD2+89,BLD2+90,BLD2+91,BLD2+92,BLD2+93
                BLD2+94,BLD2+95,BLD2+96,BLD2+97,BLD2+98,BLD2+101,BLD2+106,BLD2+111,BLD2+115,BLD2+116,BLD2+117,BLD2+119,BLD2+121
                BLD2+123
                BLD2+124,BLD2+127,BLD2+132,BLD2+133,BLD2+139,RIGHT+1,RIGHT+2*,LEFT+1*
>> IBPD0        BLD2+4
>> IBPD1        BLD2+5,BLD2+8,BLD2+9,BLD2+12,BLD2+13,BLD2+14,BLD2+17,BLD2+18,BLD2+19,BLD2+23,BLD2+24,BLD2+29,BLD2+30,BLD2+42
                BLD2+44,BLD2+47,BLD2+48,BLD2+55
>> IBPD10       BLD2+78,BLD2+79,BLD2+80,BLD2+81
>> IBPD11       BLD2+74
>> IBPD2        BLD2+69,BLD2+70,BLD2+87
>> IBPD50       BLD2+115,BLD2+116,BLD2+117,BLD2+123,BLD2+124,BLD2+125
>> IBPD7        BLD2+43
>> IBPD8        BLD2+25,BLD2+26,BLD2+31,BLD2+32,BLD2+85,BLD2+86,BLD2+88,BLD2+89,BLD2+90,BLD2+91,BLD2+92,BLD2+93,BLD2+94,BLD2+95
                BLD2+96,BLD2+97,BLD2+98,BLD2+100*,BLD2+101
>> IBSEL        BLD2+4,BLD2+5,BLD2+8,BLD2+9,BLD2+12,BLD2+13,BLD2+14,BLD2+17,BLD2+18,BLD2+19,BLD2+23,BLD2+24,BLD2+25,BLD2+26,BLD2+29
                BLD2+30,BLD2+31,BLD2+32,BLD2+38,BLD2+42,BLD2+43,BLD2+44,BLD2+47,BLD2+48,BLD2+51,BLD2+52,BLD2+55,BLD2+60,BLD2+66
                BLD2+69
                BLD2+70,BLD2+74,BLD2+78,BLD2+79,BLD2+80,BLD2+81,BLD2+86,BLD2+87,BLD2+88,BLD2+89,BLD2+90,BLD2+91,BLD2+92,BLD2+93
                BLD2+94,BLD2+95,BLD2+96,BLD2+97,BLD2+98,BLD2+101,BLD2+106,BLD2+111,BLD2+115,BLD2+116,BLD2+117,BLD2+119,BLD2+121
                BLD2+123
                BLD2+124,BLD2+127,BLD2+132,BLD2+133,BLD2+139,RIGHT+1,RIGHT+2*
>> IBSW(        SET+3
>> IBTC(        SET+3
>> IBTW(        SET+2,SET+3
   IBX          SET+1~,SET+2*,SET+3*,SET+4
   IBY          SET+1~,SET+2*,SET+3
   IBZ          BLD2+85~*,BLD2+90
>> IOINHI       SET1+4
>> IOINORM      SET1+4
   LN           SET~,SET+2,SET+4,SET+5*,SET+6,SET1~,SET1+1,SET1+2,SET1+4
   LR           SET~,SET+2,SET+3,RIGHT~,RIGHT+2,LEFT~,LEFT+1
   PTPSTR       BLD2+2~,BLD2+37*,BLD2+38,BLD2+59*,BLD2+60,BLD2+65*,BLD2+66,BLD2+138*,BLD2+139
   SEL          SET~,SET+4,SET1~,SET1+2,SET1+3,RIGHT~,RIGHT+2
   STR          SET1~,SET1+1
   TTL          SET~,SET+1,SET+2
   U            BLD2+4,BLD2+5,BLD2+8,BLD2+9,BLD2+12,BLD2+13,BLD2+14,BLD2+17,BLD2+18,BLD2+19,BLD2+23,BLD2+24,BLD2+25,BLD2+26,BLD2+29
                BLD2+30,BLD2+31,BLD2+32,BLD2+36,BLD2+42,BLD2+43,BLD2+44,BLD2+47,BLD2+48,BLD2+55,BLD2+58,BLD2+59,BLD2+64,BLD2+65
                BLD2+69
                BLD2+70,BLD2+74,BLD2+78,BLD2+79,BLD2+80,BLD2+81,BLD2+85,BLD2+86,BLD2+87,BLD2+88,BLD2+89,BLD2+90,BLD2+91,BLD2+92
                BLD2+93,BLD2+94,BLD2+95,BLD2+96,BLD2+97,BLD2+98,BLD2+100,BLD2+101,BLD2+105,BLD2+110,BLD2+115,BLD2+116,BLD2+117
                BLD2+123
                BLD2+124,BLD2+125,BLD2+131,BLD2+132,BLD2+133
   X            YN~
   Z            BLD2+2~,BLD2+36*,BLD2+41*,BLD2+42,BLD2+43,BLD2+58*,BLD2+59*,BLD2+64*,BLD2+65*,BLD2+105*,BLD2+106,BLD2+110*,BLD2+111
                BLD2+131*,BLD2+132,BLD2+133,BLD2+137*
   Z0           BLD2+2~,BLD2+36*,BLD2+37,BLD2+58*,BLD2+59,BLD2+64*,BLD2+65,BLD2+137*,BLD2+138

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399.2         BLD2+36
   ^IBE(350.9          BLD2+36,BLD2+58,BLD2+59,BLD2+64,BLD2+65,BLD2+105,BLD2+110,BLD2+118,BLD2+120,BLD2+131,BLD2+137
   ^TMP("IBJPS"        SET+2,SET1+1*,SET1+2*
   ^TMP("IBJPSAX"      SET1+3*

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$SET        BLD2+4,BLD2+5,BLD2+8,BLD2+9,BLD2+12,BLD2+13,BLD2+14,BLD2+17,BLD2+18,BLD2+19,BLD2+23,BLD2+24,BLD2+25,BLD2+26,BLD2+29
                BLD2+30,BLD2+31,BLD2+32,BLD2+38,BLD2+42,BLD2+43,BLD2+44,BLD2+47,BLD2+48,BLD2+51,BLD2+52,BLD2+55,BLD2+60,BLD2+66
                BLD2+69
                BLD2+70,BLD2+74,BLD2+78,BLD2+79,BLD2+80,BLD2+81,BLD2+86,BLD2+87,BLD2+88,BLD2+89,BLD2+90,BLD2+91,BLD2+92,BLD2+93
                BLD2+94,BLD2+95,BLD2+96,BLD2+97,BLD2+98,BLD2+101,BLD2+106,BLD2+111,BLD2+115,BLD2+116,BLD2+117,BLD2+119,BLD2+121
                BLD2+123
                BLD2+124,BLD2+127,BLD2+132,BLD2+133,BLD2+139,RIGHT+1
   $$YN         BLD2+12,BLD2+13,BLD2+14,BLD2+17,BLD2+18,BLD2+19,BLD2+78,BLD2+79,BLD2+80,BLD2+81,BLD2+96,BLD2+97,BLD2+98,BLD2+101
                BLD2+115,BLD2+116
   LEFT         BLD2+7,BLD2+16,BLD2+28,BLD2+46,BLD2+54
   RIGHT        BLD2+3,BLD2+11,BLD2+22,BLD2+35,BLD2+40,BLD2+50,BLD2+57,BLD2+63,BLD2+68,BLD2+73,BLD2+77,BLD2+84,BLD2+104,BLD2+109
                BLD2+114,BLD2+130,BLD2+136
   SET1         SET+4,RIGHT+2

External References
   $$EXTERNAL^DILFD    BLD2+125
   $$ICD9SYS^IBACSV    BLD2+41
   $$PTG^IBJPS3        BLD2+59,BLD2+65
   $$DATE^IBJU1        BLD2+94
   $$EXSET^IBJU1       BLD2+4,BLD2+5,BLD2+8,BLD2+9,BLD2+23,BLD2+24,BLD2+25,BLD2+26,BLD2+31,BLD2+32,BLD2+42,BLD2+43,BLD2+44,BLD2+47
                       BLD2+48,BLD2+69,BLD2+70,BLD2+86,BLD2+123,BLD2+124
   $$EXPAND^IBTRE      BLD2+93
   $$SETSTR^VALM1      SET+3
   CNTRL^VALM10        SET1+4

*****   END   *****


IBJPS3   * *  350 Lines,  14484 Bytes, Checksum: B122116987                                           Mar 20, 2019@15:10:13 page 24
              4595 bytes in comments
IBJPS3   ;BP/YMG - IB Site Parameters, Pay-To Provider ;20-Oct-2008
         ;;2.0;INTEGRATED BILLING;**400,432,516,577,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
         ; MRD;IB*2.0*516 - Added logic pertaining to TRICARE-Specific Pay-To
         ; Providers, which entailed adding the parameter IBTCFLAG to many
         ; procedures here and in ^IBJPS4.
         ;
EN(IBTCFLAG) --
          ; -- main entry point for IBJP IB PAY-TO PROVIDERS
         D EN^VALM("IBJP IB "_$S(IBTCFLAG:"TRICARE PAY-TO PROVS",1:"PAY-TO PROVIDERS"))
         Q
         ;
HDR(IBTCFLAG) --
          ; -- header code
         ; Not setting VALMHDR causes this tag to be called upon return from every action, 
         ; this is done to keep VALMSG displayed at all times, instead of the default message on the lower bar.
         S VALMSG="* = Default "_$S(IBTCFLAG:"Non-MCCF ",1:"")_"Pay-to provider"
         Q
         ;
INIT(IBTCFLAG) --
          ; -- init variables and list array
         N IBCNT,IBLN,IBSTR,PIEN,PDATA,IBNODE
         S IBNODE=$$NODE^IBJPS4(IBTCFLAG)
         ;
         S (VALMCNT,IBCNT,IBLN)=0
         S PIEN=0 F  S PIEN=$O(^IBE(350.9,1,IBNODE,PIEN)) Q:'PIEN  D
         .I $P($G(^IBE(350.9,1,IBNODE,PIEN,0)),U,5)'="" Q
         .S PDATA=$$PTG(PIEN,IBTCFLAG),IBCNT=IBCNT+1
         .S IBSTR=$$SETSTR^VALM1(IBCNT_".","",2,4)
         .I $$ISDFLT(PIEN,IBTCFLAG) S IBSTR=$$SETSTR^VALM1("*",IBSTR,7,1)
         .S IBSTR=$$SETSTR^VALM1("Name     : "_$P(PDATA,U),IBSTR,8,45)
         .;S IBSTR=$$SETSTR^VALM1("State   : "_$P(PDATA,U,8),IBSTR,54,25)  ;JRA IB*2.0*577 ';'
         .S IBLN=$$SET(IBLN,IBSTR)
         .;S IBSTR=$$SETSTR^VALM1("Address 1: "_$P(PDATA,U,5),"",8,45)  ;JRA IB*2.0*577 ';'
         .S IBSTR=$$SETSTR^VALM1("Address 1: "_$P(PDATA,U,5),"",8,66)  ;JRA IB*2.0*577 expand to 55 chars
         .;S IBSTR=$$SETSTR^VALM1("Zip Code: "_$P(PDATA,U,9),IBSTR,54,25)  ;JRA IB*2.0*577 ';'
         .S IBLN=$$SET(IBLN,IBSTR)
         .;S IBSTR=$$SETSTR^VALM1("Address 2: "_$P(PDATA,U,6),"",8,45)  ;JRA IB*2.0*577 ';'
         .S IBSTR=$$SETSTR^VALM1("Address 2: "_$P(PDATA,U,6),"",8,66)  ;JRA IB*2.0*577 expand to 55 chars
         .;S IBSTR=$$SETSTR^VALM1("Phone   : "_$P(PDATA,U,4),IBSTR,54,25)  ;JRA IB*2.0*577 ';'
         .S IBLN=$$SET(IBLN,IBSTR)
         .S IBSTR=$$SETSTR^VALM1("City     : "_$P(PDATA,U,7),"",8,45)
         .S IBLN=$$SET(IBLN,IBSTR)
         .;S IBSTR=$$SETSTR^VALM1("Tax ID  : "_$P(PDATA,U,3),IBSTR,54,25)  ;JRA IB*2.0*577 ';'
         .;JRA Move State, Zip Code, Phone and Tax ID under City to allow for longer address lines
         .S IBSTR=$$SETSTR^VALM1("State    : "_$P(PDATA,U,8),IBSTR,8,25)  ;JRA IB*2.0*577
         .S IBLN=$$SET(IBLN,IBSTR)  ;JRA IB*2.0*577
         .S IBSTR=$$SETSTR^VALM1("Zip Code : "_$P(PDATA,U,9),IBSTR,8,25)  ;JRA IB*2.0*577
         .S IBLN=$$SET(IBLN,IBSTR)  ;JRA IB*2.0*577
         .S IBSTR=$$SETSTR^VALM1("Phone    : "_$P(PDATA,U,4),IBSTR,8,25)  ;JRA IB*2.0*577
         .S IBLN=$$SET(IBLN,IBSTR)  ;JRA IB*2.0*577
         .S IBSTR=$$SETSTR^VALM1("Tax ID   : "_$P(PDATA,U,3),IBSTR,8,25)  ;JRA IB*2.0*577
         .S IBLN=$$SET(IBLN,IBSTR),IBLN=$$SET(IBLN,"")
         .S @VALMAR@("ZIDX",IBCNT,PIEN)=""
         .Q
         ;
         I 'IBLN S IBLN=$$SET(IBLN,$$SETSTR^VALM1("No "_$S(IBTCFLAG:"Non-MCCF ",1:"")_"Pay-To Providers defined.","",13,40))
         ;
         S VALMCNT=IBLN,VALMBG=1
         Q
         ;
HELP     ; -- help code
         S X="?" D DISP^XQORM1 W !!
         Q
         ;
EXIT     ; -- exit code
         D CLEAR^VALM1,CLEAN^VALM10
         Q
         ;
PRVADD(IBTCFLAG) --
          ; add new pay-to provider
         N X,Y,DIC,DA,DLAYGO,DIE,DR,DIR,DIRUT,DUOUT,DTOUT,IEN,IBNODE
         S IBNODE=$$NODE^IBJPS4(IBTCFLAG)
         D FULL^VALM1
         S VALMBCK="R"
         S DIC="^IBE(350.9,1,"_IBNODE_",",DIC(0)="AELMQ",DA(1)=1,DLAYGO=350.9
         S DIC("A")="Enter "_$S(IBTCFLAG:"Non-MCCF ",1:"")_"Pay-to Provider: "
         D ^DIC S IEN=+Y
         I IEN'>0 Q
         D PRVEDIT1
         I $P($G(^IBE(350.9,1,IBNODE,IEN,0)),U,2)="" D PRVDEL1
         Q
         ;
PRVDEL(IBTCFLAG) --
          ; delete a pay-to provider
         N DA,DR,DIE,X,Y,DIR,DIRUT,DUOUT,DTOUT,I,IEN,DIVS,DFLT,IBNODE,IBDISP
         S IBNODE=$$NODE^IBJPS4(IBTCFLAG)
         S IBDISP=$S(IBTCFLAG:"Non-MCCF ",1:"")_"Pay-To Provider"
         S VALMBCK="R"
         D FULL^VALM1
         S IEN=$$SEL(IBTCFLAG) Q:'IEN
         S DFLT=$$ISDFLT(IEN,IBTCFLAG)
         I DFLT W !!,"WARNING: This is the default "_IBDISP_"."
         D GETDIVS^IBJPS4(IEN,.DIVS,IBTCFLAG)
         I 'DFLT D
         .W !!,"The following divisions are currently associated with this "_IBDISP_": "
         .S I="" F  S I=$O(DIVS(I)) Q:I=""  W !,?5,DIVS(I)
         .W:'$D(DIVS) "None",! W !
         .Q
         S DIR("?")="Enter Yes to delete this "_IBDISP_"."
         S DIR("A")="Delete "_IBDISP_" "_$P($G(^IBE(350.9,1,IBNODE,IEN,0)),U,2)
         S DIR(0)="YO",DIR("B")="NO" D ^DIR Q:'Y
         I DFLT S DIE="^IBE(350.9,",DA=1,DR=$S(IBTCFLAG:"11.04",1:"11.03")_"////@" D ^DIE
         I $D(DIVS) K DIK S DIK="^IBE(350.9,1,"_IBNODE_",",DA(1)=1,I="" F  S I=$O(DIVS(I)) Q:I=""  S DA=I D ^DIK
         K DIK
PRVDEL1  ;
         N DIK
         K DA
         S DIK="^IBE(350.9,1,"_IBNODE_","
         S DA(1)=1,DA=IEN
         D ^DIK
         D CLEAN^VALM10,INIT(IBTCFLAG)
         Q
         ;
PRVEDIT(IBTCFLAG) --
          ; edit existing pay-to provider
         N IEN,IBNODE
         S IBNODE=$$NODE^IBJPS4(IBTCFLAG)
         S VALMBCK="R"
         D FULL^VALM1
         S IEN=$$SEL(IBTCFLAG) Q:'IEN
PRVEDIT1 ;
         N DIE,DA,DR,DIR,DIRUT,DUOUT,DTOUT,X,Y
         S DIE="^IBE(350.9,1,"_IBNODE_","
         S DA=IEN,DA(1)=1
         S DR=".02T;1.01T;1.02T;1.03T;1.04T;1.05T;.04T;.03T;.05///@"
         D ^DIE
         S DIR("?")="Enter Yes to make this entry the default "_$S(IBTCFLAG:"Non-MCCF ",1:"")_"Pay-to Provider."
         S DIR("A")="Is this the default "_$S(IBTCFLAG:"Non-MCCF ",1:"")_"Pay-To Provider"
         S DIR(0)="YO"
         S DIR("B")="YES" I $$GETDFLT(IBTCFLAG),'$$ISDFLT(IEN,IBTCFLAG) S DIR("B")="NO"
         D ^DIR I Y K DA S DIE="^IBE(350.9,",DA=1,DR=$S(IBTCFLAG:"11.04",1:"11.03")_"////"_IEN D ^DIE
         D CLEAN^VALM10,INIT(IBTCFLAG)
         Q
         ;
SET(IBLN,IBSTR) --
          ; add a line to display list
         ; returns line number added
         S IBLN=IBLN+1 D SET^VALM10(IBLN,IBSTR)
         Q IBLN
         ;
ISDFLT(PIEN,IBTCFLAG) --
          ; returns 1 if provider with ien PIEN is the default pay-to provider, 0 otherwise
         Q:PIEN="" 0
         Q $$GETDFLT(IBTCFLAG)=PIEN
         ;
GETDFLT(IBTCFLAG) --
          ; returns ien of default pay-to provider
         Q $P($G(^IBE(350.9,1,11)),U,$S(IBTCFLAG:4,1:3))
         ;
SEL(IBTCFLAG) --
          ; select pay-to provider
         ; returns ien of selected pay-to provider, or 0 if nothing is selected
         N DIR,IEN,MAX,X,Y
         S IEN=0
         I VALMLST>4 D
         . ; there is at least one entry
         . S MAX=$O(@VALMAR@("ZIDX",""),-1) S:MAX=1 Y=1
         . I MAX>1 D
         . . S DIR("A")="Select "_$S(IBTCFLAG:"Non-MCCF ",1:"")_"Pay-To Provider (1-"_MAX_"): "
         . . S DIR(0)="NA^"_1_":"_MAX_":0"
         . . D ^DIR
         . . Q
         . S:+Y>0 IEN=$O(@VALMAR@("ZIDX",Y,""))
         . Q
         Q +IEN
         ;
PRVDATA(IBIFN) --
          ; Return a string of Pay-To provider information in the following format
         ;  [1] name
         ;  [2] npi
         ;  [3] tax id#
         ;  [4] phone#
         ;  [5] street 1
         ;  [6] street 2
         ;  [7] city
         ;  [8] state abbreviation
         ;  [9] zip
         ; [10] list of IB error messages if any of this data is missing in IBXX1;IBXX2;IBXX3;IBXX4; format
         ; [11] Institution (File 4) ien
         ;
         ; **NOTE:  pieces 12,13,14 are added to this string in output formatter data element #1624 for PRV1-1.5 for PRV1
         ; pieces 2,3,5.  If pieces are added here to this string, then adjust the code in PRV1-1.5,2,3,5 accordingly.
         ;
         N DATA,IB0,EVDT,IBDIV,INST,PIEN,IBER,IBTCFLAG
         S DATA="",IBER=""
         ;
         S IBTCFLAG=$$TRICARE^IBJPS4(IBIFN) ; Set IBTCFLAG to '1' if TRICARE claim, otherwise '0'.
         ;
         S IB0=$G(^DGCR(399,IBIFN,0))
         S EVDT=$P(IB0,U,3)                             ; event date on claim
         I 'EVDT S EVDT=DT
         S IBDIV=+$P(IB0,U,22)                          ; division on claim
         I 'IBDIV S IBDIV=$$PRIM^VASITE(EVDT)
         I IBDIV'>0 S IBDIV=$$PRIM^VASITE()
         I IBDIV'>0 G PRVDATX                           ; get out if no division
         S INST=+$$SITE^VASITE(EVDT,IBDIV)              ; inst file 4 pointer
         I INST'>0 S INST=+$$SITE^VASITE(DT,IBDIV)
         I INST'>0 S INST=+$$SITE^VASITE()
         I INST'>0 G PRVDATX                            ; get out if no institution
         ;
         ; check to see if this institution exists as a separate Pay-To Provider subfile entry
         S PIEN=+$O(^IBE(350.9,1,$S(IBTCFLAG:29,1:19),"B",INST,""))
         ;
         I 'PIEN D  G PRVDATX      ; this institution does not exist in 350.9004/350.929.
         . ; check to see if the default Pay-To provider information is defined (350.9;11.03/11.04)
         . S PIEN=+$P($G(^IBE(350.9,1,11)),U,$S(IBTCFLAG:4,1:3)) Q:'PIEN
         . S DATA=$$PTG(PIEN,IBTCFLAG)
         . Q
         ;
         ; here PIEN exists and the institution pointer was found in the 350.9004 subfile
         ; find parent pay-to provider
         S PIEN=$$GETPROV^IBJPS4(PIEN,IBTCFLAG) S:PIEN DATA=$$PTG(PIEN,IBTCFLAG)
         ;
PRVDATX  ;
         I DATA="" S IBER=IBER_"IB177;",$P(DATA,U,10)=IBER
         Q DATA
         ;
PTG(PIEN,IBTCFLAG) --
          ; gather pay-to provider info
         N N0,N1,IBORG,NPI,STIEN,STATE,Z,IBER,IBNODE
         ;
         S IBNODE=$$NODE^IBJPS4(+$G(IBTCFLAG))
         ;
         S Z="",IBER="",PIEN=+$G(PIEN)
         ;
         I '$D(^IBE(350.9,1,IBNODE,PIEN)) S IBER=IBER_"IB177;",$P(Z,U,10)=IBER G PTGX
         S N0=$G(^IBE(350.9,1,IBNODE,PIEN,0))
         S N1=$G(^IBE(350.9,1,IBNODE,PIEN,1))
         ;
         ; get the NPI# from the Institution file
         S IBORG=+$P(N0,U,1),NPI=""
         I IBORG S NPI=$P($$NPI^XUSNPI("Organization_ID",IBORG),U,1)
         ;
         ; get the state abbreviation
         S STIEN=+$P(N1,U,4),STATE=""
         I STIEN S STATE=$$GET1^DIQ(5,STIEN_",",1)
         ;
         ; check for missing data
         I '$L($P(N0,U,2)) S IBER=IBER_"IB178;"     ; missing name
         I NPI'>0 S IBER=IBER_"IB179;"              ; missing npi
         ; Patch 432 enh5:  The IB system shall no longer prevent users from authorizing (fatal error message) a claim because the s
          ystem can not find the human providers SSN or EIN
         ;I '$L($P(N0,U,3)) S IBER=IBER_"IB180;"     ; missing tax ID
         I '$L($P(N1,U,1))!'$L($P(N1,U,3))!'$L(STATE)!'$L($P(N1,U,5)) S IBER=IBER_"IB181;"     ; missing address part(s)
         ;
         S Z=$P(N0,U,2)_U_NPI_U_$P(N0,U,3)_U_$P(N0,U,4)_U_$P(N1,U,1)_U_$P(N1,U,2)_U_$P(N1,U,3)_U_STATE_U_$P(N1,U,5)_U_IBER_U_IBORG
PTGX     ;
         Q Z
         ;
PRVPHONE(IBIFN) --
          ; Return Pay-to provider phone# for a given claim
         ; IBIFN - internal claim# (optional parameter)
         ; If IBIFN is not passed in, then the phone# from the default pay-to provider entry will be returned.
         ; For example, AR option 'EDI Lockbox 3rd Party Exceptions' needs the phone# for the process of transfering an
         ; EEOB to another site, but the claim# is not available to this process.
         N PTPP,PIEN
         S PTPP=""
         I +$G(IBIFN) S PTPP=$P($$PRVDATA(IBIFN),U,4) G PRVPHNX
         ;
         S PIEN=+$P($G(^IBE(350.9,1,11)),U,3) I 'PIEN G PRVPHNX   ; no claim#, default pay-to provider
         S PTPP=$P($$PTG(PIEN),U,4)                               ; phone#
         ;
PRVPHNX  ;
         Q PTPP
         ;
DEF(INST,DA,IBTCFLAG) --
          ; This procedure is called by new style x-ref in
         ; order to default name and address fields.
         ; INST - IEN to file #4, Institution.  This is the value in the .01
         ;      field of the Pay-to or TRICARE Pay-to Providers sub-fil.
         ; DA - DA array as passed in from FileMan.  DA(1) should equal 1 since
         ;      this is the IB site params and there is only 1 entry.  DA should
         ;      equal the IEN to the pay-to provider multiple entry
         ; This procedure is called only if a new institution is being added to
         ; the sub-file or an entry in the sub-file is being changed from one
         ; institution to another.
         ;
         NEW NAD,IENS,ST,STIEN,IBTAXID,IBFILE
         ;
         I '$G(INST) G DEFX
         ;
         I IBTCFLAG S IBFILE=350.929
         E  S IBFILE=350.9004
         ;
         S ST=$$WHAT^XUAF4(INST,.02)             ; full state name
         S STIEN=$$FIND1^DIC(5,,"BX",ST,"B")     ; state ien
         ;
         ; if the selected pay-to provider institution is the same as the main
         ; facility name field from the IB site parameters, then also default
         ; the federal tax ID# from the IB site parameters into the pay-to
         ; provider tax ID# field.
         S IBTAXID=""
         I INST=$P($G(^IBE(350.9,1,0)),U,2) S IBTAXID=$P($G(^IBE(350.9,1,1)),U,5)
         ;
         S IENS=DA_",1,"
         S NAD(IBFILE,IENS,.02)=$$WHAT^XUAF4(INST,100)     ; official VA name
         S NAD(IBFILE,IENS,.03)=IBTAXID                    ; tax#
         S NAD(IBFILE,IENS,.04)=""                         ; phone# - blank it out
         S NAD(IBFILE,IENS,.05)=""                         ; parent - blank it out
         S NAD(IBFILE,IENS,1.01)=$$WHAT^XUAF4(INST,1.01)   ; address line 1
         S NAD(IBFILE,IENS,1.02)=$$WHAT^XUAF4(INST,1.02)   ; address line 2
         S NAD(IBFILE,IENS,1.03)=$$WHAT^XUAF4(INST,1.03)   ; city
         I STIEN S NAD(IBFILE,IENS,1.04)=STIEN             ; state
         S NAD(IBFILE,IENS,1.05)=$$WHAT^XUAF4(INST,1.04)   ; zip
         D FILE^DIE(,"NAD")
DEFX     ;
         Q
         ;
DIFF(IBIFN,EDI) --
          ; This function will determine if there are any differences between
         ; the Billing Provider name and address and the Pay-to Provider name and address.
         ; When these two are the same, then the Pay-to Provider information is
         ; suppressed and is not printed or transmitted.
         ; This function returns a 1 if differences are found, and 0 if they are the same.
         ;
         ; EDI=1 if this is being called for the electronic claim transmission
         ; EDI=0 if this is being called for the printed UB-04 claim form
         ;
         N BPZ,PTP,DIFF,BPNAME,BPAD1,BPAD2,BPCITY,BPST,BPZIP,IBZ
         S DIFF=0,EDI=+$G(EDI)
         S BPZ=+$$B^IBCEF79(IBIFN)            ; billing provider ien to file 4
         S PTP=$$UP^XLFSTR($$PRVDATA(IBIFN))  ; pay-to provider information
         ;
         ; for EDI claims, use the GETBP utility to get the billing provider data
         I EDI D
         . D GETBP^IBCEF79(IBIFN,"",BPZ,"DIFF",.IBZ)
         . S BPNAME=$$UP^XLFSTR($G(IBZ("DIFF","NAME")))
         . S BPAD1=$$UP^XLFSTR($G(IBZ("DIFF","ADDR1")))
         . S BPAD2=$$UP^XLFSTR($G(IBZ("DIFF","ADDR2")))
         . S BPCITY=$$UP^XLFSTR($G(IBZ("DIFF","CITY")))
         . S BPST=$$UP^XLFSTR($G(IBZ("DIFF","ST")))
         . S BPZIP=$$NOPUNCT^IBCEF($$UP^XLFSTR($G(IBZ("DIFF","ZIP"))))
         . Q
         ;
         ; for printed UB claims, use the Institution file for FL-1 data
         I 'EDI D
         . S BPNAME=$$UP^XLFSTR($$GETFAC^IBCEP8(BPZ,0,0))
         . S BPAD1=$$UP^XLFSTR($$GETFAC^IBCEP8(BPZ,0,1))
         . S BPAD2=$$UP^XLFSTR($$GETFAC^IBCEP8(BPZ,0,2))
         . S BPCITY=$$UP^XLFSTR($$GETFAC^IBCEP8(BPZ,0,"3C"))
         . S BPST=$$UP^XLFSTR($$GETFAC^IBCEP8(BPZ,0,"3S"))
         . S BPZIP=$$NOPUNCT^IBCEF($$UP^XLFSTR($$GETFAC^IBCEP8(BPZ,0,"3Z")))
         . Q
         ;
         I BPNAME'=$P(PTP,U,1) S DIFF=1 G DIFFX
         I BPAD1'=$P(PTP,U,5) S DIFF=1 G DIFFX
         I BPAD2'=$P(PTP,U,6) S DIFF=1 G DIFFX
         I BPCITY'=$P(PTP,U,7) S DIFF=1 G DIFFX
         I BPST'=$P(PTP,U,8) S DIFF=1 G DIFFX
         I BPZIP'=$$NOPUNCT^IBCEF($P(PTP,U,9)) S DIFF=1 G DIFFX
DIFFX    ;
         Q DIFF
         ;
MAINPRV(IBTCFLAG) --
          ; Return Pay-To provider information for main VAMC
         N DATA,IBER,IEN4,PIEN,IBNODE
         S IBNODE=$$NODE^IBJPS4(IBTCFLAG)
         S (DATA,IBER)="",IEN4=+$$SITE^VASITE I 'IEN4 G MAINPRVX
         S PIEN=$O(^IBE(350.9,1,IBNODE,"B",IEN4,"")) I 'PIEN G MAINPRVX
         I $P($G(^IBE(350.9,1,IBNODE,PIEN,0)),U,5)'="" G MAINPRVX   ; if this sub-entry is not a pay-to provider, then get out
         S DATA=$$PTG(PIEN,IBTCFLAG)
MAINPRVX ;
         I DATA="" S IBER=IBER_"IB177;",$P(DATA,U,10)=IBER
         Q DATA
         ;

*****   INDEX OF IBJPS3   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   BPAD1        DIFF+9~,DIFF+18*,DIFF+28*,DIFF+36
   BPAD2        DIFF+9~,DIFF+19*,DIFF+29*,DIFF+37
   BPCITY       DIFF+9~,DIFF+20*,DIFF+30*,DIFF+38
   BPNAME       DIFF+9~,DIFF+17*,DIFF+27*,DIFF+35
   BPST         DIFF+9~,DIFF+21*,DIFF+31*,DIFF+39
   BPZ          DIFF+9~,DIFF+11*,DIFF+16,DIFF+27,DIFF+28,DIFF+29,DIFF+30,DIFF+31,DIFF+32
   BPZIP        DIFF+9~,DIFF+22*,DIFF+32*,DIFF+40
   DA           PRVADD+1~,PRVDEL+1~,PRVDEL+18*,PRVDEL+19*,PRVDEL1+2!,PRVDEL1+4*,PRVEDIT1+1~,PRVEDIT1+3*,PRVEDIT1+10!*,DEF~,DEF+28
   DA(1         PRVADD+5*,PRVDEL+19*,PRVDEL1+4*,PRVEDIT1+3*
   DATA         PRVDATA+16~,PRVDATA+17*,PRVDATA+39*,PRVDATA+44*,PRVDATX+1*,PRVDATX+2,MAINPRV+1~,MAINPRV+3*,MAINPRV+6*,MAINPRVX+1*
                MAINPRVX+2
   DFLT         PRVDEL+1~,PRVDEL+7*,PRVDEL+8,PRVDEL+10,PRVDEL+18
   DIC          PRVADD+1~,PRVADD+5*
   DIC("A"      PRVADD+6*
   DIC(0        PRVADD+5*
   DIE          PRVADD+1~,PRVDEL+1~,PRVDEL+18*,PRVEDIT1+1~,PRVEDIT1+2*,PRVEDIT1+10*
   DIFF         DIFF+9~,DIFF+10*,DIFF+35*,DIFF+36*,DIFF+37*,DIFF+38*,DIFF+39*,DIFF+40*,DIFFX+1
   DIK          PRVDEL+19!*,PRVDEL+20!,PRVDEL1+1~,PRVDEL1+3*
   DIR          PRVADD+1~,PRVDEL+1~,PRVEDIT1+1~,SEL+2~
   DIR("?"      PRVDEL+15*,PRVEDIT1+6*
   DIR("A"      PRVDEL+16*,PRVEDIT1+7*,SEL+8*
   DIR("B"      PRVDEL+17*,PRVEDIT1+9*
   DIR(0        PRVDEL+17*,PRVEDIT1+8*,SEL+9*
   DIRUT        PRVADD+1~,PRVDEL+1~,PRVEDIT1+1~
   DIVS         PRVDEL+1~,PRVDEL+9,PRVDEL+13,PRVDEL+19
   DIVS(        PRVDEL+12,PRVDEL+19
   DLAYGO       PRVADD+1~,PRVADD+5*
   DR           PRVADD+1~,PRVDEL+1~,PRVDEL+18*,PRVEDIT1+1~,PRVEDIT1+4*,PRVEDIT1+10*
   DT           PRVDATA+23,PRVDATA+29
   DTOUT        PRVADD+1~,PRVDEL+1~,PRVEDIT1+1~
   DUOUT        PRVADD+1~,PRVDEL+1~,PRVEDIT1+1~
   EDI          DIFF~,DIFF+10*,DIFF+15,DIFF+26
   EVDT         PRVDATA+16~,PRVDATA+22*,PRVDATA+23*,PRVDATA+25,PRVDATA+28
   I            PRVDEL+1~,PRVDEL+12*,PRVDEL+19*
   IB0          PRVDATA+16~,PRVDATA+21*,PRVDATA+22,PRVDATA+24
   IBCNT        INIT+1~,INIT+4*,INIT+7*,INIT+8,INIT+33
   IBDISP       PRVDEL+1~,PRVDEL+3*,PRVDEL+8,PRVDEL+11,PRVDEL+15,PRVDEL+16
   IBDIV        PRVDATA+16~,PRVDATA+24*,PRVDATA+25*,PRVDATA+26*,PRVDATA+27,PRVDATA+28,PRVDATA+29
   IBER         PRVDATA+16~,PRVDATA+17*,PRVDATX+1*,PTG+1~,PTG+5*,PTG+7*,PTG+20*,PTG+21*,PTG+24*,PTG+26,MAINPRV+1~,MAINPRV+3*
                MAINPRVX+1*
   IBFILE       DEF+11~,DEF+15*,DEF+16*,DEF+29,DEF+30,DEF+31,DEF+32,DEF+33,DEF+34,DEF+35,DEF+36,DEF+37
   IBIFN        PRVDATA~,PRVDATA+19,PRVDATA+21,PRVPHONE~,PRVPHONE+7,DIFF~,DIFF+11,DIFF+12,DIFF+16
   IBLN         INIT+1~,INIT+4*,INIT+12*,INIT+16*,INIT+20*,INIT+22*,INIT+26*,INIT+28*,INIT+30*,INIT+32*,INIT+36*,INIT+38,SET~
                SET+2*,SET+3
   IBNODE       INIT+1~,INIT+2*,INIT+5,INIT+6,PRVADD+1~,PRVADD+2*,PRVADD+5,PRVADD+10,PRVDEL+1~,PRVDEL+2*,PRVDEL+16,PRVDEL+19
                PRVDEL1+3,PRVEDIT+1~,PRVEDIT+2*,PRVEDIT1+2,PTG+1~,PTG+3*,PTG+7,PTG+8,PTG+9,MAINPRV+1~,MAINPRV+2*,MAINPRV+4
                MAINPRV+5
   IBORG        PTG+1~,PTG+12*,PTG+13,PTG+26
   IBSTR        INIT+1~,INIT+8*,INIT+9*,INIT+10*,INIT+12,INIT+14*,INIT+16,INIT+18*,INIT+20,INIT+21*,INIT+22,INIT+25*,INIT+26
                INIT+27*,INIT+28,INIT+29*,INIT+30,INIT+31*,INIT+32,SET~,SET+2
   IBTAXID      DEF+11~,DEF+25*,DEF+26*,DEF+30
   IBTCFLAG     EN~,EN+1,HDR~,HDR+3,INIT~,INIT+2,INIT+7,INIT+9,INIT+36,PRVADD~,PRVADD+2,PRVADD+6,PRVDEL~,PRVDEL+2,PRVDEL+3,PRVDEL+6
                PRVDEL+7,PRVDEL+9,PRVDEL+18,PRVDEL1+6,PRVEDIT~,PRVEDIT+2,PRVEDIT+5,PRVEDIT1+6,PRVEDIT1+7,PRVEDIT1+9,PRVEDIT1+10
                PRVEDIT1+11
                ISDFLT~,ISDFLT+2,GETDFLT~,GETDFLT+1,SEL~,SEL+8,PRVDATA+16~,PRVDATA+19*,PRVDATA+34,PRVDATA+38,PRVDATA+39,PRVDATA+44
                PTG~,PTG+3,DEF~,DEF+15,MAINPRV~,MAINPRV+2,MAINPRV+6
   IBZ          DIFF+9~,DIFF+16
   IBZ("DIFF"   DIFF+17,DIFF+18,DIFF+19,DIFF+20,DIFF+21,DIFF+22
   IEN          PRVADD+1~,PRVADD+7*,PRVADD+8,PRVADD+10,PRVDEL+1~,PRVDEL+6*,PRVDEL+7,PRVDEL+9,PRVDEL+16,PRVDEL1+4,PRVEDIT+1~
                PRVEDIT+5*,PRVEDIT1+3,PRVEDIT1+9,PRVEDIT1+10,SEL+2~,SEL+3*,SEL+12*,SEL+14
   IEN4         MAINPRV+1~,MAINPRV+3*,MAINPRV+4
   IENS         DEF+11~,DEF+28*,DEF+29,DEF+30,DEF+31,DEF+32,DEF+33,DEF+34,DEF+35,DEF+36,DEF+37
   INST         PRVDATA+16~,PRVDATA+28*,PRVDATA+29*,PRVDATA+30*,PRVDATA+31,PRVDATA+34,DEF~,DEF+13,DEF+18,DEF+26,DEF+29,DEF+33
                DEF+34,DEF+35,DEF+37
   MAX          SEL+2~,SEL+6*,SEL+7,SEL+8,SEL+9
   N0           PTG+1~,PTG+8*,PTG+12,PTG+20,PTG+26
   N1           PTG+1~,PTG+9*,PTG+16,PTG+24,PTG+26
   NAD          DEF+11~
   NAD(         DEF+29*,DEF+30*,DEF+31*,DEF+32*,DEF+33*,DEF+34*,DEF+35*,DEF+36*,DEF+37*
   NPI          PTG+1~,PTG+12*,PTG+13*,PTG+21,PTG+26
   PDATA        INIT+1~,INIT+7*,INIT+10,INIT+14,INIT+18,INIT+21,INIT+25,INIT+27,INIT+29,INIT+31
   PIEN         INIT+1~,INIT+5*,INIT+6,INIT+7,INIT+9,INIT+33,ISDFLT~,ISDFLT+1,ISDFLT+2,PRVDATA+16~,PRVDATA+34*,PRVDATA+36
                PRVDATA+38*,PRVDATA+39,PRVDATA+44*,PTG~,PTG+5*,PTG+7,PTG+8,PTG+9,PRVPHONE+5~,PRVPHONE+9*,PRVPHONE+10,MAINPRV+1~
                MAINPRV+4*,MAINPRV+5
                MAINPRV+6
   PTP          DIFF+9~,DIFF+12*,DIFF+35,DIFF+36,DIFF+37,DIFF+38,DIFF+39,DIFF+40
   PTPP         PRVPHONE+5~,PRVPHONE+6*,PRVPHONE+7*,PRVPHONE+10*,PRVPHNX+1
   ST           DEF+11~,DEF+18*,DEF+19
   STATE        PTG+1~,PTG+16*,PTG+17*,PTG+24,PTG+26
   STIEN        PTG+1~,PTG+16*,PTG+17,DEF+11~,DEF+19*,DEF+36
   U            INIT+6,INIT+10,INIT+14,INIT+18,INIT+21,INIT+25,INIT+27,INIT+29,INIT+31,PRVADD+10,PRVDEL+16,GETDFLT+1,PRVDATA+22
                PRVDATA+24,PRVDATA+38,PRVDATX+1,PTG+7,PTG+12,PTG+13,PTG+16,PTG+20,PTG+24,PTG+26,PRVPHONE+7,PRVPHONE+9,PRVPHONE+10
                DEF+26
                DIFF+35,DIFF+36,DIFF+37,DIFF+38,DIFF+39,DIFF+40,MAINPRV+5,MAINPRVX+1
>> VALMAR       INIT+33,SEL+6,SEL+12
>> VALMBCK      PRVADD+4*,PRVDEL+4*,PRVEDIT+3*
>> VALMBG       INIT+38*
>> VALMCNT      INIT+4*,INIT+38*
>> VALMLST      SEL+4
>> VALMSG       HDR+3*
   X            HELP+1*,PRVADD+1~,PRVDEL+1~,PRVEDIT1+1~,SEL+2~
   Y            PRVADD+1~,PRVADD+7,PRVDEL+1~,PRVDEL+17,PRVEDIT1+1~,PRVEDIT1+10,SEL+2~,SEL+6*,SEL+12
   Z            PTG+1~,PTG+5*,PTG+7*,PTG+26*,PTGX+1

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399           PRVDATA+21
   ^IBE(350.9          INIT+5,INIT+6,PRVADD+10,PRVDEL+16,GETDFLT+1,PRVDATA+34,PRVDATA+38,PTG+7,PTG+8,PTG+9,PRVPHONE+9,DEF+26
                       MAINPRV+4,MAINPRV+5

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$GETDFLT    PRVEDIT1+9,ISDFLT+2
   $$ISDFLT     INIT+9,PRVDEL+7,PRVEDIT1+9
   $$PRVDATA    PRVPHONE+7,DIFF+12
   $$PTG        INIT+7,PRVDATA+39,PRVDATA+44,PRVPHONE+10,MAINPRV+6
   $$SEL        PRVDEL+6,PRVEDIT+5
   $$SET        INIT+12,INIT+16,INIT+20,INIT+22,INIT+26,INIT+28,INIT+30,INIT+32,INIT+36
   DEFX         DEF+13
   DIFFX        DIFF+35,DIFF+36,DIFF+37,DIFF+38,DIFF+39,DIFF+40
   INIT         PRVDEL1+6,PRVEDIT1+11
   MAINPRVX     MAINPRV+3,MAINPRV+4,MAINPRV+5
   PRVDATX      PRVDATA+27,PRVDATA+31,PRVDATA+36
   PRVDEL1      PRVADD+10
   PRVEDIT1     PRVADD+9
   PRVPHNX      PRVPHONE+7,PRVPHONE+9
   PTGX         PTG+7

External References
   ^DIC                PRVADD+7
   $$FIND1^DIC         DEF+19
   ^DIE                PRVDEL+18,PRVEDIT1+5,PRVEDIT1+10
   FILE^DIE            DEF+38
   ^DIK                PRVDEL+19,PRVDEL1+5
   $$GET1^DIQ          PTG+17
   ^DIR                PRVDEL+17,PRVEDIT1+10,SEL+10
   $$NOPUNCT^IBCEF     DIFF+22,DIFF+32,DIFF+40
   $$B^IBCEF79         DIFF+11
   GETBP^IBCEF79       DIFF+16
   $$GETFAC^IBCEP8     DIFF+27,DIFF+28,DIFF+29,DIFF+30,DIFF+31,DIFF+32
   $$GETPROV^IBJPS4    PRVDATA+44
   $$NODE^IBJPS4       INIT+2,PRVADD+2,PRVDEL+2,PRVEDIT+2,PTG+3,MAINPRV+2
   $$TRICARE^IBJPS4    PRVDATA+19
   GETDIVS^IBJPS4      PRVDEL+9
   EN^VALM             EN+1
   $$SETSTR^VALM1      INIT+8,INIT+9,INIT+10,INIT+14,INIT+18,INIT+21,INIT+25,INIT+27,INIT+29,INIT+31,INIT+36
   CLEAR^VALM1         EXIT+1
   FULL^VALM1          PRVADD+3,PRVDEL+5,PRVEDIT+4
   CLEAN^VALM10        EXIT+1,PRVDEL1+6,PRVEDIT1+11
   SET^VALM10          SET+2
   $$PRIM^VASITE       PRVDATA+25,PRVDATA+26
   $$SITE^VASITE       PRVDATA+28,PRVDATA+29,PRVDATA+30,MAINPRV+3
   $$UP^XLFSTR         DIFF+12,DIFF+17,DIFF+18,DIFF+19,DIFF+20,DIFF+21,DIFF+22,DIFF+27,DIFF+28,DIFF+29,DIFF+30,DIFF+31,DIFF+32
   DISP^XQORM1         HELP+1
   $$WHAT^XUAF4        DEF+18,DEF+29,DEF+33,DEF+34,DEF+35,DEF+37
   $$NPI^XUSNPI        PTG+13

*****   END   *****


IBJPS4   * *  186 Lines,  7012 Bytes, Checksum: B37240589                                             Mar 20, 2019@15:10:13 page 25
              1937 bytes in comments
IBJPS4   ;BP/YMG - IB Site Parameters, Pay-To Provider Associations ;06-Nov-2008
         ;;2.0;INTEGRATED BILLING;**400,516,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
         ; MRD;IB*2.0*516 - Added logic pertaining to TRICARE-Specific Pay-To
         ; Providers, which entailed adding the parameter IBTCFLAG to many
         ; procedures here and in ^IBJPS3.
         ;
EN(IBTCFLAG) --
          ; -- main entry point for IBJP IB PAY-TO ASSOCIATIONS
         ; select pay-to provider
         D EN^VALM("IBJP IB "_$S(IBTCFLAG:"TRICARE PAY-TO ASSOCS",1:"PAY-TO ASSOCIATIONS"))
         S VALMBCK="R"
         Q
         ;
HDR      ; -- header code
         S VALMHDR(1)=""
         Q
         ;
INIT(IBTCFLAG) --
          ; -- init variables and list array
         N DFLT,HASDIVS,IBCNT,IBLN,IBSTR,IEN4,PIEN,PROVS
         S DFLT=$$GETDFLT^IBJPS3(IBTCFLAG) D BLD(DFLT,.PROVS,IBTCFLAG)
         I $D(PROVS) D
         .; create listman array
         .S (IBCNT,IBLN)=0 S PIEN="" F  S PIEN=$O(PROVS(PIEN)) Q:PIEN=""  D
         ..S IBLN=IBLN+1
         ..S IBSTR=$$SETSTR^VALM1(PROVS(PIEN)_$S($$ISDFLT^IBJPS3(PIEN,IBTCFLAG):"  (Default)",1:""),"",2,75)
         ..D SET^VALM10(IBLN,IBSTR)
         ..S HASDIVS=0,IEN4="" F  S IEN4=$O(PROVS(PIEN,IEN4)) Q:IEN4=""  D
         ...S IBLN=IBLN+1,IBCNT=IBCNT+1 S:'HASDIVS HASDIVS=1
         ...S IBSTR=$$SETSTR^VALM1(IBCNT,"",8,4)
         ...S IBSTR=$$SETSTR^VALM1($P(PROVS(PIEN,IEN4),U,2),IBSTR,14,8)
         ...S IBSTR=$$SETSTR^VALM1($P(PROVS(PIEN,IEN4),U),IBSTR,24,55)
         ...D SET^VALM10(IBLN,IBSTR)
         ...S @VALMAR@("ZIDX",IBCNT,IEN4)=""
         ...Q
         ..I 'HASDIVS S IBSTR=$$SETSTR^VALM1("No Divisions found.","",8,45) S IBLN=IBLN+1 D SET^VALM10(IBLN,IBSTR)
         ..S IBLN=IBLN+1 D SET^VALM10(IBLN,"")
         ..Q
         .Q
         I 'DFLT S IBLN=$$SET^IBJPS3(0,$$SETSTR^VALM1("No Default "_$S(IBTCFLAG:"Non-MCCF ",1:"")_"Pay-To Provider found.","",11,42)
          )
         I DFLT,'$D(PROVS) S IBLN=$$SET^IBJPS3(0,$$SETSTR^VALM1("No "_$S(IBTCFLAG:"Non-MCCF ",1:"")_"Pay-To Providers found.","",15,
          35))
         S VALMCNT=IBLN,VALMBG=1
         Q
         ;
HELP     ; -- help code
         S X="?" D DISP^XQORM1 W !!
         Q
         ;
EXIT     ; -- exit code
         D CLEAR^VALM1,CLEAN^VALM10
         Q
         ;
BLD(DFLT,PROVS,IBTCFLAG) --
          ; build array of pay-to providers and divisions
         N ALLDIVS,DIEN,DIVDATA,I,IB0,IEN4,PIEN,IBNODE
         I DFLT'>0 Q
         S IBNODE=$$NODE(IBTCFLAG)
         ;
         ; create list of all pay-to providers
         S I=0 F  S I=$O(^IBE(350.9,1,IBNODE,I)) Q:'I  D
         .S IB0=$G(^IBE(350.9,1,IBNODE,I,0)) I 'IB0 Q
         .I $P(IB0,U,5)="" S PROVS(I)=$P(IB0,U,2)
         .Q
         I $D(PROVS) D
         .; add divisions to the list
         .D LIST^DIC(40.8,,"@;.01;.07I","PQ",,,,,,,"ALLDIVS")
         .I $D(ALLDIVS) S I=0 F  S I=$O(ALLDIVS("DILIST",I)) Q:I=""  D
         ..; make sure that we have a file 4 ien to work with
         ..S DIVDATA=$G(ALLDIVS("DILIST",I,0)),IEN4=$P(DIVDATA,U,3) I IEN4="" Q
         ..S DIEN=$O(^IBE(350.9,1,IBNODE,"B",IEN4,""))
         ..; if there is an entry in 350.9 for this division, get corresponding pay-to provider
         ..; otherwise, use default pay-to provider 
         ..S PIEN=$S(DIEN:$$GETPROV(DIEN,IBTCFLAG),1:DFLT)
         ..; add this division to the list as division name ^ station number
         ..S PROVS(PIEN,IEN4)=$P(DIVDATA,U,2)_U_$$GET1^DIQ(4,IEN4,99)
         ..Q
         .Q
         D CLEAN^DILF
         Q
         ;
SEL()    ; select division
         ; returns ien of selected division, or 0 if nothing is selected
         N DIR,IEN,MAX,X,Y
         S IEN=0,MAX=+$O(@VALMAR@("ZIDX",""),-1)
         I MAX>0 D
         .S:MAX=1 Y=1 I MAX>1 S DIR("A")="Select Division (1-"_MAX_"): ",DIR(0)="NA^"_1_":"_MAX_":0" D ^DIR
         .S:+Y>0 IEN=$O(@VALMAR@("ZIDX",Y,""))
         .Q
         Q +IEN
         ;
DIVADD(IBTCFLAG) --
          ; associate division with a pay-to provider
         N DA,DFLT,DIC,DIE,DIEN,DIR,DNAME,DR,IEN4,IEN19,Y,IBNODE
         S IBNODE=$$NODE(IBTCFLAG)
         ;
         D FULL^VALM1
         S VALMBCK="R"
         S IEN4=$$SEL I IEN4>0 D
         .S IEN19=$O(^IBE(350.9,1,IBNODE,"B",IEN4,"")) I IEN19="" D
         ..; create a new entry in 350.9
         ..S DIEN=$$FIND1^DIC(40.8,,"QX",IEN4,"AD") I 'DIEN Q
         ..S DNAME=$$GET1^DIQ(40.8,DIEN,.01),DFLT=$$GETDFLT^IBJPS3(IBTCFLAG) I 'DFLT Q
         ..I IEN4=+$G(^IBE(350.9,1,IBNODE,DFLT,0)) D ERR Q
         ..S DIC="^IBE(350.9,1,"_IBNODE_",",DIC(0)="L",DIC("DR")=".02////"_DNAME_";.05////"_DFLT,X=IEN4,DLAYGO=350.9,DA(1)=1
         ..K DD,DO D FILE^DICN I +Y>0 S IEN19=+Y
         ..K DIC,DD,DO,DLAYGO
         ..Q
         .I +IEN19>0 D
         ..I $P($G(^IBE(350.9,1,IBNODE,IEN19,0)),U,5)="" D ERR Q
         ..S DIR(0)="P^IBE(350.9,1,"_IBNODE_",:M",DIR("S")="I $P(^(0),U,5)="""""
         ..S DA(1)=1,DIR("A")="Select "_$S(IBTCFLAG:"Non-MCCF ",1:"")_"Pay-To Provider"
         ..D ^DIR
         ..I +Y>0 S DIE="^IBE(350.9,1,"_IBNODE_",",DA=IEN19,DA(1)=1,DR=".05////"_+Y D ^DIE
         .Q
         D CLEAN^VALM10,CLEAN^DILF,INIT(IBTCFLAG)
         Q
         ;
ERR      ;
         N DIR
         S DIR("A",1)="A division used as a Pay-to Provider cannot be associated"
         S DIR("A",2)="with another Pay-to Provider."
         S DIR("A")="Press RETURN to continue: "
         S DIR(0)="EA" D ^DIR
         Q
         ;
GETPROV(PIEN,IBTCFLAG) --
          ; return pay-to provider ien for a given division, or 0 if provider can't be found
         ; PIEN has to be a valid ien in pay-to providers sub-file
         ;
         N PRVZ,NXTPIEN,OUT,IBNODE
         S PRVZ(PIEN)="" ; this array holds ien's to prevent infinite chain
         S IBNODE=$$NODE(IBTCFLAG)
         S OUT=0 F  S NXTPIEN=+$P($G(^IBE(350.9,1,IBNODE,PIEN,0)),U,5) D  Q:OUT  ;
         .I 'NXTPIEN S OUT=1 Q  ; no parent - this is pay-to provider
         .I $D(PRVZ(NXTPIEN)) S PIEN=0,OUT=1 Q  ; we are in an infinite loop, so get out
         .S PIEN=NXTPIEN,PRVZ(NXTPIEN)="" ; parent exists, so continue the loop
         .Q
         Q PIEN
         ;
GETDIVS(PIEN,DIVS,IBTCFLAG) --
          ; return array of divisions associated with pay-to provider PIEN
         N I,DIV,PPROV,IBNODE
         S IBNODE=$$NODE(IBTCFLAG)
         S I="" F  S I=$O(^IBE(350.9,1,IBNODE,"B",I)) Q:I=""  D
         .S DIV=$O(^IBE(350.9,1,IBNODE,"B",I,""))
         .Q:+DIV'>0  S PPROV=$$GETPROV(DIV,IBTCFLAG)
         .I PPROV=PIEN,DIV'=PIEN S DIVS(DIV)=$P($G(^IBE(350.9,1,IBNODE,DIV,0)),U,2)
         .Q
         Q
         ;
NODE(IBTCFLAG) --
          ; Determine appropriate pay-to provide node within ^IBE(350.9).
         ; '29' for TRICARE, otherwise '19'.
         Q $S(IBTCFLAG:29,1:19)
         ;
SCRN4(IEN) --
          ; Screen for INSTITUTION(#4) file
         N DIERR,IENS,FIELDS,Z,ZERR
         S IENS=+IEN_",",FIELDS="11;13;101"
         D GETS^DIQ(4,IENS,FIELDS,"IE","Z","ZERR")
         I $D(DIERR) Q 0
         ;Check to see if National
         I Z(4,IENS,11,"I")'="N" Q 0
         ;Check to see if Inactive
         I Z(4,IENS,101,"I") Q 0
         ;Check to see if Pharmacy
         I "^PHARM^CMOP^MSN^"[(U_Z(4,IENS,13,"E")_U) Q 0
         ;Default
         Q 1
         ;
TRICARE(IBIFN) --
          ; Determine whether this bill/claim is TRICARE or not.
         ; Return '1' if TRICARE, '0' if not.  There are two rate types that
         ; should return '1': TRICARE and TRICARE REIMB. INS.
         ; 
         ; This has been modified to reflect Non-MCCF Claims and not just TRICARE. - IB*2.0*608 - vd (US2599)
         ;
         I '$G(IBIFN) Q 0
         N IBRATE
         S IBRATE=$P(^DGCR(399,IBIFN,0),U,7)
         I 'IBRATE Q 0
         ;
         ;/Begin IB*2.0*608 - vd (US2599) - Replaced the following lines
         ; I $P($G(^DGCR(399.3,IBRATE,0)),U)'["TRICARE" Q 0
         I '$D(^IBE(350.9,1,28,"B",IBRATE)) Q 0   ; Not a Non-MCCF Pay-to Provider Rate Type.
         ;/End IB*2.0*608 - vd
         ;
         ; At this point, the claim has a Non-MCCF rate type  However,
         ; quit with a '1' only if a default Non-MCCF-specific pay-to
         ; provider is defined. Otherwise, quit with a '0'.
         ;
         I $$GETDFLT^IBJPS3(1) Q 1
         Q 0

*****   INDEX OF IBJPS4   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   ALLDIVS      BLD+1~,BLD+13
   ALLDIVS("DILIST" 
                BLD+13,BLD+15
   DA           DIVADD+1~,DIVADD+21*
   DA(1         DIVADD+12*,DIVADD+19*,DIVADD+21*
   DD           DIVADD+13!,DIVADD+14!
   DFLT         INIT+1~,INIT+2*,INIT+21,INIT+22,BLD~,BLD+2,BLD+19,DIVADD+1~,DIVADD+10*,DIVADD+11,DIVADD+12
   DIC          DIVADD+1~,DIVADD+12*,DIVADD+14!
   DIC("DR"     DIVADD+12*
   DIC(0        DIVADD+12*
   DIE          DIVADD+1~,DIVADD+21*
   DIEN         BLD+1~,BLD+16*,BLD+19,DIVADD+1~,DIVADD+9*,DIVADD+10
   DIERR        SCRN4+1~,SCRN4+4
   DIR          SEL+2~,DIVADD+1~,ERR+1~
   DIR("A"      SEL+5*,DIVADD+19*,ERR+2*,ERR+3*,ERR+4*
   DIR("S"      DIVADD+18*
   DIR(0        SEL+5*,DIVADD+18*,ERR+5*
   DIV          GETDIVS+1~,GETDIVS+4*,GETDIVS+5,GETDIVS+6
   DIVDATA      BLD+1~,BLD+15*,BLD+21
   DIVS         GETDIVS~
   DIVS(        GETDIVS+6*
   DLAYGO       DIVADD+12*,DIVADD+14!
   DNAME        DIVADD+1~,DIVADD+10*,DIVADD+12
   DO           DIVADD+13!,DIVADD+14!
   DR           DIVADD+1~,DIVADD+21*
   FIELDS       SCRN4+1~,SCRN4+2*,SCRN4+3
   HASDIVS      INIT+1~,INIT+9*,INIT+10*,INIT+17
   I            BLD+1~,BLD+6*,BLD+7,BLD+8,BLD+13*,BLD+15,GETDIVS+1~,GETDIVS+3*,GETDIVS+4
   IB0          BLD+1~,BLD+7*,BLD+8
   IBCNT        INIT+1~,INIT+5*,INIT+10*,INIT+11,INIT+15
   IBIFN        TRICARE~,TRICARE+6,TRICARE+8
   IBLN         INIT+1~,INIT+5*,INIT+6*,INIT+8,INIT+10*,INIT+14,INIT+17*,INIT+18*,INIT+21*,INIT+22*,INIT+23
   IBNODE       BLD+1~,BLD+3*,BLD+6,BLD+7,BLD+16,DIVADD+1~,DIVADD+2*,DIVADD+7,DIVADD+11,DIVADD+12,DIVADD+17,DIVADD+18,DIVADD+21
                GETPROV+3~,GETPROV+5*,GETPROV+6,GETDIVS+1~,GETDIVS+2*,GETDIVS+3,GETDIVS+4,GETDIVS+6
   IBRATE       TRICARE+7~,TRICARE+8*,TRICARE+9,TRICARE+13
   IBSTR        INIT+1~,INIT+7*,INIT+8,INIT+11*,INIT+12*,INIT+13*,INIT+14,INIT+17*
   IBTCFLAG     EN~,EN+2,INIT~,INIT+2,INIT+7,INIT+21,INIT+22,BLD~,BLD+3,BLD+19,DIVADD~,DIVADD+2,DIVADD+10,DIVADD+19,DIVADD+23
                GETPROV~,GETPROV+5,GETDIVS~,GETDIVS+2,GETDIVS+5,NODE~,NODE+2
   IEN          SEL+2~,SEL+3*,SEL+6*,SEL+8,SCRN4~,SCRN4+2
   IEN19        DIVADD+1~,DIVADD+7*,DIVADD+13*,DIVADD+16,DIVADD+17,DIVADD+21
   IEN4         INIT+1~,INIT+9*,INIT+12,INIT+13,INIT+15,BLD+1~,BLD+15*,BLD+16,BLD+21,DIVADD+1~,DIVADD+6*,DIVADD+7,DIVADD+9
                DIVADD+11,DIVADD+12
   IENS         SCRN4+1~,SCRN4+2*,SCRN4+3,SCRN4+6,SCRN4+8,SCRN4+10
   MAX          SEL+2~,SEL+3*,SEL+4,SEL+5
   NXTPIEN      GETPROV+3~,GETPROV+6*,GETPROV+7,GETPROV+8,GETPROV+9
   OUT          GETPROV+3~,GETPROV+6*,GETPROV+7*,GETPROV+8*
   PIEN         INIT+1~,INIT+5*,INIT+7,INIT+9,INIT+12,INIT+13,BLD+1~,BLD+19*,BLD+21,GETPROV~,GETPROV+4,GETPROV+6,GETPROV+8*
                GETPROV+9*,GETPROV+11,GETDIVS~,GETDIVS+6
   PPROV        GETDIVS+1~,GETDIVS+5*,GETDIVS+6
   PROVS        INIT+1~,INIT+2,INIT+3,INIT+22,BLD~,BLD+10
   PROVS(       INIT+5,INIT+7,INIT+9,INIT+12,INIT+13,BLD+8*,BLD+21*
   PRVZ         GETPROV+3~
   PRVZ(        GETPROV+4*,GETPROV+8,GETPROV+9*
   U            INIT+12,INIT+13,BLD+8,BLD+15,BLD+21,DIVADD+17,GETPROV+6,GETDIVS+6,SCRN4+10,TRICARE+8
>> VALMAR       INIT+15,SEL+3,SEL+6
>> VALMBCK      EN+3*,DIVADD+5*
>> VALMBG       INIT+23*
>> VALMCNT      INIT+23*
>> VALMHDR(1    HDR+1*
   X            HELP+1*,SEL+2~,DIVADD+12*
   Y            SEL+2~,SEL+5*,SEL+6,DIVADD+1~,DIVADD+13,DIVADD+21
   Z            SCRN4+1~
   Z(4          SCRN4+6,SCRN4+8,SCRN4+10
   ZERR         SCRN4+1~

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399           TRICARE+8
   ^IBE(350.9          BLD+6,BLD+7,BLD+16,DIVADD+7,DIVADD+11,DIVADD+17,GETPROV+6,GETDIVS+3,GETDIVS+4,GETDIVS+6,TRICARE+13

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$GETPROV    BLD+19,GETDIVS+5
   $$NODE       BLD+3,DIVADD+2,GETPROV+5,GETDIVS+2
   $$SEL        DIVADD+6
   BLD          INIT+2
   ERR          DIVADD+11,DIVADD+17
   INIT         DIVADD+23

External References
   $$FIND1^DIC         DIVADD+9
   LIST^DIC            BLD+12
   FILE^DICN           DIVADD+13
   ^DIE                DIVADD+21
   CLEAN^DILF          BLD+24,DIVADD+23
   $$GET1^DIQ          BLD+21,DIVADD+10
   GETS^DIQ            SCRN4+3
   ^DIR                SEL+5,DIVADD+20,ERR+5
   $$GETDFLT^IBJPS3    INIT+2,DIVADD+10,TRICARE+20
   $$ISDFLT^IBJPS3     INIT+7
   $$SET^IBJPS3        INIT+21,INIT+22
   EN^VALM             EN+2
   $$SETSTR^VALM1      INIT+7,INIT+11,INIT+12,INIT+13,INIT+17,INIT+21,INIT+22
   CLEAR^VALM1         EXIT+1
   FULL^VALM1          DIVADD+4
   CLEAN^VALM10        EXIT+1,DIVADD+23
   SET^VALM10          INIT+8,INIT+14,INIT+17,INIT+18
   DISP^XQORM1         HELP+1

*****   END   *****


IBJPS7   * *  127 Lines,  3684 Bytes, Checksum: B13118039                                             Mar 20, 2019@15:10:13 page 26
              914 bytes in comments
IBJPS7   ;ALB/VD - IB Site Parameters, Pay-To Provider Rate Types ;02-Feb-2018
         ;;2.0;INTEGRATED BILLING;**608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
EN(IBTCFLAG) --
          ; -- main entry point for IBJP IB PAY-TO RATE TYPES
         ; select pay-to provider
         Q:(IBTCFLAG'=1)  ; Only want Non-MCCF Pay-To Provider Rate Types
         D EN^VALM("IBJP IB NON-MCCF RATE TYPES")
         S VALMBCK="R"
         Q
         ;
HDR      ; -- header code
         S VALMSG=""
         Q
         ;
INIT(IBTCFLAG) --
          ; -- init variables and list array
         N ERROR,IBCNT,IBLN,IBSTR,RTYDATA,RIENS,RTYPE
         Q:(IBTCFLAG'=1)  ; Only want Non-MCCF Pay-To Provider Rate Types
         ;
         S (VALMCNT,IBCNT,IBLN)=0
         I $D(^IBE(350.9,1,28,"B")) D
         . S RTYPE=0 F  S RTYPE=$O(^IBE(350.9,1,28,"B",RTYPE)) Q:'RTYPE  D
         . . ;
         . . S RIENS=RTYPE_","
         . . D GETS^DIQ(399.3,RIENS,".001;.01;.03","I","RTYDATA","ERROR")
         . . ; do not included *RESERVED codes (must be ACTIVATE = 0 for Active, 1 = InActive)
         . . Q:+$G(RTYDATA(399.3,RIENS,.03,"I"))
         . . S IBCNT=IBCNT+1
         . . S IBSTR=$$SETSTR^VALM1($J(IBCNT,4)_".","",2,6)
         . . S IBSTR=$$SETSTR^VALM1($J($G(RTYDATA(399.3,RIENS,.001,"I")),3),IBSTR,10,4)
         . . S IBSTR=$$SETSTR^VALM1($G(RTYDATA(399.3,RIENS,.01,"I")),IBSTR,17,30)
         . . S IBLN=$$SET(IBLN,IBSTR)
         . . S @VALMAR@("ZIDX",IBCNT,$G(RTYDATA(399.3,RIENS,.001,"I")))=""
         . . Q
         ;
         I 'IBLN S IBLN=$$SET(IBLN,$$SETSTR^VALM1("No Rate Types defined.","",13,40))
         ;
         S VALMCNT=IBLN,VALMBG=1
         Q
         ;
HELP     ; -- help code
         S X="?" D DISP^XQORM1 W !!
         Q
         ;
EXIT     ; -- exit code
         D CLEAR^VALM1,CLEAN^VALM10
         Q
         ;
RTADD(IBTCFLAG) --
          ; -- Add a new Rate Type
         N DA,DIK,DIR,DIROUT,DIRUT,DTOUT,DUOUT,FDA,IEN,IENS,X,Y,Z
         ;
         S VALMBCK="R"
         Q:'$$LOCK()  ; Couldn't lock for adding
         D FULL^VALM1
         ;
         I '$$ENTSEL(.IENS) D  Q  ; Select entry(s) to be added
         . S VALMSG="No Rate Type selected"
         . D UNLOCK
         D UNLOCK          ; Unlock the node.
         D INIT(IBTCFLAG) ; Rebuild list body
         S VALMSG="Added Rate Type(s)"
         Q
         ;
RTDEL(IBTCFLAG) --
          ; -- Delete a Rate Type
         N VALMY,Z
         D FULL^VALM1
         D EN^VALM2($G(XQORNOD(0)))
         S Z=0
         F  S Z=$O(VALMY(Z)) Q:'Z  D
         . N DA,DIK,IEN,RIEN
         . S IEN=$O(@VALMAR@("ZIDX",Z,""))
         . Q:'IEN
         . S RIEN=$O(^IBE(350.9,1,28,"B",IEN,""))
         . I +RIEN S DIK="^IBE(350.9,1,28,",DA(1)=1,DA=RIEN D ^DIK
         K @VALMAR
         D INIT(IBTCFLAG)
         S VALMBCK="R"
         Q
         ;
SET(IBLN,IBSTR) --
          ; -- Add a line to display list
         ; returns line number added
         S IBLN=IBLN+1 D SET^VALM10(IBLN,IBSTR,IBLN)
         Q IBLN
         ;
ENTSEL(IENS) --
          ; Selects an entry to be added to the specified Site Parameter Node
         ; Output: IENS - Array of selected IEN(s), "" if not selected
         ; Returns: 1 - At least one IEN selected, 0 otherwise
         N DA,DIC,DIR,DIROUT,DIRUT,DTOUT,DUOUT,FDA,STOP,X,Y,Z
         K IENS
         S STOP=0
         S DIC=399.3
         S DIC(0)="AEQM"
         S DIC("A")="Select a Rate Type to be added: "
         ;
         ; Set the Add filter
         S DIC("S")="I '$D(^IBE(350.9,1,28,""B"",Y))&'$D(IENS(+Y))"
         F  D  Q:STOP
         . D ^DIC
         . I Y'>0 S STOP=1 Q
         . S IENS(+Y)=""
         . ; create entry for Rate Type
         . K FDA
         . S FDA("350.928","+1,1,",.01)=+Y
         . S FDA("350.928","+1,1,",.02)=0
         . D UPDATE^DIE("","FDA")
         . Q
         ;
         I '$D(IENS) Q 0 ; No IENS selected
         Q 1
         ;
LOCK()   ;EP
         ; Attempt to lock the Non-MCCF Pay-To Providers Rate Types for Site Parameters.
         ; Returns: 1 - Successfully locked
         ; 0 - Not successfully locked and an error message is
         ; displayed
         L +^IBE(350.9,1,28):1
         I '$T D  Q 0
         . W @IOF,"Someone else is editing the Non-MCCF Pay-To Providers Rate Types"
         . W !,"Please Try again later"
         . D PAUSE^VALM1
         Q 1
         ;
UNLOCK   ;EP
         ; Unlocks the Non-MCCF Pay-To Providers Rate Types for IB Site Parameters.
         L -^IBE(350.9,1,28)
         Q
         ;

*****   INDEX OF IBJPS7   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   DA           RTADD+1~,RTDEL+6~,RTDEL+10*,ENTSEL+3~
   DA(1         RTDEL+10*
   DIC          ENTSEL+3~,ENTSEL+6*
   DIC("A"      ENTSEL+8*
   DIC("S"      ENTSEL+11*
   DIC(0        ENTSEL+7*
   DIK          RTADD+1~,RTDEL+6~,RTDEL+10*
   DIR          RTADD+1~,ENTSEL+3~
   DIROUT       RTADD+1~,ENTSEL+3~
   DIRUT        RTADD+1~,ENTSEL+3~
   DTOUT        RTADD+1~,ENTSEL+3~
   DUOUT        RTADD+1~,ENTSEL+3~
   ERROR        INIT+1~
   FDA          RTADD+1~,ENTSEL+3~,ENTSEL+17!
   FDA("350.928" 
                ENTSEL+18*,ENTSEL+19*
   IBCNT        INIT+1~,INIT+4*,INIT+12*,INIT+13,INIT+17
   IBLN         INIT+1~,INIT+4*,INIT+16*,INIT+20*,INIT+22,SET~,SET+2*,SET+3
   IBSTR        INIT+1~,INIT+13*,INIT+14*,INIT+15*,INIT+16,SET~,SET+2
   IBTCFLAG     EN~,EN+2,INIT~,INIT+2,RTADD~,RTADD+11,RTDEL~,RTDEL+12
   IEN          RTADD+1~,RTDEL+6~,RTDEL+7*,RTDEL+8,RTDEL+9
   IENS         RTADD+1~,RTADD+7,ENTSEL~,ENTSEL+4!,ENTSEL+23
   IENS(        ENTSEL+15*
   IOF          LOCK+7
   RIEN         RTDEL+6~,RTDEL+9*,RTDEL+10
   RIENS        INIT+1~,INIT+8*,INIT+9,INIT+11,INIT+14,INIT+15,INIT+17
   RTYDATA      INIT+1~
   RTYDATA(     INIT+11,INIT+14,INIT+15,INIT+17
   RTYPE        INIT+1~,INIT+6*,INIT+8
   STOP         ENTSEL+3~,ENTSEL+5*,ENTSEL+12,ENTSEL+14*
>> VALMAR       INIT+17,RTDEL+7,RTDEL+11
>> VALMBCK      EN+4*,RTADD+3*,RTDEL+13*
>> VALMBG       INIT+22*
>> VALMCNT      INIT+4*,INIT+22*
>> VALMSG       HDR+1*,RTADD+8*,RTADD+12*
   VALMY        RTDEL+1~
   VALMY(       RTDEL+5
   X            HELP+1*,RTADD+1~,ENTSEL+3~
>> XQORNOD(0    RTDEL+3
   Y            RTADD+1~,ENTSEL+3~,ENTSEL+14,ENTSEL+15,ENTSEL+18
   Z            RTADD+1~,RTDEL+1~,RTDEL+4*,RTDEL+5*,RTDEL+7,ENTSEL+3~

Global Variables  ( * Changed  ! Killed)
   ^IBE(350.9          INIT+5,INIT+6,RTDEL+9,LOCK+5,UNLOCK+2

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$ENTSEL     RTADD+7
   $$LOCK       RTADD+4
   $$SET        INIT+16,INIT+20
   INIT         RTADD+11,RTDEL+12
   UNLOCK       RTADD+9,RTADD+10

External References
   ^DIC                ENTSEL+13
   UPDATE^DIE          ENTSEL+20
   ^DIK                RTDEL+10
   GETS^DIQ            INIT+9
   EN^VALM             EN+3
   $$SETSTR^VALM1      INIT+13,INIT+14,INIT+15,INIT+20
   CLEAR^VALM1         EXIT+1
   FULL^VALM1          RTADD+5,RTDEL+2
   PAUSE^VALM1         LOCK+9
   CLEAN^VALM10        EXIT+1
   SET^VALM10          SET+2
   EN^VALM2            RTDEL+3
   DISP^XQORM1         HELP+1

*****   END   *****


IBJPS8   * *  114 Lines,  3042 Bytes, Checksum: B8772675                                              Mar 20, 2019@15:10:13 page 27
              857 bytes in comments
IBJPS8   ;AITC/WCJ - IB Site Parameters, CMN CPT Inclusions CPT Codes ;02-Feb-2018
         ;;2.0;INTEGRATED BILLING;**608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
EN       ; -- main entry point for IBJP IB CMN CPTS
         D EN^VALM("IBJPS CMN CPTS")
         Q
         ;
HDR      ; -- header code
         S VALMSG=""
         Q
         ;
INIT     ; -- init variables and list array
         N ERROR,IBCNT,IBLN,IBSTR
         N CPTDATA,CIENS,CPTIEN,RTYDSC
         ;
         S (VALMCNT,IBCNT,IBLN)=0
         I $D(^IBE(350.9,1,16,"B")) D
         . S CPTIEN=0 F  S CPTIEN=$O(^IBE(350.9,1,16,"B",CPTIEN)) Q:'CPTIEN  D
         . . ;
         . . S CIENS=CPTIEN_","
         . . D GETS^DIQ(81,CIENS,".001;.01;2","I","CPTDATA","ERROR")
         . . S IBCNT=IBCNT+1
         . . S IBSTR=$$SETSTR^VALM1($J(IBCNT,4)_".","",2,6)
         . . S IBSTR=$$SETSTR^VALM1($G(CPTDATA(81,CIENS,.01,"I")),IBSTR,10,10)
         . . S IBSTR=$$SETSTR^VALM1($G(CPTDATA(81,CIENS,2,"I")),IBSTR,25,30)
         . . S IBLN=$$SET(IBLN,IBSTR)
         . . S @VALMAR@("ZIDX",IBCNT,+CIENS)=""
         . . Q
         ;
         I 'IBLN S IBLN=$$SET(IBLN,$$SETSTR^VALM1("No CMN CPTs defined.","",13,40))
         ;
         S VALMCNT=IBLN,VALMBG=1
         Q
         ;
HELP     ; -- help code
         S X="?" D DISP^XQORM1 W !!
         Q
         ;
EXIT     ; -- exit code
         D CLEAR^VALM1,CLEAN^VALM10
         Q
         ;
EXPND    ; -- expand code
         Q
         ;
RTADD(IBTCFLAG) --
          ; -- Add a new CPT Codes
         N X,Y,DIE,DIR,DIRUT,DR,DTOUT,DUOUT,ERRMSG,FDA,RETIEN
         ;
         S VALMBCK="R"
         D FULL^VALM1
         D RTADD1
         D INIT
         Q
         ;
RTADD1   ; Looping tag for Adding CPT Codes
         K DA,DIE,DIR,DIRUT,DR,DTOUT,DUOUT,ERRMSG,FDA,RETIEN,X,Y
         ;
         S DIR(0)="350.916,.01"
         S DIR("A")="CPT Code"
         D ^DIR
         Q:'+Y
         ;
         I $D(^IBE(350.9,1,16,"B",+Y)) D  G RTADD1
         . D FULL^VALM1
         . W @IOF
         . W !,"This CPT Code already exists on the Inclusion list."
         . W !,"Please enter another CPT Code."
         . Q
         ;
         S FDA(350.916,"+1,1,",.01)=+Y
         D UPDATE^DIE("","FDA","RETIEN","ERRMSG")
         G RTADD1
         ;
RTDEL    ; -- Delete a CPT Coode
         N DR
         D RTDEL1
         S VALMBCK="R"
         Q
         ;
RTDEL1   ; Looping tag for deleting CPT Codes
         N Z,VALMY
         D FULL^VALM1
         D EN^VALM2($G(XQORNOD(0)))
         S Z=0
         F  S Z=$O(VALMY(Z)) Q:'Z  D
         . N DIK,IEN,RIEN
         . S IEN=$O(@VALMAR@("ZIDX",Z,""))
         . Q:IEN=""
         . S RIEN=$O(^IBE(350.9,1,16,"B",IEN,""))
         . I +RIEN S DIK="^IBE(350.9,1,16,",DA(1)=1,DA=RIEN D ^DIK
         K @VALMAR
         D INIT
         Q
         ;
SET(IBLN,IBSTR) --
          ; -- Add a line to display list
         ; returns line number added
         S IBLN=IBLN+1 D SET^VALM10(IBLN,IBSTR,IBLN)
         Q IBLN
         ;
CMNPRMT(IBXIEN,IBPROCP,CPTIEN) --
          ;JRA Determine if procedure requires prompting for CMN Info
         ;Basically checks if CPTIEN is in the "CMN CPT Code Inclusion" list
         ;  Input: IBXIEN  = Internal bill/claim number
         ;         IBPROCP = Procedure line subscript
         ;         CPTIEN  = CPT code ien
         ;
         ;  Output: 1 = Prompt user for CMN info
         ;          0 = Don't prompt user for CMN info
         ;
         I '$G(IBXIEN)!('$G(IBPROCP)!('$G(CPTIEN))) Q 0
         ;Prompt if the CPT is in IB Site Parameters "CMN CPT Code Inclusion" list -OR- if "CMN Required?" already set to "YES"
         I $D(^IBE(350.9,1,16,"B",CPTIEN))>1!($$CMNDATA^IBCEF31(IBXIEN,IBPROCP,23,"I")) Q 1
         Q 0
         ;

*****   INDEX OF IBJPS8   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   CIENS        INIT+2~,INIT+8*,INIT+9,INIT+12,INIT+13,INIT+15
   CPTDATA      INIT+2~
   CPTDATA(81   INIT+12,INIT+13
   CPTIEN       INIT+2~,INIT+6*,INIT+8,CMNPRMT~,CMNPRMT+9,CMNPRMT+11
   DA           RTADD1+1!,RTDEL1+10*
   DA(1         RTDEL1+10*
   DIE          RTADD+1~,RTADD1+1!
   DIK          RTDEL1+6~,RTDEL1+10*
   DIR          RTADD+1~,RTADD1+1!
   DIR("A"      RTADD1+4*
   DIR(0        RTADD1+3*
   DIRUT        RTADD+1~,RTADD1+1!
   DR           RTADD+1~,RTADD1+1!,RTDEL+1~
   DTOUT        RTADD+1~,RTADD1+1!
   DUOUT        RTADD+1~,RTADD1+1!
   ERRMSG       RTADD+1~,RTADD1+1!
   ERROR        INIT+1~
   FDA          RTADD+1~,RTADD1+1!
   FDA(         RTADD1+15*
   IBCNT        INIT+1~,INIT+4*,INIT+10*,INIT+11,INIT+15
   IBLN         INIT+1~,INIT+4*,INIT+14*,INIT+18*,INIT+20,SET~,SET+2*,SET+3
   IBPROCP      CMNPRMT~,CMNPRMT+9,CMNPRMT+11
   IBSTR        INIT+1~,INIT+11*,INIT+12*,INIT+13*,INIT+14,SET~,SET+2
   IBTCFLAG     RTADD~
   IBXIEN       CMNPRMT~,CMNPRMT+9,CMNPRMT+11
   IEN          RTDEL1+6~,RTDEL1+7*,RTDEL1+8,RTDEL1+9
   IOF          RTADD1+10
   RETIEN       RTADD+1~,RTADD1+1!
   RIEN         RTDEL1+6~,RTDEL1+9*,RTDEL1+10
   RTYDSC       INIT+2~
>> VALMAR       INIT+15,RTDEL1+7,RTDEL1+11
>> VALMBCK      RTADD+3*,RTDEL+3*
>> VALMBG       INIT+20*
>> VALMCNT      INIT+4*,INIT+20*
>> VALMSG       HDR+1*
   VALMY        RTDEL1+1~
   VALMY(       RTDEL1+5
   X            HELP+1*,RTADD+1~,RTADD1+1!
>> XQORNOD(0    RTDEL1+3
   Y            RTADD+1~,RTADD1+1!,RTADD1+6,RTADD1+8,RTADD1+15
   Z            RTDEL1+1~,RTDEL1+4*,RTDEL1+5*,RTDEL1+7

Global Variables  ( * Changed  ! Killed)
   ^IBE(350.9          INIT+5,INIT+6,RTADD1+8,RTDEL1+9,CMNPRMT+11

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$SET        INIT+14,INIT+18
   INIT         RTADD+6,RTDEL1+12
   RTADD1       RTADD+5,RTADD1+8,RTADD1+17
   RTDEL1       RTDEL+2

External References
   UPDATE^DIE          RTADD1+16
   ^DIK                RTDEL1+10
   GETS^DIQ            INIT+9
   ^DIR                RTADD1+5
   $$CMNDATA^IBCEF31   CMNPRMT+11
   EN^VALM             EN+1
   $$SETSTR^VALM1      INIT+11,INIT+12,INIT+13,INIT+18
   CLEAR^VALM1         EXIT+1
   FULL^VALM1          RTADD+4,RTADD1+9,RTDEL1+2
   CLEAN^VALM10        EXIT+1
   SET^VALM10          SET+2
   EN^VALM2            RTDEL1+3
   DISP^XQORM1         HELP+1

*****   END   *****


IBTUBO   * *  222 Lines,  10038 Bytes, Checksum: B73456123                                            Mar 20, 2019@15:10:13 page 28
              2168 bytes in comments
IBTUBO   ;ALB/AAS - UNBILLED AMOUNTS - GENERATE UNBILLED REPORTS ;29-SEP-94
         ;;2.0;INTEGRATED BILLING;**19,31,32,91,123,159,192,235,248,155,516,547,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
         ;Associated ICRs
         ;  ICR#
         ;  4671 - Supports reference to file 409.1
         ;   427 - Supports reference to file 8
         ;
%        ; - Entry point for manual option.
         N IBBDT,IBCOMP,IBDET,IBEDT,IBOPT,IBPRT,IBTIMON,IBQUIT,IBSEL,IBSBD
         S (IBQUIT,IBSBD)=0 D:'$D(DT) DT^DICRW
         W !!,"Re-Generate Unbilled Amounts Report",!
         ;
         ; - Ask to re-compile Unbilled Amounts data.
         S DIR(0)="Y",DIR("B")="NO"
         S DIR("A")="Do you want to store Unbilled Amounts figures"
         S DIR("?",1)="Enter 'YES' if you wish to store the Unbilled Amounts summary"
         S DIR("?",2)="figures in your system for a specific month/year in the past."
         S DIR("?",3)="Once stored, these figures will be available for inquiry through"
         S DIR("?",4)="the View Unbilled Amounts option [IBT VIEW UNBILLED AMOUNTS]."
         S DIR("?",5)="These summary figures are normally calculated and stored"
         S DIR("?",6)="automatically by the system at the beginning of each month for"
         S DIR("?",7)="the previous month."
         S DIR("?",8)=" "
         S DIR("?",9)="If you enter 'NO', the Unbilled Amounts summary figures will"
         S DIR("?",10)="NOT be stored in your system, and the report may be run for"
         S DIR("?")="any date range."
         D ^DIR K DIR G:$D(DIRUT) END S IBCOMP=Y
         ;
         ; IB*2.0*516 - Added ability to sort by Division
         ;
         K ^TMP($J,"IBTUB"),^TMP($J,"IBTUB-DIV")
         I IBCOMP G RDATE
         ;
         ;IB*2.0*547/TAZ - Add prompt to search by division. If NO bypass all division selection.
         S DIR(0)="Y",DIR("B")="NO" W !
         S DIR("A")="Search by Division?"
         S DIR("?",1)=" This opt allows you to search for all unbilled amounts"
         S DIR("?",2)=" or to search for unbilled amounts in only one or more"
         S DIR("?",3)=" divisions."
         S DIR("?",4)=""
         S DIR("?",5)="Choose from:"
         S DIR("?",6)="      N  NO"
         S DIR("?")="      Y  YES"
         D ^DIR K DIR G:$D(DIRUT) END
         S IBSBD=Y I 'IBSBD G DIVX
         ;
DIV      ; division
         W !!
         S DIR(0)="SA^A:All Divisions;S:Selected Divisions"
         S DIR("A")="Include All Divisions or Selected Divisions? "
         S DIR("B")="All"
         D ^DIR K DIR
         I $D(DIROUT)!$D(DIRUT) Q  ;Timeout or User "^"
         I Y="A" G DIVX
         ;
         W !
         F  D  I IBQUIT S IBQUIT=IBQUIT-1 Q
         . S DIC=40.8,DIC(0)="AEMQ",DIC("A")="   Select Division: "
         . I $O(^TMP($J,"IBTUB-DIV","")) S DIC("A")="   Select Another Division: "
         . D ^DIC K DIC                ; lookup
         . I X="^^" S IBQUIT=2 Q       ; user entered ^^
         . I +Y'>0 S IBQUIT=1 Q        ; user is done
         . S ^TMP($J,"IBTUB-DIV",+Y)=$P(Y,U,2)
         . Q
         ;
         I IBQUIT G END  ;User "^" out of the selection
         ;
         I '$O(^TMP($J,"IBTUB-DIV","")) D  G DIV
         . W *7,!!?3,"No divisions have been selected.  Please try again."
         . Q
         ;
DIVX     ; Exit Division selection.
         ;
         ;JRA;IB*2.0*608 Ask to Search by MCCF, Non-MCCF or Both - Start
         W !
         S DIR(0)="SA^M:MCCF;N:Non-MCCF (Outpatient Only);B:Both"
         S DIR("A")="Search by (M)CCF, (N)on-MCCF (Outpatient Only), or (B)oth? "
         S DIR("B")="M"
         S DIR("?",1)="Non-MCCF Eligibilities of Encounter are 'CHAMPVA', 'INELIGIBLE',"
         S DIR("?",2)=" 'EMPLOYEE', 'TRICARE' and 'SHARING AGREEMENT'."
         S DIR("?",3)="Non-MCCF Appointment Types are 'EMPLOYEE' and 'SHARING AGREEMENT'."
         S DIR("?",4)="Non-MCCF Rate Types are 'CHAMPVA REIMB. INS.', 'CHAMPVA',"
         S DIR("?",5)=" 'TRICARE REIMB. INS.', 'TRICARE', 'INELIGIBLE' and 'INTERAGENCY'."
         S DIR("?")="All other Eligibilities/Types are MCCF."
         D ^DIR K DIR G:($D(DIROUT)!($D(DIRUT))) END
         S IBMCCF=Y
         ;Set up arrays of Non-MCCF Rate Types, Non-MCCF Appointment Types and Non-MCCF Eligibility of Encounter entries.
         N ARTIEN,ARTYP,ELIG,ELIGIEN,X
         F ARTYP="INTERAGENCY","CHAMPVA REIMB. INS.","CHAMPVA","TRICARE REIMB. INS.","TRICARE","INELIGIBLE" D  ;Non-MCCF Rate Types
         . S ARTIEN=$O(^DGCR(399.3,"B",ARTYP,"")) I +ARTIEN S IBMCCF("RTYP",ARTIEN)=""
         F ARTYP="EMPLOYEE","SHARING AGREEMENT" D  ;Non-MCCF Appointment Types
         . ;DBIA4671 for following FIND^DIC
         . K ^TMP("DILIST",$J) D FIND^DIC(409.1,,"@;.01","X",ARTYP) I $D(^TMP("DILIST",$J,2))>1 D
         . . S X=0 F  S X=$O(^TMP("DILIST",$J,2,X)) Q:'X  S ARTIEN=^TMP("DILIST",$J,2,X) S:+ARTIEN IBMCCF("ATYP",ARTIEN)=""
         F ELIG="CHAMPVA","INELIGIBLE","EMPLOYEE","TRICARE","SHARING AGREEMENT" D  ;Non-MCCF "Eligibility of Encounter" Entries
         . ;DBIA427 for following FIND^DIC
         . K ^TMP("DILIST",$J) D FIND^DIC(8,,"@;.01","X",ELIG) I $D(^TMP("DILIST",$J,2))>1 D
         . . S X=0 F  S X=$O(^TMP("DILIST",$J,2,X)) Q:'X  S ELIGIEN=^TMP("DILIST",$J,2,X) S:+ELIGIEN IBMCCF("ELIG",ELIGIEN)=""
         ;JRA;IB*2.0*608 - End
         ;
         ; - Select date(s) to build report.
         W ! D DT1^IBTUBOU G:IBBDT="^" END
         ;
         ; - Select report(s).
         S IBPRT="Choose report type(s) to print:"
         ;S IBOPT(1)="INPATIENT UNBILLED"  ;JRA;IB*2.0*608 ';'
         ;S IBOPT(2)="OUTPATIENT UNBILLED"  ;JRA;IB*2.0*608 ';'
         ;S IBOPT(3)="PRESCRIPTION UNBILLED"  ;JRA;IB*2.0*608 ';'
         ;S IBOPT(4)="ALL OF THE ABOVE"  ;JRA;IB*2.0*608 ';'
         I $G(IBMCCF)="N" S IBOPT(1)="OUTPATIENT UNBILLED"  ;JRA;IB*2.0*608
         E  D  ;JRA;IB*2.0*608
         . S IBOPT(1)="INPATIENT UNBILLED"
         . S IBOPT(2)="OUTPATIENT UNBILLED"
         . S IBOPT(3)="PRESCRIPTION UNBILLED"
         . S IBOPT(4)="ALL OF THE ABOVE"
         ;S IBSEL=$$MLTP^IBJD(IBPRT,.IBOPT,1) I 'IBSEL G END  ;JRA;IB*2.0*608 ';'
         S IBSEL=$$MLTP^IBJD(IBPRT,.IBOPT,$S($G(IBMCCF)="N":"",1:1)) I 'IBSEL G END  ;JRA;IB*2.0*608
         ;JRA;IB*2.0*608 For Non-MCCF set IBSEL="2," since the value of IBSEL drives the computations and '2' is for Outpatient.
         ; Since "OUTPATIENT UNBILLED" is the only choice for Non-MCCF, IBSEL will be set to '1,' so need to reset to '2,'.
         S:$G(IBMCCF)="N" IBSEL="2,"  ;JRA;IB*2.0*608
         S $E(IBSEL,$L(IBSEL))=""
         ;
RDATE    ; - Select re-compile date, if necessary.
         I IBCOMP D  G END:IBTIMON="^",DET
         . W ! D DT2("Unbilled Amounts") Q:IBTIMON="^"
         . W !!,"NOTE: Just a reminder that by entering the above month/year this"
         . W !,"      report will re-calculate and update the Unbilled Amounts"
         . W !,"      data on file in your system.",*7
         . ;
         . ; - Initialize variables
         . I IBTIMON<3030900 N X S X=$$M2^IBJDE(IBTIMON,11,11) D 
         .. S IBBDT=+X,IBEDT=$P(X,U,2)+.9,IBSEL="1,2,3"
         . I IBTIMON'<3030900 S IBBDT=$$M3^IBJDE($$LDATE^IBJDE(IBTIMON)+1),IBEDT=$$LDATE^IBJDE(IBTIMON)+.9,IBSEL="1,2,3"
         . D MSG W !
         ;
         S IBTIMON=IBEDT\100*100
         ;
DET      ; - Ask to print detail report.
         S DIR(0)="Y",DIR("B")="NO" W !
         S DIR("A")="Print detail report with the Unbilled Amounts summary"
         S DIR("?",1)="Answer YES if you want a detailed listing of the patients"
         S DIR("?",2)="and events that are unbilled. Answer NO if you just want"
         S DIR("?")="the summary, or '^' to quit this option."
         D ^DIR K DIR G:$D(DIRUT) END S IBDET=Y G:'IBDET QUE
         ;
         ; Ask to include REQUEST MRA Status
         S DIR(0)="YA",DIR("A")="Do you want to include MRA claims?: ",DIR("B")="NO" W ! D ^DIR K DIR G:$D(DIRUT) END
         S IBINMRA=+Y
         ;
         ;IB*2.0*547/TAZ - Add prompt to sort by Patient or Divsion if Division Search was selected.
         I $G(IBSBD) D  G:$D(DIRUT) END
         . S DIR("A")="Sort by: ",DIR("B")="Patient Name" W !
         . S DIR(0)="SA^N:PATIENT NAME;D:DIVISION^S:X="""" X=""N"""
         . S DIR("?",1)=" This determines whether the unbilled amounts are displayed"
         . S DIR("?",2)=" in alphabetical order of patient name or in alphabetical "
         . S DIR("?")=" order of patient name within a division."
         . D ^DIR K DIR
         . S IBSBD=Y="D" ;IBSBD=0 - Sort by Patient Name, IBSBD=1, Sort by Patient Name within Division.
         ;
         ; - Select device to print.
         W !!,"This report takes a while to run, so you should queue it to run"
         W !,"after normal business hours."
         W !!,"You will need a 132 column printer for this report!",!
         S %ZIS="QM" D ^%ZIS G END:POP,QUE:$D(IO("Q"))
         ;
         U IO G STR
         ;
QUE      ; - Queue report/summary, if necessary.
         W ! I 'IBDET S ZTIO=""
         S ZTRTN="IBTUBOA",ZTSAVE("IB*")=""
         S ZTDESC="IB - Unbilled Amounts Report"
         D ^%ZTLOAD K IO("Q"),ZTSK
         D HOME^%ZIS G END
         ;
AUTO     ; - Entry point for scheduled option.
         Q  ;;**NO LONGER USED**
         ;
DQ       ; - Entry point for DM extract.
         ; - If AUTO PRINT UNBILLED LIST=yes and default report printer then
         ;   automatically requeue to device.
         I $P(^IBE(350.9,1,6),U,24) D  G END:'$G(IBXTRACT)
         . N X S X=$O(^IBE(353,"B","IB REPORTS",0))
         . S ZTIO=$P($G(^IBE(353,+X,0)),U,2) Q:ZTIO=""
         . S IBDET=1,IBXTRACT=0,ZTDTH=$H,ZTRTN="IBTUBOA",ZTSAVE("IB*")=""
         . S ZTDESC="IB - Unbilled Amounts Report" D ^%ZTLOAD
         . S IBDET=0,IBXTRACT=1
         . K ZTDESC,ZTDTH,ZTRTN,ZTSAVE,ZTSK
         ;
STR      D ^IBTUBOA ; Start report.
         ;
END      K DIRUT,IBMCCF Q  ;JRA IB*2.0*608 Added IBMCCF
         ;
MSG      ; - Compile message.
         W !!,"NOTE: After this report is run, the Unbilled Amounts totals for"
         W !?6,"the month of "_$$DAT2^IBOUTL(IBTIMON)_" will be updated."
         Q
         ;
DT2(STR) ; - Select re-compile date (returns variable IBTIMON).
         ; Input: STR - String that describe the type of data that will be 
         ;        re-compiled: "Unbilled Amounts", "Average Bill Amounts", etc...
         ;
         ; This code is very the same code as is in DT2^IBTUBOU... that is
         ; a utility routine, so code was copied and altered to accommodate
         ; EOAM changes. 
         N DIRUT,DT0,DT1,DT2,Y
         ; - AUG 1993 is the first month on file with Unbilled Amounts data
         S DT0=2930800,DT1=$$DAT2^IBOUTL(DT0)
         I $E(DT,6,7)'>$E($$LDATE^IBJDE(DT),6,7) S DT2=DT
         I $E(DT,6,7)>$E($$LDATE^IBJDE(DT),6,7) S DT2=DT+100 I $E(DT2,4,5)=13 S DT2=DT+8900
         S DT2=$$M1^IBJDE(DT2,1),DIR("B")=$$DAT2^IBOUTL(DT2)
         S DIR(0)="DA^"_$E(DT0,1,5)_"00:"_DT2_":AE^K:$E(Y,6,7)'=""00"" X"
         S DIR("A")="Re-compile "_$G(STR)_" through MONTH/YEAR: "
         S DIR("?",1)="Enter a past month/year (ex. Oct 2000).",DIR("?",2)=""
         S DIR("?",3)="NOTE: The earliest month/year that can be entered is "_DT1_", and"
         S DIR("?")="      it is NOT possible to enter the current or a future month/year."
         D ^DIR K DIR I $D(DIRUT) S IBTIMON="^" G DT2Q
         I $E(Y,6,7)'="00"!($E(Y,4,7)="0000") W "  ??" G DT2
         S IBTIMON=Y
         ;
DT2Q     Q

*****   INDEX OF IBTUBO   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
>> %ZIS         DET+26*
   ARTIEN       DIVX+16~,DIVX+18*,DIVX+22*
   ARTYP        DIVX+16~,DIVX+17*,DIVX+18,DIVX+19*,DIVX+21
   DIC          DIV+11*,DIV+13!
   DIC("A"      DIV+11*,DIV+12*
   DIC(0        DIV+11*
   DIR          %+19!,%+36!,DIV+5!,DIVX+13!,DET+6!,DET+9!,DET+19!,DT2+18!
   DIR("?"      %+8*,%+9*,%+10*,%+11*,%+12*,%+13*,%+14*,%+15*,%+16*,%+17*,%+18*,%+29*,%+30*,%+31*,%+32*,%+33*,%+34*,%+35*,DIVX+7*
                DIVX+8*,DIVX+9*,DIVX+10*,DIVX+11*,DIVX+12*,DET+3*,DET+4*,DET+5*,DET+16*,DET+17*,DET+18*,DT2+15*,DT2+16*,DT2+17*
   DIR("A"      %+7*,%+28*,DIV+3*,DIVX+5*,DET+2*,DET+9*,DET+14*,DT2+14*
   DIR("B"      %+6*,%+27*,DIV+4*,DIVX+6*,DET+1*,DET+9*,DET+14*,DT2+12*
   DIR(0        %+6*,%+27*,DIV+2*,DIVX+4*,DET+1*,DET+9*,DET+15*,DT2+13*
>> DIROUT       DIV+6,DIVX+13
   DIRUT        %+19,%+36,DIV+6,DIVX+13,DET+6,DET+9,DET+13,END!,DT2+7~,DT2+18
   DT           %+2,DT2+10,DT2+11
   DT0          DT2+7~,DT2+9*,DT2+13
   DT1          DT2+7~,DT2+9*,DT2+16
   DT2          DT2+7~,DT2+10*,DT2+11*,DT2+12*,DT2+13
   ELIG         DIVX+16~,DIVX+23*,DIVX+25
   ELIGIEN      DIVX+16~,DIVX+26*
   IBBDT        %+1~,DIVX+30,RDATE+9*,RDATE+10*
   IBCOMP       %+1~,%+19*,%+24,RDATE+1
   IBDET        %+1~,DET+6*,QUE+1,DQ+6*,DQ+8*
   IBEDT        %+1~,RDATE+9*,RDATE+10*,RDATE+13
>> IBINMRA      DET+10*
   IBMCCF       DIVX+14*,DIVX+38,DIVX+45,DIVX+48,END!
   IBMCCF("ATYP" 
                DIVX+22*
   IBMCCF("ELIG" 
                DIVX+26*
   IBMCCF("RTYP" 
                DIVX+18*
   IBOPT        %+1~,DIVX+45
   IBOPT(1      DIVX+38*,DIVX+40*
   IBOPT(2      DIVX+41*
   IBOPT(3      DIVX+42*
   IBOPT(4      DIVX+43*
   IBPRT        %+1~,DIVX+33*,DIVX+45
   IBQUIT       %+1~,%+2*,DIV+10*,DIV+14*,DIV+15*,DIV+19
   IBSBD        %+1~,%+2*,%+37*,DET+13,DET+20*
   IBSEL        %+1~,DIVX+45*,DIVX+48*,DIVX+49*,RDATE+9*,RDATE+10*
   IBTIMON      %+1~,RDATE+1,RDATE+2,RDATE+8,RDATE+10,RDATE+13*,MSG+2,DT2+18*,DT2+20*
>> IBXTRACT     DQ+3,DQ+6*,DQ+8*
   IO           DET+28
   IO("Q"       DET+26,QUE+4!
>> POP          DET+26
   STR          DT2~,DT2+14
   U            DIV+16,RDATE+9,DQ+3,DQ+5
   X            DIV+14,DIVX+16~,DIVX+22*,DIVX+26*,RDATE+8~*,RDATE+9,DQ+4~*,DQ+5
   Y            %+19,%+37,DIV+7,DIV+15,DIV+16,DIVX+14,DET+6,DET+10,DET+20,DT2+7~,DT2+19,DT2+20
   ZTDESC       QUE+3*,DQ+7*,DQ+9!
   ZTDTH        DQ+6*,DQ+9!
>> ZTIO         QUE+1*,DQ+5*
   ZTRTN        QUE+2*,DQ+6*,DQ+9!
   ZTSAVE       DQ+9!
   ZTSAVE("IB*" QUE+2*,DQ+6*
   ZTSK         QUE+4!,DQ+9!

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399.3         DIVX+18
   ^IBE(350.9          DQ+3
   ^IBE(353            DQ+4,DQ+5
   ^TMP("DILIST"       DIVX+21!,DIVX+22,DIVX+25!,DIVX+26
   ^TMP($J             %+23!,DIV+12,DIV+16*,DIV+21

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   DET          RDATE+1
   DIV          DIV+21
   DIVX         %+37,DIV+7
   DT2          RDATE+2,DT2+19
   DT2Q         DT2+18
   END          %+19,%+36,DIV+19,DIVX+13,DIVX+30,DIVX+45,RDATE+1,DET+6,DET+9,DET+13,DET+26,QUE+5,DQ+3
   MSG          RDATE+11
   QUE          DET+6,DET+26
   RDATE        %+24
   STR          DET+28

External References
   ^%ZIS               DET+26
   HOME^%ZIS           QUE+5
   ^%ZTLOAD            QUE+4,DQ+7
   ^DIC                DIV+13
   FIND^DIC            DIVX+21,DIVX+25
   DT^DICRW            %+2
   ^DIR                %+19,%+36,DIV+5,DIVX+13,DET+6,DET+9,DET+19,DT2+18
   $$MLTP^IBJD         DIVX+45
   $$LDATE^IBJDE       RDATE+10,DT2+10,DT2+11
   $$M1^IBJDE          DT2+12
   $$M2^IBJDE          RDATE+8
   $$M3^IBJDE          RDATE+10
   $$DAT2^IBOUTL       MSG+2,DT2+9,DT2+12
   ^IBTUBOA            STR
   DT1^IBTUBOU         DIVX+30

*****   END   *****


IBTUBO3  * *  181 Lines,  7373 Bytes, Checksum: B45102914                                             Mar 20, 2019@15:10:13 page 29
              812 bytes in comments
IBTUBO3  ;ALB/RB - UNBILLED AMOUNTS - GENERATE UNBILLED REPORTS ;03 Aug 2004  9:12 AM
         ;;2.0;INTEGRATED BILLING;**123,159,192,155,277,516,547,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
REPORT   ; - Prepare report if requested, send summary bulletin.
         N IBDIV,IBN,IBPAG,IBQ,IBRUN,DFN,DTE,FL,PT,X0,X1
         S IBRUN=$$HTE^XLFDT($H,1)
         D BULL^IBTUBUL G:'IBDET REPRTQ
         ;
REPRT1   ;
         S (IBPAG,IBQ)=0
         ;I '$D(^TMP($J)) S X0="" D HDR,NIM D:'IBQ PAUSE G REPRTQ
         I '$O(^TMP($J,"IBTUB",0)) S X0="",IBDIV=999999 D HDR,NIM D:'IBQ PAUSE G REPRTQ
         I $G(IBSBD) D SUMPG
         S IBDIV=0
         I $D(^TMP($J,"IBTUB-DIV")) D  G REPRT1Q
         . F  S IBDIV=$O(^TMP($J,"IBTUB-DIV",IBDIV)) Q:'IBDIV  D REPRT2
         F  S IBDIV=$O(^TMP($J,"IBTUB",IBDIV)) Q:'IBDIV  D REPRT2
         ;
REPRT1Q  ;
         D:'IBQ PAUSE
         ;
REPRTQ   Q
         ;
SUMPG    ;IB*2.0*547/TAZ - Summary page to show which Division has blank pages for selected reports.
         N IBND
         S IBDIV=0
         F  S IBDIV=$O(^DG(40.8,IBDIV)) Q:'IBDIV  D
         . I $D(^TMP($J,"IBTUB-DIV")),'$D(^TMP($J,"IBTUB-DIV",IBDIV)) Q  ;Not a selected division
         . F X0=1,2,3 I IBSEL[X0 D  Q:IBQ
         .. S X1=$S(X0=2:"OPT",X0=3:"RX",1:"INPT")
         .. I '$D(^TMP($J,"IBTUB",IBDIV,X1)) S IBND(X0,IBDIV)=""
         I $D(IBND) D
         . S IBPAG=1 W !
         . W !,"Unbilled Amounts Report"
         . W ?60,"Run Date: ",IBRUN,?124,"Page ",$J(IBPAG,3)
         . W !,"No data for the following Divisions for the selected reports:"
         . F X0=1,2,3 I IBSEL[X0 D  Q:IBQ
         .. W !,$S(X0=2:"Outpatient:",X0=3:"Prescriptions:",1:"Inpatient:")
         .. S IBDIV=0  W !
         .. F  S IBDIV=$O(IBND(X0,IBDIV)) Q:'IBDIV  D  Q:IBQ
         ... I $Y>(IOSL-6) D HDR Q:IBQ  W !,$S(X0=2:"Outpatient:",X0=3:"Prescriptions:",1:"Inpatient:")," Cont'd",!
         ... W $$GET1^DIQ(40.8,IBDIV_",",.01),!
         .. W !
         Q
         ;
REPRT2   ;Print Detail lines
         F X0=1,2,3 I IBSEL[X0 D  Q:IBQ
         . S X1=$S(X0=2:"OPT",X0=3:"RX",1:"INPT")
         . I IBSBD,'$D(^TMP($J,"IBTUB",IBDIV,X1)) Q  ;IB*2.0*547/TAZ Suppress blank pages for Sort by Division
         . D HDR Q:IBQ  I '$D(^TMP($J,"IBTUB",IBDIV,X1)) D NIM Q
         . S PT="" F  S PT=$O(^TMP($J,"IBTUB",IBDIV,X1,PT)) Q:PT=""  D  Q:IBQ
         .. S DFN=+$P(PT,"@@",2) Q:'DFN
         .. S (DTE,FL)="" F  S DTE=$O(^TMP($J,"IBTUB",IBDIV,X1,PT,DTE)) Q:DTE=""  D  Q:IBQ
         ... S IBX="" F  S IBX=$O(^TMP($J,"IBTUB",IBDIV,X1,PT,DTE,IBX)) Q:IBX=""  D  Q:IBQ
         .... S IBN=^TMP($J,"IBTUB",IBDIV,X1,PT,DTE,IBX) D LINE Q:IBQ  I X1["OPT" D CPTS Q:IBQ
         Q
         ;
HDR      ; - Output header.
         N I,X,XTP,IBDIVHDR
         I $E(IOST,1,2)="C-",IBPAG D PAUSE G HDRQ:IBQ
         I '$G(IBPAG) W !
         I $E(IOST,1,2)="C-"!$G(IBPAG) W @IOF,*13
         S IBDIVHDR=""
         I IBDIV=999999 S IBDIVHDR=$S('IBSBD&$D(^TMP($J,"IBTUB-DIV")):"SELECTED",'$G(IBSBD):"ALL",1:"UNKNOWN")
         E  S IBDIVHDR=$$GET1^DIQ(40.8,IBDIV_",",.01)_" ("_$$GET1^DIQ(40.8,IBDIV_",",1)_")"
         S IBPAG=$G(IBPAG)+1
         W !,"Unbilled Amounts Report"
         W ?60,"Run Date: ",IBRUN,?124,"Page ",$J(IBPAG,3)
         S XTP=$S(X0=1:"INPATIENT",X0=2:"OUTPATIENT",X0=3:"PRESCRIPTIONS",1:"")
         I X0'=3 S XTP=XTP_" EPISODES"
         ;S X="ALL "_XTP_" FROM "  ;JRA;IB*2.0*608 ';'
         S X=$S(($G(IBMCCF)="M"&(X0=2)):"MCCF CLAIMS - ",($G(IBMCCF)="N"&(X0=2)):"NON-MCCF CLAIMS - ",($G(IBMCCF)="B"&(X0=2)):"MCCF 
          & NON-MCCF CLAIMS - ",1:"")  ;JRA;IB*2.0*608
         S X=X_"ALL "_XTP_" FROM "  ;JRA;IB*2.0*608
         S X=X_$$DTE(IBBDT)_" TO "_$$DTE(IBEDT\1)_" FOR DIVISION: "_IBDIVHDR
         I $G(IBCOMP) S X=X_" / DATA RECOMPILED/STORED FOR "_$$DAT2^IBOUTL(IBTIMON)
         S X=X_" / '*' AFTER THE PATIENT NAME = USUALLY BILLED MEANS TEST COPAYMENT"
         I X0=1 S X=X_" / 'H' AFTER THE ADMISSION DATE = PATIENT CURRENTLY HOSPITALIZED"
         I X0=3 S X=X_" / '$' AFTER THE ORIGINAL FILL DATE = ORIGINAL FILL DATE HAS BEEN BILLED"
         S X=X_" / 'CF' COLUMN = NUMBER OF CLAIMS ON FILE FOR THE EPISODE"
         I X0'=3 D
         . S X=X_" / 'I/P' COLUMN = 'I' - INSTITUTIONAL CLAIM MISSING,"  ;JRA IB*2.0*608 Fix misspelling 'INSTUTIONAL' => 'INSTITUTI
          ONAL'
         . S X=X_" 'P' - PROFESSIONAL CLAIM MISSING"
         . Q
         F I=1:1 W !,$E(X,1,132) S X=$E(X,133,999) Q:X=""
         ;
         I 'X0 W !,$TR($J(" ",IOM)," ","-"),! G HDRQ
         W !!?29,"Last Prim.  Claims" W:X0=3 ?52,"Fill",?123,"Original"
         W !,"Name",?29,"4SSN Elig.  Track.ID#"
         I X0=1 W ?52,"Admission CF Insurance Carrier(s)",?98,"I/P",?102,"MRA"
         I X0=2 W ?52,"Care Dt.  CF Insurance Carrier(s)",?98,"I/P",?102,"MRA",?106,"CPT     I. Rate   P. Rate"
         I X0=3 W ?52,"Date     CF Ins. Carrier(s)     MRA Drug Name        Physician",?123,"Fill Dt."
         W !,$TR($J(" ",IOM)," ","-"),!
         I $D(ZTQUEUED),$$S^%ZTLOAD D
         . W !!,"...Task stoped at user request"
         . S (IBQ,ZTSTOP)=1
         . Q
         ;
HDRQ     Q
         ;
CPTS     ; - Outpatient Only (CPTs and Rates)
         N CPT,IBN1
         I $O(^TMP($J,"IBTUB",IBDIV,X1,PT,DTE,IBX,""))="" W ?98,"I",?103,$S('$G(IBINMRA):"",$G(^TMP($J,X1_"_MRA",PT,DTE,IBX)):"M",1:
          "") W ! Q
         S CPT="" F  S CPT=$O(^TMP($J,"IBTUB",IBDIV,X1,PT,DTE,IBX,CPT)) Q:CPT=""  D  Q:IBQ
         . S IBN1=^TMP($J,"IBTUB",IBDIV,X1,PT,DTE,IBX,CPT)
         . I $Y>(IOSL-5) D HDR Q:IBQ  S FL=0 D LINE
         . W ?98,$P(IBN1,U,3),?103,$S('$G(IBINMRA):"",$G(^TMP($J,"IBTUB",IBDIV,X1_"_MRA",PT,DTE,IBX)):"M",1:""),?106,CPT,?113,$J(+IB
          N1,8,2)
         . W ?124,$J($P(IBN1,U,2),8,2),!
         Q
         ;
LINE     ; - Print detail line.
         I $Y>(IOSL-6) D HDR G:IBQ LINQ S FL=0
         I 'FL D
         . W $E($P(PT,"@@"),1,26) I $$BIL^DGMTUB(DFN,+DTE) W " *"
         . W ?29,$$SSN(DFN),?34,$E($$ELIG(DFN),1,5) S FL=1
         ;
         W ?39,$J(IBX,11)
         ; - Inpatient and Outpatient Only
         I X1'["RX" D
         . W ?52,$$DTE(+DTE) W:X1["INPT" $S($P(IBN,U,5):"H",1:"")
         . W ?62,$J($P(IBN,U),2),?65,$$INS(DFN,+DTE,34)
         . I X1["INPT" D
         .. I $P(IBN,U,2)'="" W ?98,$E($P(IBN,U,2),1,3),!
         .. I '$G(^TMP($J,"IBTUB",IBDIV,X1_"_MRA",PT,DTE,IBX))!'$G(IBINMRA) W:$P(IBN,U,2)="" ! Q
         .. W ?98,$E($P(^TMP($J,"IBTUB",IBDIV,X1_"_MRA",PT,DTE,IBX),U,2),1,3),?103,"M",!
         ;
         ; - Pharmacy Only
         I X1["RX" D  G LINQ
         . W ?52,$$DTE(+DTE),?61,$J($P(IBN,U),2),?64,$$INS(DFN,+DTE,19),?85,$S('$G(IBINMRA):"",$G(^TMP($J,X1_"_MRA",PT,DTE,IBX)):"M"
          ,1:"")
         . W ?88,$E($P(IBN,U,6),1,15),?105,$E($P(IBN,U,2),1,14)
         . W ?123,$$DTE($P(IBN,U,3)) W:$P(IBN,"^",5) "$" W !
         ;
LINQ     Q
         ;
SSN(DFN) ; - Return last 4 of patient's SSN.
         N SSN,VADM
         D DEM^VADPT S SSN=$P(VADM(2),"^"),SSN=$E(SSN,6,9) D KVA^VADPT
         Q SSN
         ;
ELIG(DFN) ; - Return patient's primary eligibility (1st 10 characters).
         N ELIG,VAEL
         D ELIG^VADPT S ELIG=$E($P(VAEL(1),"^",2),1,10) D KVAR^VADPT
         Q ELIG
         ;
DTE(D)   ; - Format date (MM/DD/YY or MM/YY).
         Q $S('$G(D):"",1:$E(D,4,5)_"/"_$S($E(D,6,7)'="00":$E(D,6,7)_"/",1:"")_$E(D,2,3))
         ;
INS(P,D,C) --
          ; - Return patient's insurance carrier(s).
         ;   Input: P=patient IEN, D=event date, C=Size of the Ins.Carrier column
         ;  Output: List of Providers
         ;
         I '$G(P)!('$G(D)) Q ""
         ;
         N INSC,INSL,INSN,LST,TMP,X
         ;
         S INSL="" D ALL^IBCNS1(P,"LST",1,D)
         S X=0 F  S X=$O(LST(X)) Q:'X  D
         . S INSC=+$G(LST(X,0)) Q:$D(TMP(INSC))!'INSC
         . S INSN=$P($G(^DIC(36,INSC,0)),U)
         . I $G(LST(0))>1 S INSN=$E(INSN,1,C\2)
         . S INSL=INSL_","_INSN
         . S TMP(INSC)=""
         ;
         S $E(INSL)=""
         I $L(INSL,",")>1,$L(INSL)>C D
         . S INSL=$E(INSL,1,C-3),$P(INSL,",",$L(INSL,","))="..."
         S INSL=$E(INSL,1,C)
         ;
         Q INSL
         ;
NIM      ; - Print 'no info' message.
         W !?3,"No information available for the period specified."
         Q
         ;
PAUSE    ; - Page break.
         I $E(IOST,1,2)'="C-" Q
         I IOSL>24 Q  ;User is creating a continuous document to a log file.
         N IBI,DIR,DIRUT,DUOUT,DTOUT,DIROUT,X,Y
         F IBI=$Y:1:(IOSL-3) W !
         S DIR(0)="E" D ^DIR S:$D(DIRUT)!($D(DUOUT)) IBQ=1
         Q

*****   INDEX OF IBTUBO3   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   C            INS~,INS+12,INS+17,INS+18,INS+19
   CPT          CPTS+1~,CPTS+3*,CPTS+4,CPTS+6
   D            DTE~,DTE+1,INS~,INS+4,INS+8
   DFN          REPORT+1~,REPRT2+6*,LINE+3,LINE+4,LINE+10,LINE+18,SSN~,ELIG~
   DIR          PAUSE+3~
   DIR(0        PAUSE+5*
   DIROUT       PAUSE+3~
   DIRUT        PAUSE+3~,PAUSE+5
   DTE          REPORT+1~,REPRT2+7*,REPRT2+8,REPRT2+9,CPTS+2,CPTS+3,CPTS+4,CPTS+6,LINE+3,LINE+9,LINE+10,LINE+13,LINE+14,LINE+18
   DTOUT        PAUSE+3~
   DUOUT        PAUSE+3~,PAUSE+5
   ELIG         ELIG+1~,ELIG+2*,ELIG+3
   FL           REPORT+1~,REPRT2+7*,CPTS+5*,LINE+1*,LINE+2,LINE+4*
   I            HDR+1~,HDR+26*
>> IBBDT        HDR+16
>> IBCOMP       HDR+17
>> IBDET        REPORT+3
   IBDIV        REPORT+1~,REPRT1+3*,REPRT1+5*,REPRT1+7*,REPRT1+8*,SUMPG+2*,SUMPG+3*,SUMPG+4,SUMPG+7,SUMPG+15*,SUMPG+16*,SUMPG+18
                REPRT2+3,REPRT2+4,REPRT2+5,REPRT2+7,REPRT2+8,REPRT2+9,HDR+6,HDR+7,CPTS+2,CPTS+3,CPTS+4,CPTS+6,LINE+13,LINE+14
   IBDIVHDR     HDR+1~,HDR+5*,HDR+6*,HDR+7*,HDR+16
>> IBEDT        HDR+16
   IBI          PAUSE+3~,PAUSE+4*
>> IBINMRA      CPTS+2,CPTS+6,LINE+13,LINE+18
>> IBMCCF       HDR+14
   IBN          REPORT+1~,REPRT2+9*,LINE+9,LINE+10,LINE+12,LINE+13,LINE+18,LINE+19,LINE+20
   IBN1         CPTS+1~,CPTS+4*,CPTS+6,CPTS+7
   IBND         SUMPG+1~,SUMPG+8
   IBND(        SUMPG+7*,SUMPG+16
   IBPAG        REPORT+1~,REPRT1+1*,SUMPG+9*,SUMPG+11,HDR+2,HDR+3,HDR+4,HDR+8*,HDR+10
   IBQ          REPORT+1~,REPRT1+1*,REPRT1+3,REPRT1Q+1,SUMPG+5,SUMPG+13,SUMPG+16,SUMPG+17,REPRT2+1,REPRT2+4,REPRT2+5,REPRT2+7
                REPRT2+8,REPRT2+9,HDR+2,HDR+37*,CPTS+3,CPTS+5,LINE+1,PAUSE+5*
   IBRUN        REPORT+1~,REPORT+2*,SUMPG+11,HDR+10
>> IBSBD        REPRT1+4,REPRT2+3,HDR+6
>> IBSEL        SUMPG+5,SUMPG+13,REPRT2+1
>> IBTIMON      HDR+17
>> IBX          REPRT2+8*,REPRT2+9,CPTS+2,CPTS+3,CPTS+4,CPTS+6,LINE+6,LINE+13,LINE+14,LINE+18
   INSC         INS+6~,INS+10*,INS+11,INS+14
   INSL         INS+6~,INS+8*,INS+13*,INS+16*,INS+17,INS+18*,INS+19*,INS+21
   INSN         INS+6~,INS+11*,INS+12*,INS+13
   IOF          HDR+4
   IOM          HDR+28,HDR+34
   IOSL         SUMPG+17,CPTS+5,LINE+1,PAUSE+2,PAUSE+4
   IOST         HDR+2,HDR+4,PAUSE+1
   LST          INS+6~
   LST(         INS+9,INS+10
   LST(0        INS+12
   P            INS~,INS+4,INS+8
   PT           REPORT+1~,REPRT2+5*,REPRT2+6,REPRT2+7,REPRT2+8,REPRT2+9,CPTS+2,CPTS+3,CPTS+4,CPTS+6,LINE+3,LINE+13,LINE+14,LINE+18
   SSN          SSN+1~,SSN+2*,SSN+3
   TMP          INS+6~
   TMP(         INS+10,INS+14*
   U            CPTS+6,CPTS+7,LINE+9,LINE+10,LINE+12,LINE+13,LINE+14,LINE+18,LINE+19,LINE+20,INS+11
   VADM         SSN+1~
   VADM(2       SSN+2
   VAEL         ELIG+1~
   VAEL(1       ELIG+2
   X            HDR+1~,HDR+14*,HDR+15*,HDR+16*,HDR+17*,HDR+18*,HDR+19*,HDR+20*,HDR+21*,HDR+23*,HDR+24*,HDR+26*,INS+6~,INS+9*,INS+10
                PAUSE+3~
   X0           REPORT+1~,REPRT1+3*,SUMPG+5*,SUMPG+6,SUMPG+7,SUMPG+13*,SUMPG+14,SUMPG+16,SUMPG+17,REPRT2+1*,REPRT2+2,HDR+11,HDR+12
                HDR+14,HDR+19,HDR+20,HDR+22,HDR+28,HDR+29,HDR+31,HDR+32,HDR+33
   X1           REPORT+1~,SUMPG+6*,SUMPG+7,REPRT2+2*,REPRT2+3,REPRT2+4,REPRT2+5,REPRT2+7,REPRT2+8,REPRT2+9,CPTS+2,CPTS+3,CPTS+4
                CPTS+6,LINE+8,LINE+9,LINE+11,LINE+13,LINE+14,LINE+17,LINE+18
   XTP          HDR+1~,HDR+11*,HDR+12*,HDR+15
   Y            PAUSE+3~
>> ZTQUEUED     HDR+35
>> ZTSTOP       HDR+37*

Global Variables  ( * Changed  ! Killed)
   ^DG(40.8            SUMPG+3
   ^DIC(36             INS+11
   ^TMP($J             REPRT1+3,REPRT1+6,REPRT1+7,REPRT1+8,SUMPG+4,SUMPG+7,REPRT2+3,REPRT2+4,REPRT2+5,REPRT2+7,REPRT2+8,REPRT2+9
                       HDR+6,CPTS+2,CPTS+3,CPTS+4,CPTS+6,LINE+13,LINE+14,LINE+18

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$DTE        HDR+16,LINE+9,LINE+18,LINE+20
   $$ELIG       LINE+4
   $$INS        LINE+10,LINE+18
   $$SSN        LINE+4
   CPTS         REPRT2+9
   HDR          REPRT1+3,SUMPG+17,REPRT2+4,CPTS+5,LINE+1
   HDRQ         HDR+2,HDR+28
   LINE         REPRT2+9,CPTS+5
   LINQ         LINE+1,LINE+17
   NIM          REPRT1+3,REPRT2+4
   PAUSE        REPRT1+3,REPRT1Q+1,HDR+2
   REPRT1Q      REPRT1+6
   REPRT2       REPRT1+7,REPRT1+8
   REPRTQ       REPORT+3,REPRT1+3
   SUMPG        REPRT1+4

External References
   $$S^%ZTLOAD         HDR+35
   $$BIL^DGMTUB        LINE+3
   $$GET1^DIQ          SUMPG+18,HDR+7
   ^DIR                PAUSE+5
   ALL^IBCNS1          INS+8
   $$DAT2^IBOUTL       HDR+17
   BULL^IBTUBUL        REPORT+3
   DEM^VADPT           SSN+2
   ELIG^VADPT          ELIG+2
   KVA^VADPT           SSN+2
   KVAR^VADPT          ELIG+2
   $$HTE^XLFDT         REPORT+2

*****   END   *****


IBTUBOA  * *  194 Lines,  9925 Bytes, Checksum: B56520031                                             Mar 20, 2019@15:10:13 page 30
              4877 bytes in comments
IBTUBOA  ;ALB/RB - UNBILLED AMOUNTS - GENERATE UNBILLED REPORTS ;01-JAN-01
         ;;2.0;INTEGRATED BILLING;**19,31,32,91,123,159,192,155,276,516,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
%        ; - Entry point from Taskman.
         ;
         ; IB*2.0*516 - Added ability to sort by Division, so added IBDIV as a
         ; subscript to most of the IBUNB entries.
         ;
         ;ARRAY VARIABLES:
         ;   IBAVG("BILLS-I")=number of inpatient institutional claims
         ;   IBAVG("BILLS-P")=number of inpatient professional claims
         ;   IBAVG("EPISD-I")=number of inpt. episodes for institutional claims
         ;   IBAVG("EPISD-P")=number of inpt. episodes for professional claims
         ;   IBAVG("$AMNT-I")=inpatient institutional amount billed
         ;   IBAVG("$AMNT-P")=inpatient professional amount billed
         ;
         ;   IBUNB("UNBILTL")=total unbilled amount
         ;   IBUNB("UNBILTL-MRA")=total MRA req amount
         ;
         ;   IBUNB(IBDIV,"ENCNTRS")=number of outpatient encounters missing claims
         ;   IBUNB(IBDIV,"EPISM-I")=number of inpatient episodes missing inst. claims
         ;   IBUNB(IBDIV,"EPISM-I-MRA")=number of MRA req inpat institutional claims
         ;   IBUNB(IBDIV,"EPISM-P")=number of inpatient episodes missing prof. claims
         ;   IBUNB(IBDIV,"EPISM-P-MRA")=number of MRA req inpat professional claims
         ;   IBUNB(IBDIV,"EPISM-A")=number of inpatient admissions missing claims
         ;                   (any type: Prof,Inst or both)
         ;   IBUNB(IBDIV,"EPISM-A-MRA")=number inpt MRA req admissions missing claims
         ;                   (any type: Prof,Inst or both)
         ;   IBUNB(IBDIV,"CPTMS-I")=number of CPT codes missing institutional claims
         ;   IBUNB(IBDIV,"CPTMS-I-MRA")=number of MRA req CPT codes missing inst claims
         ;   IBUNB(IBDIV,"CPTMS-P")=number of CPT codes missing professional claims
         ;   IBUNB(IBDIV,"CPTMS-P-MRA")=number of MRA req CPT codes missing prof claims
         ;   IBUNB(IBDIV,"PRESCRP")=number of unbilled prescriptions
         ;   IBUNB(IBDIV,"PRESCRP-MRA")=number of MRA req prescriptions
         ;   IBUNB(IBDIV,"UNBILIP")=unbilled inpatient amount
         ;   IBUNB(IBDIV,"UNBILIP-MRA")=MRA req inpatient amount
         ;   IBUNB(IBDIV,"UNBILOP")=unbilled outpatient amount
         ;   IBUNB(IBDIV,"UNBILOP-MRA")=MRA req outpatient amount
         ;   IBUNB(IBDIV,"UNBILRX")=unbilled prescription amount
         ;   IBUNB(IBDIV,"UNBILRX-MRA")=MRA req prescription amount
         ; 
         ;ARRAY VARIABLES FOR DM EXTRACT:
         ;   IB(1)=Number of inpatient episodes missing institutional claims
         ;   IB(2)=Amount of inpatient episodes missing institutional claims
         ;   IB(3)=Number of inpatient episodes missing professional claims
         ;   IB(4)=Amount of inpatient episodes missing professional claims
         ;   IB(5)=Number of all inpatient episodes missing claims
         ;   IB(6)=Amount of all inpatient episodes missing claims
         ;   IB(7)=Number of unbilled outpatient encounters prior to 9/1/99
         ;   IB(8)=Amount of unbilled outpatient encounters prior to 9/1/99
         ;   IB(9)=Number of procedures without an institutional charge
         ;   IB(10)=Amount of procedures without an institutional charge
         ;   IB(11)=Number of procedures without a professional charge
         ;   IB(12)=Amount of procedures without a professional charge
         ;   IB(13)=Number of all procedures without a charge
         ;   IB(14)=Number of encounters associated with all procedures without
         ;          a charge
         ;   IB(15)=Number of all encounters missing claims
         ;   IB(16)=Amount of all encounters missing claims
         ;   IB(17)=Number of unbilled prescriptions and refills
         ;   IB(18)=Amount of unbilled prescriptions and refills
         ;   IB(19)=Amount of all unbilled episodes of care
         ;
         N IB,IBAMTI,IBAMTP,IBIAV,IBIA,IBNODE,IBOE,IBPA,IBQUERY,IBRX,IBSAV,IBT
         N IBAMTIM,IBAMTPM,IBTYP,IBX,IBY,DFN,DGPM,I,J
         ;
         K ^TMP($J,"IBTUB-INPT"),^TMP($J,"IBTUB-OPT"),^TMP($J,"IBTUB-RX")
         K ^TMP($J,"IBTUB-INPT_MRA"),^TMP($J,"IBTUB-OPT_MRA"),^TMP($J,"IBTUB-RX_MRA")
         ;
         ; - Initialize DM extract variables, if necessary.
         I $G(IBXTRACT) D E^IBJDE(37,1) F IBX=1:1:19 S IB(IBX)=0
         ;
         ; - Initialize Unbilled Amounts variables.
         S (IBUNB("ENCNTRS"),IBUNB("PRESCRP"),IBUNB("PRESCRP-MRA"))=0
         F IBX="IP","OP","RX","TL" S IBUNB("UNBIL"_IBX)=0,IBUNB("UNBIL"_IBX_"-MRA")=0
         F IBX="I","P" S (IBUNB("EPISM-"_IBX),IBUNB("EPISM-"_IBX_"-MRA"),IBUNB("CPTMS-"_IBX),IBUNB("CPTMS-"_IBX_"-MRA"))=0
         S (IBUNB("EPISM-A"),IBUNB("EPISM-A-MRA"))=0
         ;
         ; - Retrieve the Rate Type code for Reimbursable Insurance
         S IBRT=$S($O(^DGCR(399.3,"B","REIMBURSABLE INS.",0)):$O(^(0)),1:8)
         ;
         ; - If Compile/Store - Checks if the Average Bill Amounts exists for
         ;   IBTIMON. If it does not, calls IBTUBAV to calculate/updated it.
         I $G(IBCOMP) D
         . I $P($G(^IBE(356.19,IBTIMON,1)),"^",14)'="" Q
         . ;
         . ; - DQ^IBTUBAV will kill the variables IBTIMON and IBCOMP - That's why
         . ;   they are being set again after this call.
         . S IBSAV=IBTIMON D DQ^IBTUBAV S IBTIMON=IBSAV,IBCOMP=1
         . Q
         ;
PROC     ; - Loops through all the entries in the Claims Tracking file for the
         ;   period selected and calculate the Unbilled Amounts
         N NVELIG  ;JRA;IB*2.0*608 Flag set to 1 if patient has non-veteran eligibility
         S IBDT=IBBDT-.1
         ;
         F  S IBDT=$O(^IBT(356,"D",IBDT)) Q:'IBDT!(IBDT>IBEDT)  D
         . S IBX=0 F  S IBX=$O(^IBT(356,"D",IBDT,IBX)) Q:'IBX  D
         . . S IBNODE=$G(^IBT(356,IBX,0)) Q:IBNODE=""
         . . I $P(IBNODE,U,12) Q  ; Tort-Feasor,Workman's Comp,No-fault Auto Acc.
         . . I $P(IBNODE,U,19) Q  ;  Reason not billable assigned.
         . . I '$P(IBNODE,U,20) Q  ; Inactive.
         . . S DFN=+$P(IBNODE,U,2)
         . . ;Non-veteran eligibility includes CHAMPVA & TRICARE which is non-MCCF so do not screen out
         . . ;I '$$PTCHK^IBTUBOU(DFN,IBNODE) Q  ; Has a non-veteran eligibility.  ;JRA;IB*2.0*608 ';'
         . . S NVELIG='$$PTCHK^IBTUBOU(DFN,IBNODE)  ;JRA;IB*2.0*608
         . . I '$$INSURED^IBCNS1(DFN,IBDT) Q  ;  Not insured during care.
         . . ;JRA;IB*2.0*608 No Inpatient for Non-MCCF
         . . ;I $P(IBNODE,U,5),IBSEL[1,$$COV^IBTUBOU(DFN,IBDT,1) D  Q  ;Inpatient  ;JRA;IB*2.0*608 ';'
         . . I 'NVELIG,$G(IBMCCF)'="N",$P(IBNODE,U,5),IBSEL[1,$$COV^IBTUBOU(DFN,IBDT,1) D  Q  ;Inpatient  ;JRA;IB*2.0*608
         . . . S DGPM=+$P(IBNODE,U,5) D INPT^IBTUBO2(DGPM)
         . . I $P(IBNODE,U,4),IBSEL[2,$$COV^IBTUBOU(DFN,IBDT,2) D  Q  ;Outpatient
         . . . S IBOE=+$P(IBNODE,U,4) I $$NCCL^IBTUBOU(IBOE) Q  ; Non-Count Clinic
         . . . ;JRA;IB*2.0*608 Check if Eligibility of Encounter, Appointment Type & Rate Type meet MCCF/Non-MCCF Criteria
         . . . I $G(IBMCCF)]"",(IBMCCF'="B") N OK S OK=1 D  Q:'OK  ;JRA;IB*2.0*608
         . . . . N CLAIM S CLAIM=+$P(IBNODE,U,11)
         . . . . ;If looking only for MCCF and there is a non-veteran eligibility, this entry is Non-MCCF so don't process
         . . . . I IBMCCF="M",'$$PTCHK^IBTUBOU(DFN,IBNODE) S OK=0 Q  ;Copied condition from above & modified
         . . . . I IBOE S OK=$$MCCFCKX^IBTUBOU(409.68,IBOE,.13,"ELIG")  ;Check Eligibilty of Encounter
         . . . . I IBOE,((OK'=1&(IBMCCF="N"))!(IBMCCF="M"&(OK))) S OK=$$MCCFCKX^IBTUBOU(409.68,IBOE,.1,"ATYP")  ;Check Appointment T
          ype
         . . . . I CLAIM,((OK'=1&(IBMCCF="N"))!(IBMCCF="M"&(OK))) S OK=$$MCCFCKX^IBTUBOU(399,CLAIM,.07,"RTYP")  ;Check Rate Type
         . . . D OPT^IBTUBO1(IBOE,.IBQUERY)
         . . Q:($G(IBMCCF)="N"!(NVELIG))  ;JRA;IB*2.0*608 Quit if Non-MCCF since only want Outpatient or quit if patient has non-vet
          eran eligibility
         . . I $P(IBNODE,U,8),IBSEL[3,$$COV^IBTUBOU(DFN,IBDT,3) D  Q  ;Prescription
         . . . N IBIFN,IBCSTAT S IBIFN=+$P(IBNODE,U,11)
         . . . I IBIFN S IBCSTAT=$$GET1^DIQ(399,IBIFN_",",.13,"I") Q:$S(IBCSTAT=0:1,IBCSTAT=1:0,IBCSTAT=2:1,IBCSTAT=3:1,IBCSTAT=4:1,
          IBCSTAT=5:1,IBCSTAT=7:0,1:1)  ;already billed (modified in T9)
         . . . S IBRX=+$P(IBNODE,U,8) D RX^IBTUBO2(IBRX)
         . . ;
         . . ; - Check CT entry event type to get unbilled amounts, if necessary.
         . . S IBTYP=$P($G(^IBE(356.6,+$P(IBNODE,U,18),0)),U,8)
         . . I IBTYP=1,IBSEL[1,$$COV^IBTUBOU(DFN,IBDT,1) D
         . . . D INPT^IBTUBO2(+$O(^DGPM("APTT1",DFN,IBDT,0)))
         . . I IBTYP=2,IBSEL[2,$$COV^IBTUBOU(DFN,IBDT,2) D
         . . . D OPT^IBTUBO1("",.IBQUERY)
         ;
         I $G(IBXTRACT) D XTRACT^IBTUBOU ; Load extract file, if necessary.
         ;
         ; MRD;IB*2.0*516 - Moved code that was here into the new
         ; procedure TOTAL, and tally most of the values up by Division.
         ;
         D TOTAL
         ;
         ; - If Compile/Store - update Unbilled Amounts data on file #356.19
         I $G(IBCOMP) D LD^IBTUBOU(3,IBTIMON)
         ;
PRT      ; - Print report(s).
         I $G(IBQUERY) D CLOSE^IBSDU(.IBQUERY)
         D REPORT^IBTUBO3
         ;
END      K ^TMP($J,"IBTUB-INPT"),^TMP($J,"IBTUB-OPT"),^TMP($J,"IBTUB-RX")
         K IBDT,IBRT,IBUNB
         I $D(ZTQUEUED) S ZTREQ="@" Q
         D ^%ZISC K IBTEMON,IBXTRACT,D,D0,DA,DIC,DIE
         Q
         ;
TOTAL    ; Determine grand total amounts.
         ;
         ; - Calculate the Amount Inpatient INST. & PROF. Unbilled Amounts,
         ;   based on average amounts of Billed Amounts
         ;
         S IBIAV=$$INPAVG^IBTUBOU(IBTIMON)
         ;
         S IBAMTI=$P(IBIAV,"^")*$G(IBUNB("EPISM-I")) ; Inst
         S IBAMTIM=$P(IBIAV,"^")*$G(IBUNB("EPISM-I-MRA")) ; Inst
         S IBAMTP=$P(IBIAV,"^",2)*$G(IBUNB("EPISM-P")) ; Prof
         S IBAMTPM=$P(IBIAV,"^",2)*$G(IBUNB("EPISM-P-MRA")) ; Prof
         ;
         S IBUNB("UNBILIP")=IBAMTI+IBAMTP
         S IBUNB("UNBILIP-MRA")=IBAMTIM+IBAMTPM
         ;
         ;S IBUNB("UNBILTL")=IBUNB("UNBILIP")
         ;S IBUNB("UNBILTL-MRA")=IBUNB("UNBILIP-MRA")
         ;
         ; - Calculate Unbilled Amounts Totals by Division
         ;
         S IBDIV=0
         F  S IBDIV=$O(IBUNB(IBDIV)) Q:'IBDIV  D
         . ;
         . S IBAMTI=$P(IBIAV,"^")*$G(IBUNB(IBDIV,"EPISM-I")) ; Inst
         . S IBAMTIM=$P(IBIAV,"^")*$G(IBUNB(IBDIV,"EPISM-I-MRA")) ; Inst
         . S IBAMTP=$P(IBIAV,"^",2)*$G(IBUNB(IBDIV,"EPISM-P")) ; Prof
         . S IBAMTPM=$P(IBIAV,"^",2)*$G(IBUNB(IBDIV,"EPISM-P-MRA")) ; Prof
         . ;
         . S IBUNB(IBDIV,"UNBILIP")=IBAMTI+IBAMTP
         . S IBUNB(IBDIV,"UNBILIP-MRA")=IBAMTIM+IBAMTPM
         . ;
         . S IBUNB("UNBILTL")=$G(IBUNB("UNBILTL"))+$G(IBUNB(IBDIV,"UNBILIP"))+$G(IBUNB(IBDIV,"UNBILOP"))+$G(IBUNB(IBDIV,"UNBILRX"))
         . S IBUNB("UNBILTL-MRA")=$G(IBUNB("UNBILTL-MRA"))+$G(IBUNB(IBDIV,"UNBILIP-MRA"))+$G(IBUNB(IBDIV,"UNBILOP-MRA"))+$G(IBUNB(IB
          DIV,"UNBILRX-MRA"))
         . ;
         . Q
         ;
         Q
         ;

*****   INDEX OF IBTUBOA   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   CLAIM        PROC+24~*,PROC+29
   D            END+3!
   D0           END+3!
   DA           END+3!
   DFN          %+61~,PROC+11*,PROC+14,PROC+15,PROC+18,PROC+20,PROC+26,PROC+32,PROC+39,PROC+40,PROC+41
   DGPM         %+61~,PROC+19*
   DIC          END+3!
   DIE          END+3!
   I            %+61~
   IB           %+60~
   IB(          %+67*
   IBAMTI       %+60~,TOTAL+7*,TOTAL+12,TOTAL+23*,TOTAL+28
   IBAMTIM      %+61~,TOTAL+8*,TOTAL+13,TOTAL+24*,TOTAL+29
   IBAMTP       %+60~,TOTAL+9*,TOTAL+12,TOTAL+25*,TOTAL+28
   IBAMTPM      %+61~,TOTAL+10*,TOTAL+13,TOTAL+26*,TOTAL+29
>> IBBDT        PROC+3
>> IBCOMP       %+80,%+85*,PROC+52
   IBCSTAT      PROC+33~,PROC+34*
>> IBDIV        TOTAL+20*,TOTAL+21*,TOTAL+23,TOTAL+24,TOTAL+25,TOTAL+26,TOTAL+28,TOTAL+29,TOTAL+31,TOTAL+32
   IBDT         PROC+3*,PROC+5*,PROC+6,PROC+15,PROC+18,PROC+20,PROC+32,PROC+39,PROC+40,PROC+41,END+1!
>> IBEDT        PROC+5
   IBIA         %+60~
   IBIAV        %+60~,TOTAL+5*,TOTAL+7,TOTAL+8,TOTAL+9,TOTAL+10,TOTAL+23,TOTAL+24,TOTAL+25,TOTAL+26
   IBIFN        PROC+33~*,PROC+34
>> IBMCCF       PROC+18,PROC+23,PROC+26,PROC+28,PROC+29,PROC+31
   IBNODE       %+60~,PROC+7*,PROC+8,PROC+9,PROC+10,PROC+11,PROC+14,PROC+18,PROC+19,PROC+20,PROC+21,PROC+24,PROC+26,PROC+32,PROC+33
                PROC+35,PROC+38
   IBOE         %+60~,PROC+21*,PROC+27,PROC+28,PROC+30
   IBPA         %+60~
   IBQUERY      %+60~,PROC+30,PROC+42,PRT+1
   IBRT         %+76*,END+1!
   IBRX         %+60~,PROC+35*
   IBSAV        %+60~,%+85*
>> IBSEL        PROC+18,PROC+20,PROC+32,PROC+39,PROC+41
   IBT          %+60~
   IBTEMON      END+3!
>> IBTIMON      %+81,%+85*,PROC+52,TOTAL+5
   IBTYP        %+61~,PROC+38*,PROC+39,PROC+41
   IBUNB        END+1!
   IBUNB(       TOTAL+21,TOTAL+23,TOTAL+24,TOTAL+25,TOTAL+26,TOTAL+28*,TOTAL+29*,TOTAL+31,TOTAL+32
   IBUNB("CPTMS-" 
                %+72*
   IBUNB("ENCNTRS" 
                %+70*
   IBUNB("EPISM-" 
                %+72*
   IBUNB("EPISM-A" 
                %+73*
   IBUNB("EPISM-A-MRA" 
                %+73*
   IBUNB("EPISM-I" 
                TOTAL+7
   IBUNB("EPISM-I-MRA" 
                TOTAL+8
   IBUNB("EPISM-P" 
                TOTAL+9
   IBUNB("EPISM-P-MRA" 
                TOTAL+10
   IBUNB("PRESCRP" 
                %+70*
   IBUNB("PRESCRP-MRA" 
                %+70*
   IBUNB("UNBIL" 
                %+71*
   IBUNB("UNBILIP" 
                TOTAL+12*
   IBUNB("UNBILIP-MRA" 
                TOTAL+13*
   IBUNB("UNBILTL" 
                TOTAL+31*
   IBUNB("UNBILTL-MRA" 
                TOTAL+32*
   IBX          %+61~,%+67*,%+71*,%+72*,PROC+6*,PROC+7
   IBXTRACT     %+67,PROC+44,END+3!
   IBY          %+61~
   J            %+61~
   NVELIG       PROC+2~,PROC+14*,PROC+18,PROC+31
   OK           PROC+23~*,PROC+26*,PROC+27*,PROC+28*,PROC+29*
   U            PROC+8,PROC+9,PROC+10,PROC+11,PROC+18,PROC+19,PROC+20,PROC+21,PROC+24,PROC+32,PROC+33,PROC+35,PROC+38
>> ZTQUEUED     END+2
>> ZTREQ        END+2*

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399.3         %+76
   ^DGPM("APTT1"       PROC+40
   ^IBE(356.19         %+81
   ^IBE(356.6          PROC+38
   ^IBT(356            PROC+5,PROC+6,PROC+7
   ^TMP($J             %+63!,%+64!,END!

Naked Globals
   ^(0          %+76

Cache Objects
   NONE

Marked Items
   NONE

Label References
   TOTAL        PROC+49

External References
   ^%ZISC              END+3
   $$GET1^DIQ          PROC+34
   $$INSURED^IBCNS1    PROC+15
   E^IBJDE             %+67
   CLOSE^IBSDU         PRT+1
   DQ^IBTUBAV          %+85
   OPT^IBTUBO1         PROC+30,PROC+42
   INPT^IBTUBO2        PROC+19,PROC+40
   RX^IBTUBO2          PROC+35
   REPORT^IBTUBO3      PRT+2
   $$COV^IBTUBOU       PROC+18,PROC+20,PROC+32,PROC+39,PROC+41
   $$INPAVG^IBTUBOU    TOTAL+5
   $$MCCFCKX^IBTUBOU   PROC+27,PROC+28,PROC+29
   $$NCCL^IBTUBOU      PROC+21
   $$PTCHK^IBTUBOU     PROC+14,PROC+26
   LD^IBTUBOU          PROC+52
   XTRACT^IBTUBOU      PROC+44

*****   END   *****


IBTUBOU  * *  198 Lines,  8473 Bytes, Checksum: B42355876                                             Mar 20, 2019@15:10:13 page 31
              2400 bytes in comments
IBTUBOU  ;ALB/RB - UNBILLED AMOUNTS (UTILITIES) ;03 Aug 2004  7:21 AM
         ;;2.0;INTEGRATED BILLING;**123,159,155,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
DT1      ; - Select date range (returns variables IBBDT and IBEDT).
         N DT0,DT1,DTOUT,DUOUT,Y
         S DT0=$O(^IBT(356,"D",""))\1,DT1=""
         I DT0 S DT1=$$DAT3^IBOUTL(DT0),DIR("B")=DT1
         S DIR(0)="DA^"_DT0_":"_DT_":AEX",DIR("A")="Start with DATE: "
         S DIR("?",1)="If you enter a start date here, the report will look for"
         S DIR("?",2)="events ON or AFTER this date. Press <CR> if you want to"
         S DIR("?",3)="skip this prompt and have the report look thru ALL events"
         S DIR("?",4)="or enter '^' to exit.",DIR("?",5)=""
         S DIR("?",6)="NOTE: The earliest date that can be entered is "_DT1_","
         S DIR("?",7)="      which is the date of the first event on file, and"
         S DIR("?")="      it is NOT possible to enter a future date."
         D ^DIR K DIR I $D(DTOUT)!($D(DUOUT)) S IBBDT="^" G DT1Q
         S IBBDT=Y,DT1=$$DAT3^IBOUTL(IBBDT)
         ;
         S DIR("B")=$$DAT3^IBOUTL(DT)
         S DIR(0)="DA^"_IBBDT_":"_DT_":AEX",DIR("A")="     Go to DATE: "
         S DIR("?",1)="If you enter a end date here, the report will look for"
         S DIR("?",2)="events from "_DT1_" to this date. Press <CR> to have"
         S DIR("?",3)="the report look at all events from "_DT1_" to today,"
         S DIR("?",4)="or enter '^' to exit."
         S DIR("?",5)=""
         S DIR("?",6)="NOTE: This date MUST NOT be earlier than "_DT1_" neither"
         S DIR("?")="      later than today."
         D ^DIR K DIR I $D(DTOUT)!($D(DUOUT)) S IBBDT="^" G DT1Q
         S IBEDT=Y+.9
         ;
DT1Q     Q
         ;
DT2(STR) ; - Select re-compile date (returns variable IBTIMON).
         ; Input: STR - String that describe the type of data that will be 
         ;        re-compiled: "Unbilled Amounts", "Average Bill Amounts", etc...
         ;
         N DIRUT,DT0,DT1,DT2,Y
         ; - AUG 1993 is the first month on file with Unbilled Amounts data
         S DT0=2930800,DT1=$$DAT2^IBOUTL(DT0)
         S DT2=$$M1^IBJDE(DT,1),DIR("B")=$$DAT2^IBOUTL(DT2)
         S DIR(0)="DA^"_$E(DT0,1,5)_"00:"_DT2_":AE^K:$E(Y,6,7)'=""00"" X"
         S DIR("A")="Re-compile "_$G(STR)_" through MONTH/YEAR: "
         S DIR("?",1)="Enter a past month/year (ex. Oct 2000).",DIR("?",2)=""
         S DIR("?",3)="NOTE: The earliest month/year that can be entered is "_DT1_", and"
         S DIR("?")="      it is NOT possible to enter the current or a future month/year."
         D ^DIR K DIR I $D(DIRUT) S IBTIMON="^" G DT2Q
         I $E(Y,6,7)'="00"!($E(Y,4,7)="0000") W "  ??" G DT2
         S IBTIMON=Y
         ;
DT2Q     Q
         ;
YR2(D)   ; - Return a date two years from date D.
         N X,X1,X2 S X="" G:'$G(D) YR2Q S X1=D,X2=-730 D C^%DTC
         ;
YR2Q     Q X
         ;
COV(P,E,T) --
          ; - Check if patient has insurance coverage.
         ;    Input: P=patient IEN, E=event date,
         ;           T=1-inpatient/2-outpatient/3-pharmacy
         ;   Output: Y=1-patient has coverage/0-no coverage or unknown
         N X,XY,Y S Y=0 G:'$G(P)!('$G(E))!('$G(T)) COVQ
         S X=$S(T=1:"INPATIENT",T=2:"OUTPATIENT",1:"PHARMACY")
         S Y=$$PTCOV^IBCNSU3(P,E,X,.XY)
         ;
COVQ     Q Y
         ;
PTCHK(DFN,IBNODE) --
          ; - See if patient has a non-veteran eligibility.
         ;    Input: DFN=patient IEN
         ;           IBNODE=zero node to CT entry
         ;   Output: IBFLAG=0-nonbillable, 1-billable 
         N IBFLAG S IBFLAG=0 G:'$G(DFN) PTCKQ
         I $D(^DPT(+DFN,.312)),$G(^("VET"))="Y" S IBFLAG=1
         I $P(IBNODE,U,4),$P($G(^DIC(8,+$$SCE^IBSDU(+$P(IBNODE,U,4),13),0)),U,5)="N" S IBFLAG=0
         ;
PTCKQ    Q IBFLAG
         ;
NCCL(ENC) ; - Check if Encounter is NON-COUNT CLINIC
         ;    Input: ENC = Pointer to the ENCOUNTER file (#409.69)
         ;   Output: NCCL= 1 - NON-COUNT CLINIC / 0 - NO NON-COUNT CLINIC
         N NCCL,HLOC
         S NCCL=0,HLOC=$$SCE^IBSDU(+ENC,4)
         I HLOC,$P($G(^SC(+HLOC,0)),"^",17)="Y" S NCCL=1
         ;
         Q NCCL
         ;
HOSP(ADM) ; Is the patient still hospitalized (not discharged)?
         ; Input: ADM  = Pointer to the PATIENT MOVEMENT file (#405)
         ;Output: HOSP = 1 - Hospitalized / 0 - Discharged
         ;
         N HOSP,X
         S HOSP=1,X=$G(^DGPM(+ADM,0)) I $P(X,"^",17) S HOSP=0
         ;
         Q HOSP
         ;
CKBIL(X,Y) --
          ; - Return valid claim data.
         ;    Input: X=IEN from file #399, Y=0-outpatient, 1-inpatient
         ;   Output: Z=rate^status^auth date^1-inst claim/2-prof claim^
         ;             event date (if Y=1), or null^req MRA date
         N X1,X2,Y1,Z S Z="" G:'$G(X) CKBLQ S:'$G(Y) Y=0
         S X1=$G(^DGCR(399,X,0)) G:X1="" CKBLQ
         I $G(DFN),$P(X1,U,2)'=DFN G CKBLQ ;              Invalid patient IEN.
         I '$G(IBRX),'Y,'$$NOTRX(X) G CKBLQ ;             Bill has RX rev codes.
         I $P(X1,U,5)<3,'Y G CKBLQ ;                      Not inpatient bill.
         I $P(X1,U,5)>2,Y G CKBLQ ;                       Not outpatient bill.
         I $P(X1,U,11)'="i" G CKBLQ ;                     Not an insurance bill.
         S X2=$P($G(^DGCR(399,X,"S")),U,10)
         I 'X2 G:$P(X1,U,13)'=2 CKBLQ ; No authorization date, not MRA req
         I $P(X1,U,13)<2!($P(X1,U,13)>5) G CKBLQ ; Status not auth, prin, trans.
         ;JRA;IB*2.0*608 Check if claim should be excluded based on MCCF/non-MCCF
         I $G(IBMCCF)]"",IBMCCF'="B",'$$MCCFCKX(399,X,.07,"RTYP") G CKBLQ  ;JRA;IB*2.0*608
         S Z=$P(X1,U,7)_U_$P(X1,U,13)_U_X2,Y1=$P($P(X1,U,3),".")
         S:$P(X1,U,13)=2 $P(Z,U,6)=$P($G(^DGCR(399,X,"S")),U,7)
         I $P(X1,U,27)=1!($P(X1,U,19)=3)!(Y1<2990901) S $P(Z,U,4)=1 G CKBL1
         I $P(X1,U,27)=2!($P(X1,U,19)=2) S $P(Z,U,4)=2
         I '$P(Z,U,4) S Z="" G CKBLQ ; Not institutional or professional bill.
CKBL1    I Y S $P(Z,U,5)=Y1
         ;
CKBLQ    Q Z
         ;
CKENC(IBOE,IBOE0,IBQUIT) --
          ; - Check outpatient encounters.
         N IBCK,IBZ,IBPB,IBZERR
         I $G(IBOE0)="" D GETGEN^SDOE(IBOE,"IBZ","IBZERR") S IBOE0=$G(IBZ(0))
         F IBZ=9,13,14 S IBCK(IBZ)=""
         I '$$BILLCK^IBAMTEDU(IBOE,IBOE0) S IBQUIT=1 ; Not billable.
         Q
         ;
SCAN(DFN,IBDT,IBQUERY) --
          ; - Look at all visits for a day.
         N IBNDT,IBVAL,IBFILTER,IBCBK
         S IBVAL("DFN")=DFN,IBVAL("BDT")=IBDT,IBVAL("EDT")=IBDT,IBFILTER=""
         S IBCBK="I $P(Y0,U,8)=3,Y0>IBDT S:'IBNDT IBNDT=+Y0 D:IBNDT=+Y0 CKENC^IBTUBOU(Y,Y0,.IBQUIT) S:$S('$G(IBQUIT):1,1:Y0>IBNDT) S
          DSTOP=1"
         S IBNDT=0 D SCAN^IBSDU("PATIENT/DATE",.IBVAL,IBFILTER,IBCBK,0,.IBQUERY)
         Q
         ;
SC(PTF)  ; - If patient is SC, are movements for SC care.
         ;    Input: PTF=PTF record
         ;   Output: IBM=1-all movements PTF, 0-one or more not flagged as SC
         N M,IBM S IBM=1,M=0 G:$G(^DGPT(+$G(PTF),0))="" SCQ
         F  S M=$O(^DGPT(PTF,"M",M)) Q:'M  D  Q:'IBM
         .I $P($G(^DGPT(PTF,"M",M,0)),U,18)'=1 S IBM=0
         ;
SCQ      Q IBM
         ;
LD(L,M)  ; - Load average/unbilled totals into file #356.19
         ;   Input: L=1-average (mon), 2-average (12m), 3-unbilled
         ;          M=file #356.19 IEN
         I '$G(L)!('$G(M)) G LDQ
         S DA=M,DIE="^IBE(356.19,"
         S DR=$S(L=3:"[IBT UNBILLED AMOUNTS]",L=2:"[IBT AVERAGE BILL AMOUNTS (12M)]",1:"[IBT AVERAGE BILL AMOUNTS (MON)]")
         D ^DIE K DA,DIE,DR
         ;
LDQ      Q
         ;
XTRACT   ; - Calculate remaining extract totals and load into file #351.71
         ; - Set IB with the average and total amounts and call E^IBJDE
         N X,AVGS
         S AVGS=$$INPAVG(IBTIMON)
         S IB(2)=$J(IB(1)*$P(AVGS,"^"),0,2)
         S IB(4)=$J(IB(3)*$P(AVGS,"^",2),0,2)
         S IB(6)=$J(IB(2)+IB(4),0,2)
         S IB(13)=IB(9)+IB(11),IB(15)=IB(7)+IB(14)
         F X=8,10,12,18 S IB(X)=$J(IB(X),0,2)
         S IB(16)=$J(IB(8)+IB(10)+IB(12),0,2)
         S IB(19)=$J(IB(6)+IB(16)+IB(18),0,2)
         D E^IBJDE(37,0)
         Q
         ;
INPAVG(IBYRMO) --
          ; - Calculate the Average Inpatient INST. & PROF. Billed Amounts
         ; Input: IBYRMO - YEAR/MONTH (YYYMM00) being calculated/updated
         ; Output: Avg.Inpt.Inst.Bill Amount ^ Avg.Inpt.Prof. Bill Amount
         ;
         N AVGI,AVGP,ND I '$G(IBYRMO) Q ""
         F  Q:$P($G(^IBE(356.19,IBYRMO,1)),"^",14)'=""!'IBYRMO  D
         . S IBYRMO=$O(^IBE(356.19,IBYRMO),-1)
         S (AVGI,AVGP)=0 I 'IBYRMO Q ""
         S ND=$G(^IBE(356.19,IBYRMO,1))
         I $P(ND,"^",9) S AVGI=$J($P(ND,"^",8)/$P(ND,"^",9),0,2)
         I $P(ND,"^",12) S AVGP=$J($P(ND,"^",11)/$P(ND,"^",12),0,2)
         Q (AVGI_"^"_AVGP)
         ;
NOTRX(BILL) --
          ; - Determine if bill contains outpatient visit (use this check
         ;   to make sure not just rx bill returns one if contains a revenue
         ;   code for outpatient visit or a zero if no outpatient visit code
         ;   on bill).
         N IBRX,RC,X
         S (IBRX,RC)=0 G:'$O(^DGCR(399,BILL,"OP",0)) NOTRXQ
         F  S RC=$O(^DGCR(399,BILL,"RC",RC)) Q:'RC  I $P($G(^DGCR(399.1,+$P($G(^DGCR(399,BILL,"RC",RC,0)),U,5),0)),U)'="PRESCRIPTION
          " S IBRX=1 Q
         ;
NOTRXQ   Q IBRX
         ;
MCCFCKX(FILE,IEN,FLD,ND) --
          ;JRA;IB*2.0*608 Check if Eligibility of Encounter, Appointment Type, and Rate Type meet MCCF/non-MCCF criteria 
         ;Input: FILE=
         Q:('$G(FILE)!('$G(IEN)!('$G(FLD)!($G(ND)="")))) -1
         N VAL
         S VAL=$$GET1^DIQ(FILE,IEN_",",FLD,"I") Q:'VAL -1
         I ((IBMCCF="N")&('$D(IBMCCF(ND,VAL))))!((IBMCCF="M")&($D(IBMCCF(ND,VAL)))) Q 0
         Q 1
         ;

*****   INDEX OF IBTUBOU   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   ADM          HOSP~,HOSP+5
   AVGI         INPAVG+4~,INPAVG+7*,INPAVG+9*,INPAVG+11
   AVGP         INPAVG+4~,INPAVG+7*,INPAVG+10*,INPAVG+11
   AVGS         XTRACT+2~,XTRACT+3*,XTRACT+4,XTRACT+5
   BILL         NOTRX~,NOTRX+5,NOTRX+6
   D            YR2~,YR2+1
   DA           LD+4*,LD+6!
   DFN          PTCHK~,PTCHK+4,PTCHK+5,CKBIL+6,SCAN~,SCAN+2
   DIE          LD+4*,LD+6!
   DIR          DT1+12!,DT1+24!,DT2+13!
   DIR("?"      DT1+5*,DT1+6*,DT1+7*,DT1+8*,DT1+9*,DT1+10*,DT1+11*,DT1+17*,DT1+18*,DT1+19*,DT1+20*,DT1+21*,DT1+22*,DT1+23*,DT2+10*
                DT2+11*,DT2+12*
   DIR("A"      DT1+4*,DT1+16*,DT2+9*
   DIR("B"      DT1+3*,DT1+15*,DT2+7*
   DIR(0        DT1+4*,DT1+16*,DT2+8*
   DIRUT        DT2+4~,DT2+13
   DR           LD+5*,LD+6!
   DT           DT1+4,DT1+15,DT1+16,DT2+7
   DT0          DT1+1~,DT1+2*,DT1+3,DT1+4,DT2+4~,DT2+6*,DT2+8
   DT1          DT1+1~,DT1+2*,DT1+3*,DT1+9,DT1+13*,DT1+18,DT1+19,DT1+22,DT2+4~,DT2+6*,DT2+11
   DT2          DT2+4~,DT2+7*,DT2+8
   DTOUT        DT1+1~,DT1+12,DT1+24
   DUOUT        DT1+1~,DT1+12,DT1+24
   E            COV~,COV+4,COV+6
   ENC          NCCL~,NCCL+4
   FILE         MCCFCKX~,MCCFCKX+2,MCCFCKX+4
   FLD          MCCFCKX~,MCCFCKX+2,MCCFCKX+4
   HLOC         NCCL+3~,NCCL+4*,NCCL+5
   HOSP         HOSP+4~,HOSP+5*,HOSP+7
>> IB(          XTRACT+8*
>> IB(1         XTRACT+4
>> IB(10        XTRACT+9
>> IB(11        XTRACT+7
>> IB(12        XTRACT+9
>> IB(13        XTRACT+7*
>> IB(14        XTRACT+7
>> IB(15        XTRACT+7*
>> IB(16        XTRACT+9*,XTRACT+10
>> IB(18        XTRACT+10
>> IB(19        XTRACT+10*
>> IB(2         XTRACT+4*,XTRACT+6
>> IB(3         XTRACT+5
>> IB(4         XTRACT+5*,XTRACT+6
>> IB(6         XTRACT+6*,XTRACT+10
>> IB(7         XTRACT+7
>> IB(8         XTRACT+9
>> IB(9         XTRACT+7
>> IBBDT        DT1+12*,DT1+13*,DT1+16,DT1+24*
   IBCBK        SCAN+1~,SCAN+3*,SCAN+4
   IBCK         CKENC+1~
   IBCK(        CKENC+3*
   IBDT         SCAN~,SCAN+2
>> IBEDT        DT1+25*
   IBFILTER     SCAN+1~,SCAN+2*,SCAN+4
   IBFLAG       PTCHK+4~*,PTCHK+5*,PTCHK+6*,PTCKQ
   IBM          SC+3~*,SC+4,SC+5*,SCQ
>> IBMCCF       CKBIL+15,MCCFCKX+5
>> IBMCCF(      MCCFCKX+5
   IBNDT        SCAN+1~,SCAN+4*
   IBNODE       PTCHK~,PTCHK+6
   IBOE         CKENC~,CKENC+2,CKENC+4
   IBOE0        CKENC~,CKENC+2*,CKENC+4
   IBPB         CKENC+1~
   IBQUERY      SCAN~,SCAN+4
   IBQUIT       CKENC~,CKENC+4*
   IBRX         CKBIL+7,NOTRX+4~,NOTRX+5*,NOTRX+6*,NOTRXQ
>> IBTIMON      DT2+13*,DT2+15*,XTRACT+3
   IBVAL        SCAN+1~,SCAN+4
   IBVAL("BDT"  SCAN+2*
   IBVAL("DFN"  SCAN+2*
   IBVAL("EDT"  SCAN+2*
   IBYRMO       INPAVG~,INPAVG+4,INPAVG+5,INPAVG+6*,INPAVG+7,INPAVG+8
   IBZ          CKENC+1~,CKENC+3*
   IBZ(0        CKENC+2
   IBZERR       CKENC+1~
   IEN          MCCFCKX~,MCCFCKX+2,MCCFCKX+4
   L            LD~,LD+3,LD+5
   M            SC+3~*,SC+4*,SC+5,LD~,LD+3,LD+4
   NCCL         NCCL+3~,NCCL+4*,NCCL+5*,NCCL+7
   ND           INPAVG+4~,INPAVG+8*,INPAVG+9,INPAVG+10,MCCFCKX~,MCCFCKX+2,MCCFCKX+5
   P            COV~,COV+4,COV+6
   PTF          SC~,SC+3,SC+4,SC+5
   RC           NOTRX+4~,NOTRX+5*,NOTRX+6*
   STR          DT2~,DT2+9
   T            COV~,COV+4,COV+5
   U            PTCHK+6,CKBIL+6,CKBIL+8,CKBIL+9,CKBIL+10,CKBIL+11,CKBIL+12,CKBIL+13,CKBIL+16,CKBIL+17,CKBIL+18,CKBIL+19,CKBIL+20
                CKBL1,SC+5,NOTRX+6
   VAL          MCCFCKX+3~,MCCFCKX+4*,MCCFCKX+5
   X            YR2+1~*,YR2Q,COV+4~,COV+5*,COV+6,HOSP+4~,HOSP+5*,CKBIL~,CKBIL+4,CKBIL+5,CKBIL+7,CKBIL+11,CKBIL+15,CKBIL+17
                XTRACT+2~,XTRACT+8*,NOTRX+4~
   X1           YR2+1~*,CKBIL+4~,CKBIL+5*,CKBIL+6,CKBIL+8,CKBIL+9,CKBIL+10,CKBIL+12,CKBIL+13,CKBIL+16,CKBIL+17,CKBIL+18,CKBIL+19
   X2           YR2+1~*,CKBIL+4~,CKBIL+11*,CKBIL+12,CKBIL+16
   XY           COV+4~,COV+6
   Y            DT1+1~,DT1+13,DT1+25,DT2+4~,DT2+14,DT2+15,COV+4~*,COV+6*,COVQ,CKBIL~,CKBIL+4*,CKBIL+7,CKBIL+8,CKBIL+9,CKBL1
   Y1           CKBIL+4~,CKBIL+16*,CKBIL+18,CKBL1
   Z            CKBIL+4~*,CKBIL+16*,CKBIL+17*,CKBIL+18*,CKBIL+19*,CKBIL+20*,CKBL1*,CKBLQ

Global Variables  ( * Changed  ! Killed)
   ^DGCR(399           CKBIL+5,CKBIL+11,CKBIL+17,NOTRX+5,NOTRX+6
   ^DGCR(399.1         NOTRX+6
   ^DGPM(              HOSP+5
   ^DGPT(              SC+3,SC+4,SC+5
   ^DIC(8              PTCHK+6
   ^DPT(               PTCHK+5
   ^IBE(356.19         INPAVG+5,INPAVG+6,INPAVG+8
   ^IBT(356            DT1+2
   ^SC(                NCCL+5

Naked Globals
   ^("VET"      PTCHK+5

Cache Objects
   NONE

Marked Items
   NONE

Label References
   $$INPAVG     XTRACT+3
   $$MCCFCKX    CKBIL+15
   $$NOTRX      CKBIL+7
   CKBL1        CKBIL+18
   CKBLQ        CKBIL+4,CKBIL+5,CKBIL+6,CKBIL+7,CKBIL+8,CKBIL+9,CKBIL+10,CKBIL+12,CKBIL+13,CKBIL+15,CKBIL+20
   COVQ         COV+4
   DT1Q         DT1+12,DT1+24
   DT2          DT2+14
   DT2Q         DT2+13
   LDQ          LD+3
   NOTRXQ       NOTRX+5
   PTCKQ        PTCHK+4
   SCQ          SC+3
   YR2Q         YR2+1

External References
   C^%DTC              YR2+1
   ^DIE                LD+6
   $$GET1^DIQ          MCCFCKX+4
   ^DIR                DT1+12,DT1+24,DT2+13
   $$BILLCK^IBAMTEDU   CKENC+4
   $$PTCOV^IBCNSU3     COV+6
   $$M1^IBJDE          DT2+7
   E^IBJDE             XTRACT+11
   $$DAT2^IBOUTL       DT2+6,DT2+7
   $$DAT3^IBOUTL       DT1+3,DT1+13,DT1+15
   $$SCE^IBSDU         PTCHK+6,NCCL+4
   SCAN^IBSDU          SCAN+4
   GETGEN^SDOE         CKENC+2

*****   END   *****


IBTUBUL  * *  187 Lines,  8220 Bytes, Checksum: B63490597                                             Mar 20, 2019@15:10:13 page 32
              539 bytes in comments
IBTUBUL  ;ALB/AAS - UNBILLED AMOUNTS ;29-SEP-94
         ;;2.0;INTEGRATED BILLING;**19,123,159,217,155,356,516,547,608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
         ; IB*2.0*516 - Added sort by Division.  Because some of the totals
         ; can be done by Division and some cannot, portions of the report
         ; were reorganized.
         ;
TEST     ; - Create and send test bulletin.
         N IBBDT,IBEDT,IBSEL,IBTEST
         S IBBDT=DT,IBEDT=DT,IBSEL="1,2,3",IBTEST=1
         D TESTV
         ;
BULL     ; - Create and send bulletin.
         ;
         I '$O(IBUNB(0)) Q  ; Quit out if no data.
         ;
         N I,IBDIV,IBGRP,IBT,IBTOTAL,IBX,IDX,X,XMDUZ,XMN,XMSUB,XMTEXT,XMY,XMZ
         S XMSUB="UNBILLED AMOUNTS SUMMARY REPORT"_$S($G(IBTEST):" (TEST)",1:"")
         ;
         D BULL1,SUMMARY
         ;
         I $G(IBSBD) S IBDIV=0 F  S IBDIV=$O(IBUNB(IBDIV)) Q:'IBDIV  D BULL2
         ;
         D BULL3,SEND
         ;
         Q
         ;
SUMMARY  ; Print Grand Totals.
         ;
         S IBT(IDX)="",IDX=IDX+1
         ;S IBT(IDX)="  GRAND TOTALS",IDX=IDX+1  ;JRA;IB*2.0*608 ';'
         S IBT(IDX)="  GRAND TOTALS"_$S($G(IBMCCF)="N":" FOR NON-MCCF CLAIMS",1:""),IDX=IDX+1  ;JRA;IB*2.0*608
         S IBT(IDX)="",IDX=IDX+1
         ;
         I IBSEL[1 D
         . S X=$$INPAVG^IBTUBOU(IBTIMON)
         . S IBT(IDX+1)="    Inpatient Care:"
         . S IBT(IDX+2)="      Number of Unbilled Inpatient Admissions : "_$J(+$G(IBUNB("EPISM-A")),11)
         . S IBT(IDX+3)="      Number of MRA Unbilled Inpt Admissions  : "_$J(+$G(IBUNB("EPISM-A-MRA")),11)
         . S IBT(IDX+4)="      Number of Inpt. Institutional Cases     : "_$J(+$G(IBUNB("EPISM-I")),11)
         . S IBT(IDX+5)="      Average Inpt. Institutional Bill Amount : "_$J($P(X,"^"),11,2)
         . S IBT(IDX+6)="      Number of Inpt. Professional Cases      : "_$J(+$G(IBUNB("EPISM-P")),11)
         . S IBT(IDX+7)="      Average Inpt. Professional Bill Amount  : "_$J($P(X,"^",2),11,2)
         . S IBT(IDX+8)="      Total Unbilled Inpatient Care           : "_$J($G(IBUNB("UNBILIP")),11,2)
         . S IBT(IDX+9)="      Total MRA Unbilled Inpatient Care       : "_$J($G(IBUNB("UNBILIP-MRA")),11,2)
         . S IBT(IDX+10)="",IDX=IDX+10
         . Q
         ;
         I IBSEL[2 D
         . ;S IBT(IDX+1)="    Outpatient Care:"  ;JRA;IB*2.0*608 ';'
         . S IBT(IDX+1)="    "_$S($G(IBMCCF)="M":"MCCF Claims - ",$G(IBMCCF)="N":"Non-MCCF Claims - ",1:"MCCF & Non-MCCF Claims - ")
          _"Outpatient Care:"  ;JRA;IB*2.0*608
         . S IBT(IDX+2)="      Number of Unbilled Outpatient Cases     : "_$J(+$G(IBUNB("ENCNTRS")),11)
         . S IBT(IDX+3)="      Number of Unbilled CPT Codes            : "_$J(+$G(IBUNB("CPTMS")),11)
         . S IBT(IDX+4)="      Number of MRA Unbilled CPT Codes        : "_$J(+$G(IBUNB("CPTMS-MRA")),11)
         . S IBT(IDX+5)="      Total Unbilled Outpatient Care          : "_$J($G(IBUNB("UNBILOP")),11,2)
         . S IBT(IDX+6)="      Total MRA Unbilled Outpatient Care      : "_$J($G(IBUNB("UNBILOP-MRA")),11,2)
         . S IBT(IDX+7)="",IDX=IDX+7
         . Q
         ;
         I IBSEL[3 D
         . S IBT(IDX+1)="    Prescriptions:"
         . S IBT(IDX+2)="      Number of Unbilled Prescriptions        : "_$J(+$G(IBUNB("PRESCRP")),11)
         . S IBT(IDX+3)="      Number of MRA Unbilled Prescriptions    : "_$J(+$G(IBUNB("PRESCRP-MRA")),11)
         . S IBT(IDX+4)="      Total Unbilled Prescriptions            : "_$J($G(IBUNB("UNBILRX")),11,2)
         . S IBT(IDX+5)="      Total MRA Unbilled Prescriptions        : "_$J($G(IBUNB("UNBILRX-MRA")),11,2)
         . S IBT(IDX+6)="",IDX=IDX+6
         . Q
         ;
         Q
         ;
BULL1    ; Header for entire report.
         ;
         N IBDIV
         S IDX=1
         S IBX=$P($$SITE^VASITE,U,2,3)
         S IBT(IDX)="SUMMARY UNBILLED AMOUNTS FOR "
         I '$D(^TMP($J,"IBTUB-DIV")) S IBT(IDX)=IBT(IDX)_$P(IBX,U)_" ("_$P(IBX,U,2)_").",IDX=IDX+1
         I $D(^TMP($J,"IBTUB-DIV")) D
         . S IBT(IDX)=IBT(IDX)_"SELECTED DIVISIONS:",IDX=IDX+1
         . S IBDIV="" F  S IBDIV=$O(^TMP($J,"IBTUB-DIV",IBDIV)) Q:IBDIV=""  D
         .. S IBT(IDX)="   "_$$GET1^DIQ(40.8,IBDIV_",",.01)_" ("_$$GET1^DIQ(40.8,IBDIV_",",1)_")",IDX=IDX+1
         S IBT(IDX)="PERIOD: FROM "_$$DAT1^IBOUTL(IBBDT)_" TO "_$$DAT1^IBOUTL(IBEDT),IDX=IDX+1
         ;
         I $G(IBDET) S IBT(IDX)="DETAILED REPORT PRINTED TO '"_IO_"'",IDX=IDX+1
         I $G(IBCOMP) S IBT(IDX)="UNBILLED AMOUNTS FIGURES STORED FOR "_$$DAT2^IBOUTL(IBTIMON),IDX=IDX+1
         ;
         Q
         ;
BULL2    ; Totals for one Division.
         ;
         I IBDIV=999999 S IBDIVHDR="UNKNOWN"
         E  S IBDIVHDR=$$GET1^DIQ(40.8,IBDIV_",",.01)_" ("_$$GET1^DIQ(40.8,IBDIV_",",1)_")"
         S IBT(IDX)="",IDX=IDX+1
         S IBT(IDX)="  DIVISION: "_IBDIVHDR,IDX=IDX+1
         S IBT(IDX)="",IDX=IDX+1
         ;
         I $G(IBTEST) S IBT(IDX)="  *** TEST DATA, TEST DATA ***",IDX=IDX+1
         ;
         I IBSEL[1 D
         . S X=$$INPAVG^IBTUBOU(IBTIMON)
         . S IBT(IDX+1)="    Inpatient Care:"
         . S IBT(IDX+2)="      Number of Unbilled Inpatient Admissions : "_$J(+$G(IBUNB(IBDIV,"EPISM-A")),11)
         . S IBT(IDX+3)="      Number of MRA Unbilled Inpt Admissions  : "_$J(+$G(IBUNB(IBDIV,"EPISM-A-MRA")),11)
         . S IBT(IDX+4)="      Number of Inpt. Institutional Cases     : "_$J(+$G(IBUNB(IBDIV,"EPISM-I")),11)
         . S IBT(IDX+5)="      Average Inpt. Institutional Bill Amount : "_$J($P(X,"^"),11,2)
         . S IBT(IDX+6)="      Number of Inpt. Professional Cases      : "_$J(+$G(IBUNB(IBDIV,"EPISM-P")),11)
         . S IBT(IDX+7)="      Average Inpt. Professional Bill Amount  : "_$J($P(X,"^",2),11,2)
         . S IBT(IDX+8)="      Total Unbilled Inpatient Care           : "_$J($G(IBUNB(IBDIV,"UNBILIP")),11,2)
         . S IBT(IDX+9)="      Total MRA Unbilled Inpatient Care       : "_$J($G(IBUNB(IBDIV,"UNBILIP-MRA")),11,2)
         . S IBT(IDX+10)="",IDX=IDX+10
         . Q
         ;
         I IBSEL[2 D
         . S IBT(IDX+1)="    Outpatient Care:"
         . S IBT(IDX+2)="      Number of Unbilled Outpatient Cases     : "_$J(+$G(IBUNB(IBDIV,"ENCNTRS")),11)
         . S IBT(IDX+3)="      Number of Unbilled CPT Codes            : "_$J(+$G(IBUNB(IBDIV,"CPTMS-I"))+$G(IBUNB(IBDIV,"CPTMS-P"))
          ,11)
         . S IBT(IDX+4)="      Number of MRA Unbilled CPT Codes        : "_$J(+$G(IBUNB(IBDIV,"CPTMS-I-MRA"))+$G(IBUNB(IBDIV,"CPTMS-
          P-MRA")),11)
         . S IBT(IDX+5)="      Total Unbilled Outpatient Care          : "_$J($G(IBUNB(IBDIV,"UNBILOP")),11,2)
         . S IBT(IDX+6)="      Total MRA Unbilled Outpatient Care      : "_$J($G(IBUNB(IBDIV,"UNBILOP-MRA")),11,2)
         . S IBT(IDX+7)="",IDX=IDX+7
         . Q
         ;
         I IBSEL[3 D
         . S IBT(IDX+1)="    Prescriptions:"
         . S IBT(IDX+2)="      Number of Unbilled Prescriptions        : "_$J(+$G(IBUNB(IBDIV,"PRESCRP")),11)
         . S IBT(IDX+3)="      Number of MRA Unbilled Prescriptions    : "_$J(+$G(IBUNB(IBDIV,"PRESCRP-MRA")),11)
         . S IBT(IDX+4)="      Total Unbilled Prescriptions            : "_$J($G(IBUNB(IBDIV,"UNBILRX")),11,2)
         . S IBT(IDX+5)="      Total MRA Unbilled Prescriptions        : "_$J($G(IBUNB(IBDIV,"UNBILRX-MRA")),11,2)
         . S IBT(IDX+6)="",IDX=IDX+6
         . Q
         ;
         Q
         ;
BULL3    ; concluding notes.
         ;
         I IBSEL="1,2,3" D
         . S IBT(IDX+1)="    Total Unbilled Amount (all care)          : "_$J($G(IBUNB("UNBILTL")),11,2)
         . S IBT(IDX+2)="    Total MRA Unbilled Amount (all care)      : "_$J($G(IBUNB("UNBILTL-MRA")),11,2)
         . S IDX(IDX+3)="",IDX=IDX+3
         . Q
         ;
         S IBT(IDX+1)="",IDX=IDX+1
         ;
         I IBSEL[1 D
         . S IBT(IDX+1)="Note:  Average bill Amount is based on Bills Authorized during the 12"
         . S IBT(IDX+2)="       months preceding the month of this report."
         . S IDX=IDX+2
         . Q
         ;
         S IBT(IDX+1)="Note:  Number of cases is insured cases in Claims Tracking that are"
         S IBT(IDX+2)="       not billed (or bill not authorized/req MRA) but appear to be billable."
         ;
         Q
         ;
SEND     ; - Send bulletin.
         K XMY
         S XMDUZ="INTEGRATED BILLING PACKAGE",XMTEXT="IBT("
         S XMN=0,IBGRP=$P($G(^XMB(3.8,+$P($G(^IBE(350.9,1,6)),"^",25),0)),"^")
         I $G(IBCOMP),IBGRP]"" S XMY("G."_IBGRP_"@"_^XMB("NETNAME"))=""
         I '$G(IBCOMP) S XMY(DUZ)=""
         D ^XMD
         Q
         ;
TESTV    ; - Set up test variables.
         S IBTIMON=9999999
         S IBUNB(999999,"CPTMS-I")=11111
         S IBUNB(999999,"CPTMS-I-MRA")=22222
         S IBUNB(999999,"CPTMS-P")=0
         S IBUNB(999999,"CPTMS-P-MRA")=0
         S IBUNB(999999,"ENCNTRS")=11111
         S IBUNB(999999,"EPISM-A")=11111
         S IBUNB(999999,"EPISM-A-MRA")=22222
         S IBUNB(999999,"EPISM-I")=11111
         S IBUNB(999999,"EPISM-P")=0
         S IBUNB(999999,"PRESCRP")=11111
         S IBUNB(999999,"PRESCRP-MRA")=22222
         S IBUNB(999999,"UNBILIP")=99999.99
         S IBUNB(999999,"UNBILIP-MRA")=77777.77
         S IBUNB(999999,"UNBILOP")=99999.99
         S IBUNB(999999,"UNBILOP-MRA")=77777.77
         S IBUNB(999999,"UNBILRX")=11111
         S IBUNB(999999,"UNBILRX-MRA")=22222
         ;
         S IBUNB("UNBILTL")=99999.99
         S IBUNB("UNBILTL-MRA")=77777.77
         Q

*****   INDEX OF IBTUBUL   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   DT           TEST+2
   DUZ          SEND+5
   I            BULL+4~
   IBBDT        TEST+1~,TEST+2*,BULL1+11
>> IBCOMP       BULL1+14,SEND+4,SEND+5
>> IBDET        BULL1+13
   IBDIV        BULL+4~,BULL+9*,BULL1+2~,BULL1+9*,BULL1+10,BULL2+2,BULL2+3,BULL2+13,BULL2+14,BULL2+15,BULL2+17,BULL2+19,BULL2+20
                BULL2+26,BULL2+27,BULL2+28,BULL2+29,BULL2+30,BULL2+36,BULL2+37,BULL2+38,BULL2+39
>> IBDIVHDR     BULL2+2*,BULL2+3*,BULL2+5
   IBEDT        TEST+1~,TEST+2*,BULL1+11
   IBGRP        BULL+4~,SEND+3*,SEND+4
>> IBMCCF       SUMMARY+4,SUMMARY+23
>> IBSBD        BULL+9
   IBSEL        TEST+1~,TEST+2*,SUMMARY+7,SUMMARY+21,SUMMARY+32,BULL2+10,BULL2+24,BULL2+34,BULL3+2,BULL3+10
   IBT          BULL+4~
   IBT(         SUMMARY+2*,SUMMARY+4*,SUMMARY+5*,SUMMARY+9*,SUMMARY+10*,SUMMARY+11*,SUMMARY+12*,SUMMARY+13*,SUMMARY+14*,SUMMARY+15*
                SUMMARY+16*,SUMMARY+17*,SUMMARY+18*,SUMMARY+23*,SUMMARY+24*,SUMMARY+25*,SUMMARY+26*,SUMMARY+27*,SUMMARY+28*
                SUMMARY+29*
                SUMMARY+33*,SUMMARY+34*,SUMMARY+35*,SUMMARY+36*,SUMMARY+37*,SUMMARY+38*,BULL1+5*,BULL1+6*,BULL1+8*,BULL1+10*
                BULL1+11*,BULL1+13*,BULL1+14*,BULL2+4*,BULL2+5*,BULL2+6*,BULL2+8*,BULL2+12*,BULL2+13*,BULL2+14*,BULL2+15*,BULL2+16*
                BULL2+17*
                BULL2+18*,BULL2+19*,BULL2+20*,BULL2+21*,BULL2+25*,BULL2+26*,BULL2+27*,BULL2+28*,BULL2+29*,BULL2+30*,BULL2+31*
                BULL2+35*,BULL2+36*,BULL2+37*,BULL2+38*,BULL2+39*,BULL2+40*,BULL3+3*,BULL3+4*,BULL3+8*,BULL3+11*,BULL3+12*
                BULL3+16*,BULL3+17*
   IBTEST       TEST+1~,TEST+2*,BULL+5,BULL2+8
>> IBTIMON      SUMMARY+8,BULL1+14,BULL2+11,TESTV+1*
   IBTOTAL      BULL+4~
>> IBUNB(       BULL+9,BULL2+13,BULL2+14,BULL2+15,BULL2+17,BULL2+19,BULL2+20,BULL2+26,BULL2+27,BULL2+28,BULL2+29,BULL2+30,BULL2+36
                BULL2+37,BULL2+38,BULL2+39
>> IBUNB("CPTMS" 
                SUMMARY+25
>> IBUNB("CPTMS-MRA" 
                SUMMARY+26
>> IBUNB("ENCNTRS" 
                SUMMARY+24
>> IBUNB("EPISM-A" 
                SUMMARY+10
>> IBUNB("EPISM-A-MRA" 
                SUMMARY+11
>> IBUNB("EPISM-I" 
                SUMMARY+12
>> IBUNB("EPISM-P" 
                SUMMARY+14
>> IBUNB("PRESCRP" 
                SUMMARY+34
>> IBUNB("PRESCRP-MRA" 
                SUMMARY+35
>> IBUNB("UNBILIP" 
                SUMMARY+16
>> IBUNB("UNBILIP-MRA" 
                SUMMARY+17
>> IBUNB("UNBILOP" 
                SUMMARY+27
>> IBUNB("UNBILOP-MRA" 
                SUMMARY+28
>> IBUNB("UNBILRX" 
                SUMMARY+36
>> IBUNB("UNBILRX-MRA" 
                SUMMARY+37
>> IBUNB("UNBILTL" 
                BULL3+3,TESTV+20*
>> IBUNB("UNBILTL-MRA" 
                BULL3+4,TESTV+21*
>> IBUNB(0      BULL+2
>> IBUNB(999999 TESTV+2*,TESTV+3*,TESTV+4*,TESTV+5*,TESTV+6*,TESTV+7*,TESTV+8*,TESTV+9*,TESTV+10*,TESTV+11*,TESTV+12*,TESTV+13*
                TESTV+14*,TESTV+15*,TESTV+16*,TESTV+17*,TESTV+18*
   IBX          BULL+4~,BULL1+4*,BULL1+6
   IDX          BULL+4~,SUMMARY+2*,SUMMARY+4*,SUMMARY+5*,SUMMARY+9,SUMMARY+10,SUMMARY+11,SUMMARY+12,SUMMARY+13,SUMMARY+14
                SUMMARY+15,SUMMARY+16,SUMMARY+17,SUMMARY+18*,SUMMARY+23,SUMMARY+24,SUMMARY+25,SUMMARY+26,SUMMARY+27,SUMMARY+28
                SUMMARY+29*,SUMMARY+33
                SUMMARY+34,SUMMARY+35,SUMMARY+36,SUMMARY+37,SUMMARY+38*,BULL1+3*,BULL1+5,BULL1+6*,BULL1+8*,BULL1+10*,BULL1+11*
                BULL1+13*,BULL1+14*,BULL2+4*,BULL2+5*,BULL2+6*,BULL2+8*,BULL2+12,BULL2+13,BULL2+14,BULL2+15,BULL2+16,BULL2+17
                BULL2+18,BULL2+19
                BULL2+20,BULL2+21*,BULL2+25,BULL2+26,BULL2+27,BULL2+28,BULL2+29,BULL2+30,BULL2+31*,BULL2+35,BULL2+36,BULL2+37
                BULL2+38,BULL2+39,BULL2+40*,BULL3+3,BULL3+4,BULL3+5*,BULL3+8*,BULL3+11,BULL3+12,BULL3+13*,BULL3+16,BULL3+17
   IDX(         BULL3+5*
   IO           BULL1+13
   U            BULL1+4,BULL1+6
   X            BULL+4~,SUMMARY+8*,SUMMARY+13,SUMMARY+15,BULL2+11*,BULL2+16,BULL2+18
   XMDUZ        BULL+4~,SEND+2*
   XMN          BULL+4~,SEND+3*
   XMSUB        BULL+4~,BULL+5*
   XMTEXT       BULL+4~,SEND+2*
   XMY          BULL+4~,SEND+1!
   XMY(         SEND+5*
   XMY("G."     SEND+4*
   XMZ          BULL+4~

Global Variables  ( * Changed  ! Killed)
   ^IBE(350.9          SEND+3
   ^TMP($J             BULL1+6,BULL1+7,BULL1+9
   ^XMB("NETNAME"      SEND+4
   ^XMB(3.8            SEND+3

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   BULL1        BULL+7
   BULL2        BULL+9
   BULL3        BULL+11
   SEND         BULL+11
   SUMMARY      BULL+7
   TESTV        TEST+3

External References
   $$GET1^DIQ          BULL1+10,BULL2+3
   $$DAT1^IBOUTL       BULL1+11
   $$DAT2^IBOUTL       BULL1+14
   $$INPAVG^IBTUBOU    SUMMARY+8,BULL2+11
   $$SITE^VASITE       BULL1+4
   ^XMD                SEND+6

*****   END   *****


IBY608PO * *  117 Lines,  5323 Bytes, Checksum: B25506190                                             Mar 20, 2019@15:10:13 page 33
              866 bytes in comments
IBY608PO ;ALB/KDM - POST-INSTALL FOR IB*2.0*608 ;13-DEC-2017
         ;;2.0;INTEGRATED BILLING;**608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
         ;KDM 12/2017 US1909 
         ; run report of all insurance companies that have the current setting for Transmit Electronically set to zero- which is NO
         ; send email of report to eBiz rapid response group
         N IBA,RNAME
         S RNAME="IBY608PO"
         K ^TMP(RNAME,$J)
         S IBA(2)="IB*2*608 Post-Install...",(IBA(1),IBA(3))=" " D MES^XPDUTL(.IBA) K IBA
         D MES^XPDUTL(">> Running Insurance Company EDI Parameter Report...please stand by....")
         D RPT
         D MES^XPDUTL(">> Report Completed.")
         D CMNCPT
         D:$$PROD^XUPROD(1) EMAIL     ;LIVE
         S IBA(2)="IB*2*608 Post-Install Complete.",(IBA(1),IBA(3))=" " D MES^XPDUTL(.IBA) K IBA
         Q
         ;
RPT      ; Get all Insurance companies that have the 3.01- transmit electronically field blank or set to No.
         ;N IBADDRESS,IBCITY,IBNAME,IBPIEN,IBSTATE,STATE,TRANSCD,TRANSMIT
         N IBADDRESS,IBCITY,IBNAME,IBPIEN,IBSTATE,INACTFLG,STATE,TRANSMIT
         S IBNAME=""
         F  S IBNAME=$O(^DIC(36,"B",IBNAME)) Q:IBNAME=""  D
         . S IBPIEN=0
         . F  S IBPIEN=$O(^DIC(36,"B",IBNAME,IBPIEN)) Q:'+IBPIEN  D
         . . S TRANSMIT=$$GET1^DIQ(36,IBPIEN,3.01,"I")
         . . Q:+TRANSMIT  ;Only want to report the insurance companies that have a setting of 0 or NULL
         . . S (IBADDRESS,IBCITY,IBSTATE,INACTFLG,STATE)=""
         . . S IBADDRESS=$$GET1^DIQ(36,IBPIEN,.111)
         . . S IBCITY=$$GET1^DIQ(36,IBPIEN,.114)
         . . S IBSTATE=$$GET1^DIQ(36,IBPIEN,.115,"I")
         . . I +IBSTATE S STATE=$$GET1^DIQ(5,+IBSTATE,1)
         . . S INACTFLG=$$GET1^DIQ(36,IBPIEN,.05)
         . . I INACTFLG="" S INACTFLG=""
         . . S ^TMP(RNAME,$J,IBNAME,IBPIEN)=IBADDRESS_U_IBCITY_U_STATE_U_INACTFLG_U_$S(TRANSMIT="":"",1:"NO")
         Q
         ;
EMAIL    ; Send an email message to eBiz Rapid Response group with the report.
         N ADDRESS,CITY,DATA,FULLADD,IBNAME,IBNAMEX,IBPIEN,INACTFLG,LN,MSG
         N SPACES,SITE,SITENAME,SITENO,STATE,STATION,SUBJ,TOTAL,TRANS,TRANSCD,XMINSTR,XMTO
         D BMES^XPDUTL(">> Sending Email...")
         D MES^XPDUTL("-------------")
         D MES^XPDUTL("Sending email notification to eBiz Rapid response group ... ")
         ;S SPACES=$J(" ",100)
         S $P(SPACES,"_",100)="_"
         S SITE=$$SITE^VASITE,SITENAME=$P(SITE,U,2),SITENO=$P(SITE,U,1),STATION=$P(SITE,U,3)
         S SUBJ="PATCH IB*2.0*608 - Insurance Company EDI Report"_" for Station# "_$P(SITE,U,3)_" - "_$P(SITE,U,2)
         S SUBJ=$E(SUBJ,1,65)
         S MSG(1)="PATCH IB*2.0*608 - Insurance Company EDI Parameter Report"
         S MSG(2)=""
         S MSG(3)="Site: "_SITENO_" "_SITENAME_" - Station "_STATION
         S MSG(4)="Domain: "_$G(^XMB("NETNAME"))
         S MSG(5)="Date/Time: "_$$FMTE^XLFDT($$NOW^XLFDT)
         S MSG(6)=""
         S MSG(7)="INSURANCE COMPANY__________________ADDRESS__________________________________________________________INACTIVE____E
          DI-TRANSMIT"
         S MSG(8)="=================================================================================================================
          ==========="
         S MSG(9)=""
         S LN=10,IBNAME="",TOTAL=0
         F  S IBNAME=$O(^TMP(RNAME,$J,IBNAME)) Q:IBNAME=""  D
         . S IBPIEN=""
         . F  S IBPIEN=$O(^TMP(RNAME,$J,IBNAME,IBPIEN)) Q:IBPIEN=""  D
         . . S DATA=^TMP(RNAME,$J,IBNAME,IBPIEN)
         . . S IBNAMEX=$$UNSPACE($E(IBNAME,1,30))
         . . S ADDRESS=$$UNSPACE($E($P(DATA,U,1),1,30)),CITY=$$UNSPACE($E($P(DATA,U,2),1,25)),STATE=$$UNSPACE($P(DATA,U,3))
         . . S FULLADD=ADDRESS_", "_CITY_", "_STATE
         . . I '$L(ADDRESS),'$L(CITY),'$L(STATE) S FULLADD=""
         . . S INACTFLG=$P(DATA,U,4)
         . . S TRANS=$P(DATA,U,5)
         . . S LN=LN+1,MSG(LN)=IBNAMEX_$E(SPACES,1,35-$L(IBNAMEX))_FULLADD_$E(SPACES,1,68-$L(FULLADD))
         . . S MSG(LN)=MSG(LN)_INACTFLG_$E(SPACES,1,15-$L(INACTFLG))_TRANS
         . . S TOTAL=TOTAL+1
         S LN=LN+1,MSG(LN)=""
         S LN=LN+1,MSG(LN)="Total: "_+TOTAL
         S LN=LN+1,MSG(LN)=""
         S LN=LN+1,MSG(LN)="End of Report"
         ;
         ; ***testing email to vito,anne,cj,jane vs live*** must change back to live before putting in build ***
         ;S XMTO("vito.d'amico@va.gov")=""
         ;S XMTO("anne.debacker@va.gov")=""
         ;S XMTO("cherie.minch@va.gov")=""
         ;S XMTO("jane.balchunas@va.gov")=""
         ;S XMTO("william.jutzi@va.gov")=""
         S XMTO("VHAeBillingRR@va.gov")=""
         ;
         S XMINSTR("FROM")="VistA-eBilling"
         D SENDMSG^XMXAPI(DUZ,SUBJ,"MSG",.XMTO,.XMINSTR)
         ;
EMAILX   ;
         D MES^XPDUTL(" Done.")
         D CLEAN^DILF
         Q
         ;
UNSPACE(FLDX) --
          ; Eliminate spaces at the end of the field.
         N I
         F  S I=$L(FLDX) Q:($E(FLDX,I)'=" ")  I $E(FLDX,I)=" " S FLDX=$E(FLDX,1,I-1)
         Q FLDX
         ;
CMNCPT   ;Set CMN CPT CODES in IB System Parameters
         D MES^XPDUTL("Setting CMN CPT Codes in IB SITE PARAMETER file.....")
         N CODES,CPTCD,CPTIEN,CPTS,DA,DIC,DIE,DR,ERRMSG,FDA,I,RETIEN
         S CODES=""
         F I=1:1 S CPTS=$P($T(CPTCD+I),";;",2) Q:CPTS=""  S CODES=$S(CODES="":CPTS,1:CODES_U_CPTS)
         F I=1:1 S CPTCD=$P(CODES,U,I) Q:CPTCD=""  D
         . S CPTIEN=$$FIND1^DIC(81,,"X",CPTCD) Q:'CPTIEN
         . I $D(^IBE(350.9,1,16,"B",CPTIEN)) Q
         . K FDA,ERRMSG,RETIEN
         . S FDA(350.916,"+1,1,",.01)=CPTIEN
         . D UPDATE^DIE("","FDA","RETIEN","ERRMSG")
         D MES^XPDUTL(".....CMN CPT Codes set. ")
         Q
         ;
CPTCD    ;
         ;;B4102^B4103^B4104^B4149^B4150^B4152^B4153^B4154^B4155^B4157^B4158^B4159^B4160^B4161^B4162^B4164^B4168
         ;;B4172^B4176^B4178^B4180^B4185^B4189^B4193^B4197^B4199^B4216^B5000^B5100^B5200^B9002^B9004^B9006^E0424
         ;;E0431^E0433^E0434^E0439^E0441^E0442^E0443^E0444^E0776^E0791^E1390^E1391^E1392^E1405^E1406^K0738
         ;

*****   INDEX OF IBY608PO   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   ADDRESS      EMAIL+1~,EMAIL+26*,EMAIL+27,EMAIL+28
   CITY         EMAIL+1~,EMAIL+26*,EMAIL+27,EMAIL+28
   CODES        CMNCPT+2~,CMNCPT+3*,CMNCPT+4*,CMNCPT+5
   CPTCD        CMNCPT+2~,CMNCPT+5*,CMNCPT+6
   CPTIEN       CMNCPT+2~,CMNCPT+6*,CMNCPT+7,CMNCPT+9
   CPTS         CMNCPT+2~,CMNCPT+4*
   DA           CMNCPT+2~
   DATA         EMAIL+1~,EMAIL+24*,EMAIL+26,EMAIL+29,EMAIL+30
   DIC          CMNCPT+2~
   DIE          CMNCPT+2~
   DR           CMNCPT+2~
   DUZ          EMAIL+48
   ERRMSG       CMNCPT+2~,CMNCPT+8!
   FDA          CMNCPT+2~,CMNCPT+8!
   FDA(         CMNCPT+9*
   FLDX         UNSPACE~,UNSPACE+2*,UNSPACE+3
   FULLADD      EMAIL+1~,EMAIL+27*,EMAIL+28*,EMAIL+31
   I            UNSPACE+1~,UNSPACE+2*,CMNCPT+2~,CMNCPT+4*,CMNCPT+5*
   IBA          IBY608PO+7~,IBY608PO+10!,IBY608PO+16!
   IBA(1        IBY608PO+10*,IBY608PO+16*
   IBA(2        IBY608PO+10*,IBY608PO+16*
   IBA(3        IBY608PO+10*,IBY608PO+16*
   IBADDRESS    RPT+2~,RPT+9*,RPT+10*,RPT+16
   IBCITY       RPT+2~,RPT+9*,RPT+11*,RPT+16
   IBNAME       RPT+2~,RPT+3*,RPT+4*,RPT+6,RPT+16,EMAIL+1~,EMAIL+20*,EMAIL+21*,EMAIL+23,EMAIL+24,EMAIL+25
   IBNAMEX      EMAIL+1~,EMAIL+25*,EMAIL+31
   IBPIEN       RPT+2~,RPT+5*,RPT+6*,RPT+7,RPT+10,RPT+11,RPT+12,RPT+14,RPT+16,EMAIL+1~,EMAIL+22*,EMAIL+23*,EMAIL+24
   IBSTATE      RPT+2~,RPT+9*,RPT+12*,RPT+13
   INACTFLG     RPT+2~,RPT+9*,RPT+14*,RPT+15*,RPT+16,EMAIL+1~,EMAIL+29*,EMAIL+32
   LN           EMAIL+1~,EMAIL+20*,EMAIL+31*,EMAIL+32,EMAIL+34*,EMAIL+35*,EMAIL+36*,EMAIL+37*
   MSG          EMAIL+1~
   MSG(         EMAIL+31*,EMAIL+32*,EMAIL+34*,EMAIL+35*,EMAIL+36*,EMAIL+37*
   MSG(1        EMAIL+11*
   MSG(2        EMAIL+12*
   MSG(3        EMAIL+13*
   MSG(4        EMAIL+14*
   MSG(5        EMAIL+15*
   MSG(6        EMAIL+16*
   MSG(7        EMAIL+17*
   MSG(8        EMAIL+18*
   MSG(9        EMAIL+19*
   RETIEN       CMNCPT+2~,CMNCPT+8!
   RNAME        IBY608PO+7~,IBY608PO+8*,IBY608PO+9,RPT+16,EMAIL+21,EMAIL+23,EMAIL+24
   SITE         EMAIL+2~,EMAIL+8*,EMAIL+9
   SITENAME     EMAIL+2~,EMAIL+8*,EMAIL+13
   SITENO       EMAIL+2~,EMAIL+8*,EMAIL+13
   SPACES       EMAIL+2~,EMAIL+7*,EMAIL+31,EMAIL+32
   STATE        RPT+2~,RPT+9*,RPT+13*,RPT+16,EMAIL+2~,EMAIL+26*,EMAIL+27,EMAIL+28
   STATION      EMAIL+2~,EMAIL+8*,EMAIL+13
   SUBJ         EMAIL+2~,EMAIL+9*,EMAIL+10*,EMAIL+48
   TOTAL        EMAIL+2~,EMAIL+20*,EMAIL+33*,EMAIL+35
   TRANS        EMAIL+2~,EMAIL+30*,EMAIL+32
   TRANSCD      EMAIL+2~
   TRANSMIT     RPT+2~,RPT+7*,RPT+8,RPT+16
   U            RPT+16,EMAIL+8,EMAIL+9,EMAIL+26,EMAIL+29,EMAIL+30,CMNCPT+4,CMNCPT+5
   XMINSTR      EMAIL+2~,EMAIL+48
   XMINSTR("FROM" 
                EMAIL+47*
   XMTO         EMAIL+2~,EMAIL+48
   XMTO("VHAeBillingRR@va.gov" 
                EMAIL+45*

Global Variables  ( * Changed  ! Killed)
   ^DIC(36             RPT+4,RPT+6
   ^IBE(350.9          CMNCPT+7
   ^TMP(               IBY608PO+9!,RPT+16*,EMAIL+21,EMAIL+23,EMAIL+24
   ^XMB("NETNAME"      EMAIL+14

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   $T(CPTCD+I   CMNCPT+4

Label References
   $$UNSPACE    EMAIL+25,EMAIL+26
   CMNCPT       IBY608PO+14
   EMAIL        IBY608PO+15
   RPT          IBY608PO+12

External References
   $$FIND1^DIC         CMNCPT+6
   UPDATE^DIE          CMNCPT+10
   CLEAN^DILF          EMAILX+2
   $$GET1^DIQ          RPT+7,RPT+10,RPT+11,RPT+12,RPT+13,RPT+14
   $$SITE^VASITE       EMAIL+8
   $$FMTE^XLFDT        EMAIL+15
   $$NOW^XLFDT         EMAIL+15
   SENDMSG^XMXAPI      EMAIL+48
   BMES^XPDUTL         EMAIL+3
   MES^XPDUTL          IBY608PO+10,IBY608PO+11,IBY608PO+13,IBY608PO+16,EMAIL+4,EMAIL+5,EMAILX+1,CMNCPT+1,CMNCPT+11
   $$PROD^XUPROD       IBY608PO+15

*****   END   *****


IBY608PR * *  215 Lines,  7540 Bytes, Checksum: B11561553                                             Mar 20, 2019@15:10:13 page 34
              5637 bytes in comments
IBY608PR ;EDE/JRA - Pre-Installation for IB patch 608 ; 10/12/17 2:12 pm
         ;;2.0;INTEGRATED BILLING;**608**;21-MAR-94;Build 88
         ;;Per VA Directive 6402, this routine should not be modified.
         ;
         ; delete all output formatter (O.F.) data elements included in build
         D DELOF
         Q
         ;
INCLUDE(FILE,Y) --
          ; function to determine if O.F. entry should be included in the build
         ; FILE=5,6,7 indicating file 364.x or FILE=8 indicating file 350.8 (IB ERROR)
         ; Y=ien to file
         NEW OK,LN,TAG,DATA
         S OK=0
         F LN=2:1 S TAG="ENT"_FILE_"+"_LN,DATA=$P($T(@TAG),";;",2) Q:DATA=""  I $F(DATA,U_Y_U) S OK=1 Q
         Q OK
         ;
         ;Delete edited entries to insure clean install of new entries
         ;Delete obsolete entries.
DELOF      ; Delete included OF entries
         NEW FILE,DIK,LN,TAG,TAGLN,DATA,PCE,DA,Y
         F FILE=5:1:8 S DIK=$S(FILE=8:"^IBE(350.",1:"^IBA(364.")_FILE_"," D
         . F TAG="ENT"_FILE,"DEL"_FILE D
         .. F LN=2:1 S TAGLN=TAG_"+"_LN,DATA=$P($T(@TAGLN),";;",2) Q:DATA=""  D
         ... F PCE=2:1 S DA=$P(DATA,U,PCE) Q:'DA  D
         .... I FILE=8,$D(^IBE(350.8,DA,0)) D ^DIK
         .... Q:FILE=8
         .... I $D(^IBA("364."_FILE,DA,0)) D ^DIK
         Q
         ;
         ; Example for ENT5, ENT6, ENT7, ENT8, DEL5, DEL6, and DEL7:
         ;;^195^254^259^269^324^325^
         ; Note:  Must have beginning and ending up-carat
         ;
         ;-----------------------------------------------------------------------
         ; 364.5 O.F. entries added:
         ;
         ;  225  N-COB CLAIM LEVEL AMOUNTS 'COB1-1.9' (US2486)
         ;  226  N-MEDICARE INPT CLAIM COB AMTS 'MIA1-1.9' (US2486)
         ;  227  N-MEDICARE OUTPT CLAIM COB AMT 'MOA1-1.9' (US2486)
         ;  228  N-COB CLAIM LEVEL ADJUSTMENTS 'CCAS-1.9' (US2486)
         ;  396  N-CMN RECORD ID 'LQ  '
         ;  438  N-CMN RECORD ID 'FRM '
         ;  440  N-CMN RECORD ID 'CMN '
         ;  442  N-CMN RECORD ID 'MEA '
         ;  
ENT5     ;O.F. entries in file 364.5 to be added
         ;
         ;;^225^226^227^228^396^438^440^442^
         ;
         ;-----------------------------------------------------------------------
         ; 364.6 O.F. entries added:
         ;
         ;  2383 CMN RECORD ID 'LQ  '
         ;  2384 CMN FORM TYPE QUALIFIER
         ;  2385 SERVICE LINE #
         ;  2387 CMN INDUSTRY CODE
         ;  2388 CMN CERTIFICATION TYPE
         ;  2390 CMN CERTIFICATION TYPE QUAL
         ;  2392 CMN MEASUREMENT REFERENCE ID CODE
         ;  2393 CMN PATIENT WEIGHT (LBS)
         ;  2394 CMN PATIENT WEIGHT MODIFIER
         ;  2395 CMN MONTHS DME EQUIPMENT NEEDED
         ;  2396 CMN DATE THERAPY STARTED
         ;  2397 CMN DATE THERAPY STARTED QUALIFIER
         ;  2398 CMN LAST CERTIFICATION DATE
         ;  2399 CMN LAST CERTIFICATION DATE QUALIFIER
         ;  2400 CMN RECERTIFICATION/REVISION DATE
         ;  2401 CMN REPLACEMENT ITEM?
         ;  2433 LQ DATA EXTRACT
         ;  2436 FRM DATA EXTRACT
         ;  2438 CMN RECORD ID 'FRM '
         ;  2439 SERVICE LINE #
         ;  2442 CMN QUESTION NUMBER/LETTER
         ;  2443 CMN QUESTION RESPONSE Y/N
         ;  2444 CMN QUESTION RESPONSE REF ID
         ;  2445 CMN QUESTION RESPONSE DATE
         ;  2446 CMN QUESTION RESPONSE % & DECIMAL
         ;  2447 SERVICE LINE #
         ;  2448 CMN DATA EXTRACT
         ;  2449 CMN RECORD ID 'CMN '
         ;  2451 CMN UNIT OR BASIS FOR MEASUREMENT CODE
         ;  2452 CMN CERTIFICATION CONDITION INDICATOR
         ;  2453 CMN CONDITION INDICATOR
         ;  2454 CMN ATTACHMENT REPORT TYPE CODE
         ;  2455 CMN ATTACHMENT TRANSMISSION CODE
         ;  2456 CMN CODE CATEGORY
         ;  2457 CMN RECORD ID 'MEA '
         ;  2458 MEA DATA EXTRACT
         ;  2461 SERVICE LINE #
         ;  2462 CMN MEASUREMENT QUALIFIER
         ;  2463 CMN TEST RESULTS
         ;
ENT6     ;O.F. entries in file 364.6 to be added
         ;
         ;;^2383^2384^2385^2387^2388^2390^2392^2393^2394^2395^2396^2397^2398^
         ;;^2399^2400^2401^2433^2436^2438^2439^2442^2443^2444^2445^2446^2447^
         ;;^2448^2449^2451^2452^2453^2454^2455^2456^2457^2458^2461^2462^2463^
         ;
         ;-----------------------------------------------------------------------
         ; 364.7 O.F. entries added:
         ;
         ;  105  VC1 VALUE CODE (837 Transaction) (PC 2) (US9)
         ;  176  INS SERVICE LINE COUNTER (PC 2) (US9)
         ;  178  INS SERVICE UNIT COUNT (PC 5) (US9)
         ;  179  INS BLANK (PC 6) (US9)
         ;  180  INS SERVICE LINE CHARGE AMT (PC 9) (US9)
         ;  181  INS PROCEDURE MODIFIER (1) (PC 7) (US9)
         ;  189  INS PROCEDURE CODE (PC 4) (US9)
         ;  478  BGN N-RECORD ID (PC1) (US9)
         ;  482  INS SERVICE LINE NON-COVERED CHARGE AMT (PC 12) (US9)
         ;  805  INS UNITS/BASIS FOR MEASUREMENT CODE (PC 13) (US9)
         ;  985  N-GET FROM PREVIOUS EXTRACT 'LCOB-1.9' - US2486
         ; 1015  GEN-7
         ; 1751  LDATE SERVICE LINE COUNTER (PC 2)
         ; 1752  LDAT DATA EXTRACT (837 Transaction) (PC 1.9) (US9)
         ; 1765  LDAT CLEANUP (837 Transaction) (PC 99.9) (US9)
         ; 1969  CMN RECORD ID 'LQ  '
         ; 1970  SERVICE LINE #
         ; 1971  CMN FORM TYPE QUALIFIER
         ; 1973  CMN INDUSTRY CODE
         ; 1974  CMN CERTIFICATION TYPE
         ; 1975  CMN CERTIFICATION TYPE QUAL
         ; 1977  CMN MEASUREMENT REFERENCE ID CODE
         ; 1978  CMN PATIENT WEIGHT (LBS)
         ; 1979  CMN PATIENT WEIGHT MODIFIER
         ; 1980  CMN MONTHS DME EQUIPMENT NEEDED
         ; 1981  CMN DATE THERAPY STARTED
         ; 1982  CMN DATE THERAPY STARTED QUALIFIER
         ; 1983  CMN LAST CERTIFICATION DATE
         ; 1984  CMN LAST CERTIFICATION DATE QUALIFIER
         ; 1985  CMN RECERTIFICATION/REVISION DATE
         ; 1986  CMN REPLACEMENT ITEM?
         ; 2018  LQ DATA EXTRACT
         ; 2019  FRM DATA EXTRACT
         ; 2020  CMN RECORD ID 'FRM '
         ; 2021  CMN QUESTION NUMBER/LETTER
         ; 2022  CMN QUESTION RESPONSE Y/N
         ; 2023  CMN QUESTION RESPONSE REF ID
         ; 2024  CMN QUESTION RESPONSE DATE
         ; 2025  CMN QUESTION RESPONSE % & DECIMAL
         ; 2026  SERVICE LINE #
         ; 2027  SERVICE LINE #
         ; 2028  CMN DATA EXTRACT
         ; 2029  CMN RECORD ID 'CMN '
         ; 2030  CMN UNIT OR BASIS FOR MEASUREMENT CODE
         ; 2031  CMN CERTIFICATION CONDITION INDICATOR
         ; 2032  CMN ATTACHMENT REPORT TYPE CODE
         ; 2033  CMN ATTACHMENT TRANSMISSION CODE
         ; 2034  CMN CODE CATEGORY
         ; 2035  CMN CONDITION INDICATOR
         ; 2038  CMN RECORD ID 'MEA '
         ; 2039  MEA DATA EXTRACT
         ; 2040  SERVICE LINE #
         ; 2041  CMN MEASUREMENT QUALIFIER
         ; 2042  CMN TEST RESULTS
         ;
ENT7     ; O.F. entries in file 364.7 to be added
         ;
         ;;^105^176^178^179^180^181^189^478^482^805^985^1015^1751^1752^1765^
         ;;^1969^1970^1971^1973^1974^1975^1977^1978^1979^1980^1981^
         ;;^1982^1983^1984^1985^1986^2018^2019^2020^2021^2022^2023^
         ;;^2024^2025^2026^2027^2028^2029^2030^2031^2032^2033^2034^
         ;;^2035^2038^2039^2040^2041^2042^
         ;
         ;-----------------------------------------------------------------------
         ; 350.8 O.F. entries added:
         ;
         ; 239   IB CMN NOT REQ BUT DATA  (IB901)
         ; 240   IB CMN FORM TYPE  (IB902)
         ; 241   IB CMN NO DATA NODE  (IB903)
         ; 243   IB CMN BAD DATA NODE  (IB904)
         ; 244   IB CMN CERT TYPE  (IB905)
         ; 246   IB CMN THERAPY DT  (IB907)
         ; 247   IB CMN LAST CERT DT  (IB908)
         ; 248   IB CMN RECERT/REVISION DT  (IB909)
         ; 259   IB CMN ABG SAT DT  (IB912)
         ; 271   IB CMN 4 LPM DATE  (IB914)
         ; 272   IB CMN ERRORS HEADER  (IB915)
         ; 273   IB CMN PEB (IB906)
         ;
ENT8     ;O.F. entries in file 350.8 to be added
         ;
         ;;^239^240^241^243^244^246^247^248^259^271^272^273^
         ;
         ;-----------------------------------------------------------------------
         ; 364.5 entries deleted:
         ;
DEL5        ; remove O.F. entries in file 364.5 (not re-added)
         ;
         ;;
         ;
         ;-----------------------------------------------------------------------
         ; 364.6 entries deleted:
         ;
DEL6        ; remove O.F. entries in file 364.6 (not re-added)
         ;
         ;;
         ;
         ;-----------------------------------------------------------------------
         ; 364.7 entries deleted:
         ;
         ;
DEL7        ; remove O.F. entries in file 364.7 (not re-added)
         ;
         ;;
         ;
         ;-----------------------------------------------------------------------
         ; 350.8 Entries deleted:
         ;
         ;  238  IB CMN REQ
         ;
DEL8        ; remove entries from 350.8 (IB ERROR)
         ;
         ;;
         ;

*****   INDEX OF IBY608PR   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   DA           DELOF+1~,DELOF+5*,DELOF+6,DELOF+8
   DATA         INCLUDE+3~,INCLUDE+5*,DELOF+1~,DELOF+4*,DELOF+5
   DIK          DELOF+1~,DELOF+2*
   FILE         INCLUDE~,INCLUDE+5,DELOF+1~,DELOF+2*,DELOF+3,DELOF+6,DELOF+7,DELOF+8
   LN           INCLUDE+3~,INCLUDE+5*,DELOF+1~,DELOF+4*
   OK           INCLUDE+3~,INCLUDE+4*,INCLUDE+5*,INCLUDE+6
   PCE          DELOF+1~,DELOF+5*
   TAG          INCLUDE+3~,INCLUDE+5*,DELOF+1~,DELOF+3*,DELOF+4
   TAGLN        DELOF+1~,DELOF+4*
   U            INCLUDE+5,DELOF+5
   Y            INCLUDE~,INCLUDE+5,DELOF+1~

Global Variables  ( * Changed  ! Killed)
   ^IBA("364."         DELOF+8
   ^IBE(350.8          DELOF+6

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   $T(@TAG      INCLUDE+5
   $T(@TAGLN    DELOF+4

Label References
   DELOF        IBY608PR+5

External References
   ^DIK                DELOF+6,DELOF+8

*****   END   *****


|dd350.8 * *  25 Lines,  778 Bytes, Checksum:                                                         Mar 20, 2019@15:10:13 page 35
              271 bytes in comments
|dd350.8 ;DD of the IB ERROR file.
ID.03    ; IDENTIFIER CODE FOR .03
         W "   ",$P(^(0),U,3)
.01      ; NAME
         K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
.01XRF1S ; SET LOGIC FOR 'B' XREF
         S ^IBE(350.8,"B",$E(X,1,30),DA)=""
.01XRF1K ; KILL LOGIC FOR 'B' XREF
         K ^IBE(350.8,"B",$E(X,1,30),DA)
.02      ; ERROR MESSAGE
         K:$L(X)>80!($L(X)<3) X
.03      ; ERROR CODE
         K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>9!($L(X)<1) X
.03XRF1S ; SET LOGIC FOR 'AC' XREF
         S ^IBE(350.8,"AC",$E(X,1,30),DA)=""
.03XRF1K ; KILL LOGIC FOR 'AC' XREF
         K ^IBE(350.8,"AC",$E(X,1,30),DA)
.03XRF2S ; SET LOGIC FOR 'C' XREF
         S ^IBE(350.8,"C",$E(X,1,30),DA)=""
.03XRF2K ; KILL LOGIC FOR 'C' XREF
         K ^IBE(350.8,"C",$E(X,1,30),DA)
.06      ; CORRESPONDING ALERT
         Q
10       ; EXECUTABLE LOGIC
         K:$L(X)>245 X D:$D(X) ^DIM

*****   INDEX OF |dd350.8   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
>> DA           .01XRF1S+1,.01XRF1K+1,.03XRF1S+1,.03XRF1K+1,.03XRF2S+1,.03XRF2K+1
   U            ID.03+1
   X            .01+1!,.01XRF1S+1,.01XRF1K+1,.02+1!,.03+1!,.03XRF1S+1,.03XRF1K+1,.03XRF2S+1,.03XRF2K+1,10+1!

Global Variables  ( * Changed  ! Killed)
   ^IBE(350.8          .01XRF1S+1*,.01XRF1K+1!,.03XRF1S+1*,.03XRF1K+1!,.03XRF2S+1*,.03XRF2K+1!

Naked Globals
   ^(0          ID.03+1

Cache Objects
   NONE

Marked Items
   NONE

Label References
   NONE

External References
   ^DIM                10+1

*****   END   *****


|dd350.9 * *  1 Lines,  51 Bytes, Checksum:                                                           Mar 20, 2019@15:10:13 page 36
              38 bytes in comments
|dd350.916 --
          ;Partial DD of the CMN CPT CODES file.

*****   INDEX OF |dd350.916   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   NONE

Global Variables  ( * Changed  ! Killed)
   NONE

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   NONE

External References
   NONE

*****   END   *****


|dd350.9 * *  1 Lines,  65 Bytes, Checksum:                                                           Mar 20, 2019@15:10:13 page 37
              52 bytes in comments
|dd350.928 --
          ;Partial DD of the NON-MCCF RATE TYPES FOR PTP file.

*****   INDEX OF |dd350.928   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   NONE

Global Variables  ( * Changed  ! Killed)
   NONE

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   NONE

External References
   NONE

*****   END   *****


|dd350.9 * *  27 Lines,  868 Bytes, Checksum:                                                         Mar 20, 2019@15:10:13 page 38
              324 bytes in comments
|dd350.929 --
          ;Partial DD of the TRICARE PAY-TO PROVIDERS file.
.01      ; TC FACILITY
         S DIC("S")="I $$SCRN4^IBJPS4(Y)" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
.01SCR   ; Inactive, not national, and pharmacy entries are screened out.
         S DIC("S")="I $$SCRN4^IBJPS4(Y)"
.01XRF1S ; SET LOGIC FOR 'B' XREF
         S ^IBE(350.9,DA(1),29,"B",$E(X,1,30),DA)=""
.01XRF1K ; KILL LOGIC FOR 'B' XREF
         K ^IBE(350.9,DA(1),29,"B",$E(X,1,30),DA)
.02      ; TC NAME
         K:$L(X)>35!($L(X)<1) X
.03      ; TC FEDERAL TAX NUMBER
         K:$L(X)>10!($L(X)<10)!'(X?2N1"-"7N) X
.04      ; TC TELEPHONE NUMBER
         K:$L(X)>30!($L(X)<1) X
.05      ; TC PARENT PAY-TO PROVIDER
         K:+X'=X!(X>9999)!(X<1)!(X?.E1"."1N.N) X
1.01     ; TC STREET ADDRESS 1
         K:$L(X)>55!($L(X)<1) X
1.02     ; TC STREET ADDRESS 2
         K:$L(X)>55!($L(X)<1) X
1.03     ; TC CITY
         K:$L(X)>40!($L(X)<2) X
1.04     ; TC STATE
         Q
1.05     ; TC ZIP
         K:$L(X)>15!($L(X)<3) X

*****   INDEX OF |dd350.929   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
>> DA           .01XRF1S+1,.01XRF1K+1
>> DA(1         .01XRF1S+1,.01XRF1K+1
   DIC          .01+1!*
   DIC("S"      .01+1*,.01SCR+1*
>> DIE          .01+1
   X            .01+1*!,.01XRF1S+1,.01XRF1K+1,.02+1!,.03+1!,.04+1!,.05+1!,1.01+1!,1.02+1!,1.03+1!,1.05+1!
>> Y            .01+1

Global Variables  ( * Changed  ! Killed)
   ^IBE(350.9          .01XRF1S+1*,.01XRF1K+1!

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   NONE

External References
   ^DIC                .01+1

*****   END   *****


|dd36    * *  1 Lines,  50 Bytes, Checksum:                                                           Mar 20, 2019@15:10:13 page 39
              42 bytes in comments
|dd36    ;Partial DD of the INSURANCE COMPANY file.

*****   INDEX OF |dd36   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   NONE

Global Variables  ( * Changed  ! Killed)
   NONE

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   NONE

External References
   NONE

*****   END   *****


|dd364.5 * *  57 Lines,  3620 Bytes, Checksum:                                                        Mar 20, 2019@15:10:13 page 40
              664 bytes in comments
|dd364.5 ;DD of the IB DATA ELEMENT DEFINITION file.
ID.05    ; IDENTIFIER CODE FOR .05
         S %I=Y,Y=$S('$D(^(0)):"",$D(^DIC(+$P(^(0),U,5),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(1,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E
          ("_DIC_"%I,0),0)") S Y=%I K %I
.01      ; NAME
         K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
.01XRF1S ; SET LOGIC FOR 'B' XREF
         S ^IBA(364.5,"B",$E(X,1,30),DA)=""
.01XRF1K ; KILL LOGIC FOR 'B' XREF
         K ^IBA(364.5,"B",$E(X,1,30),DA)
.03XRF1S ; SET LOGIC FOR '1' XREF
         K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X="FC",Y(1)=X S X=Y(0),X=X S Y=X,X=Y(1),X=X S X=X[Y I X S X=DIV S Y(1)=$S($D(^IBA(
          364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X=DIV S X="I" X ^DD(364.5,.03,1,1,1.4)
.03XRF1n1.4 --
          ; SET LOGIC FOR '1' XREF
         S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=364.5,DIG=.04 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
.03XRF1K ; KILL LOGIC FOR '1' XREF
         Q
.03XRF2S ; SET LOGIC FOR '2' XREF
         K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="F" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P
          (Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,2,1.4)
.03XRF2n1.4 --
          ; SET LOGIC FOR '2' XREF
         S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.5,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
.03XRF2K ; KILL LOGIC FOR '2' XREF
         Q
.03XRF3S ; SET LOGIC FOR '3' XREF
         K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="C" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P
          (Y(1),U,8),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,3,1.4)
.03XRF3n1.4 --
          ; SET LOGIC FOR '3' XREF
         S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,8)=DIV,DIH=364.5,DIG=.08 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
.03XRF3K ; KILL LOGIC FOR '3' XREF
         Q
.03XRF4S ; SET LOGIC FOR '4' XREF
         K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="E" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,1)):^(1),1:"") S X=$E
          (Y(1),1,245),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,4,1.4)
.03XRF4n1.4 --
          ; SET LOGIC FOR '4' XREF
         S DIH=$S($D(^IBA(364.5,DIV(0),1)):^(1),1:""),DIV=X S DE=0-$L(DIH),DIU=$E(DIH,1,245),Y=$E(DIH,246,999),^(1)=$J("",$S(DE>0:DE
          ,1:0))_DIV_$S(Y?." ":"",1:$J("",245-$L(DIV))_Y),DIH=364.5,DIG=1 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
.03XRF4K ; KILL LOGIC FOR '4' XREF
         Q
.04XRF1S ; SET LOGIC FOR '1' XREF
         K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X="G" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(
          Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.5,.04,1,1,1.4)
.04XRF1n1.4 --
          ; SET LOGIC FOR '1' XREF
         S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.5,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
.04XRF1K ; KILL LOGIC FOR '1' XREF
         Q
.05      ; BASE FILE
         Q
.06      ; FILEMAN FIELD REFERENCE
         K:$L(X)>65!($L(X)<1) X I $D(X),$P($G(^IBA(364.5,DA,0)),U,4)="G" K X
.06XRF1S ; SET LOGIC FOR '1' XREF
         K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0)="" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,7),X
          =X S DIU=X K Y S X="" X ^DD(364.5,.06,1,1,1.4)
.06XRF1n1.4 --
          ; SET LOGIC FOR '1' XREF
         S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,7)=DIV,DIH=364.5,DIG=.07 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
.06XRF1K ; KILL LOGIC FOR '1' XREF
         K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(364.5
          ,.06,1,1,2.4)
.06XRF1n2.4 --
          ; KILL LOGIC FOR '1' XREF
         S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,7)=DIV,DIH=364.5,DIG=.07 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
.08      ; CONSTANT VALUE
         K:$L(X)>80!($L(X)<1) X
1        ; EXTRACT CODE
         K:$L(X)>245 X D:$D(X) ^DIM
2        ; ARRAY ROOT
         K:$L(X)>50!($L(X)<1) X

*****   INDEX OF |dd364.5   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   %I           ID.05+1*!
>> C            ID.05+1*
>> D0           .03XRF1S+1*,.03XRF2S+1*,.03XRF3S+1*,.03XRF4S+1*,.04XRF1S+1*,.06XRF1S+1*,.06XRF1K+1*
>> DA           .01XRF1S+1,.01XRF1K+1,.03XRF1S+1,.03XRF2S+1,.03XRF3S+1,.03XRF4S+1,.04XRF1S+1,.06+1,.06XRF1S+1,.06XRF1K+1
>> DE           .03XRF4n1.4+1*
>> DIC          ID.05+1
>> DIG          .03XRF1n1.4+1*,.03XRF2n1.4+1*,.03XRF3n1.4+1*,.03XRF4n1.4+1*,.04XRF1n1.4+1*,.06XRF1n1.4+1*,.06XRF1n2.4+1*
>> DIH          .03XRF1n1.4+1*,.03XRF2n1.4+1*,.03XRF3n1.4+1*,.03XRF4n1.4+1*,.04XRF1n1.4+1*,.06XRF1n1.4+1*,.06XRF1n2.4+1*
>> DIU          .03XRF1S+1*,.03XRF2S+1*,.03XRF3S+1*,.03XRF4S+1*,.03XRF4n1.4+1*,.04XRF1S+1*,.06XRF1S+1*,.06XRF1K+1*
   DIV          .03XRF1S+1!*,.03XRF1n1.4+1*,.03XRF2S+1!*,.03XRF2n1.4+1*,.03XRF3S+1!*,.03XRF3n1.4+1*,.03XRF4S+1!*,.03XRF4n1.4+1*
                .04XRF1S+1!*,.04XRF1n1.4+1*,.06XRF1S+1!*,.06XRF1n1.4+1*,.06XRF1K+1!*,.06XRF1n2.4+1*
   DIV(0        .03XRF1S+1*,.03XRF1n1.4+1,.03XRF2S+1*,.03XRF2n1.4+1,.03XRF3S+1*,.03XRF3n1.4+1,.03XRF4S+1*,.03XRF4n1.4+1,.04XRF1S+1*
                .04XRF1n1.4+1,.06XRF1S+1*,.06XRF1n1.4+1,.06XRF1K+1*,.06XRF1n2.4+1
   U            ID.05+1,.03XRF1S+1,.03XRF1n1.4+1,.03XRF2S+1,.03XRF2n1.4+1,.03XRF3S+1,.03XRF3n1.4+1,.04XRF1S+1,.04XRF1n1.4+1,.06+1
                .06XRF1S+1,.06XRF1n1.4+1,.06XRF1K+1,.06XRF1n2.4+1
   X            .01+1!,.01XRF1S+1,.01XRF1K+1,.03XRF1S+1*,.03XRF1n1.4+1,.03XRF2S+1*,.03XRF2n1.4+1,.03XRF3S+1*,.03XRF3n1.4+1
                .03XRF4S+1*,.03XRF4n1.4+1,.04XRF1S+1*,.04XRF1n1.4+1,.06+1!,.06XRF1S+1*,.06XRF1n1.4+1,.06XRF1K+1*,.06XRF1n2.4+1
                .08+1!,1+1!,2+1!
   Y            ID.05+1*,.03XRF1S+1*!,.03XRF2S+1!,.03XRF3S+1!,.03XRF4S+1!,.03XRF4n1.4+1*,.04XRF1S+1!,.06XRF1S+1!,.06XRF1K+1!
   Y(0          .03XRF1S+1*,.03XRF2S+1*,.03XRF3S+1*,.03XRF4S+1*,.04XRF1S+1*,.06XRF1S+1*
   Y(1          .03XRF1S+1*,.03XRF2S+1*,.03XRF3S+1*,.03XRF4S+1*,.04XRF1S+1*,.06XRF1S+1*,.06XRF1K+1*

Global Variables  ( * Changed  ! Killed)
   ^DD(                .03XRF1n1.4+1,.03XRF2n1.4+1,.03XRF3n1.4+1,.03XRF4n1.4+1,.04XRF1n1.4+1,.06XRF1n1.4+1,.06XRF1n2.4+1
   ^DD(1               ID.05+1
   ^DD(364.5           .03XRF1S+1,.03XRF2S+1,.03XRF3S+1,.03XRF4S+1,.04XRF1S+1,.06XRF1S+1,.06XRF1K+1
   ^DIC(               ID.05+1
   ^IBA(364.5          .01XRF1S+1*,.01XRF1K+1!,.03XRF1S+1,.03XRF1n1.4+1,.03XRF2S+1,.03XRF2n1.4+1,.03XRF3S+1,.03XRF3n1.4+1
                       .03XRF4S+1,.03XRF4n1.4+1,.04XRF1S+1,.04XRF1n1.4+1,.06+1,.06XRF1S+1,.06XRF1n1.4+1,.06XRF1K+1,.06XRF1n2.4+1

Naked Globals
   ^(0          ID.05+1,.03XRF1S+1,.03XRF1n1.4+1*,.03XRF2S+1,.03XRF2n1.4+1*,.03XRF3S+1,.03XRF3n1.4+1*,.04XRF1S+1,.04XRF1n1.4+1*
                .06XRF1S+1,.06XRF1n1.4+1*,.06XRF1K+1,.06XRF1n2.4+1*
   ^(1          .03XRF4S+1,.03XRF4n1.4+1*

Cache Objects
   NONE

Marked Items
   NONE

Label References
   NONE

External References
   ^DICR               .03XRF1n1.4+1,.03XRF2n1.4+1,.03XRF3n1.4+1,.03XRF4n1.4+1,.04XRF1n1.4+1,.06XRF1n1.4+1,.06XRF1n2.4+1
   ^DIM                1+1
   Y^DIQ               ID.05+1

*****   END   *****


|dd364.5 * *  1 Lines,  92 Bytes, Checksum:                                                           Mar 20, 2019@15:10:13 page 41
              80 bytes in comments
|dd364.53 ;DD of the DESCRIPTION sub-file of the IB DATA ELEMENT DEFINITION (#364.5) file.

*****   INDEX OF |dd364.53   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   NONE

Global Variables  ( * Changed  ! Killed)
   NONE

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   NONE

External References
   NONE

*****   END   *****


|dd364.6 * *  129 Lines,  9540 Bytes, Checksum:                                                       Mar 20, 2019@15:10:13 page 42
              1633 bytes in comments
|dd364.6 ;DD of the IB FORM SKELETON DEFINITION file.
ID.04    ; IDENTIFIER CODE FOR .04
         W "   ",$P(^(0),U,4)
ID.05    ; IDENTIFIER CODE FOR .05
         W "   ",$P(^(0),U,5)
ID.08    ; IDENTIFIER CODE FOR .08
         W "   ",$P(^(0),U,8)
ID.1     ; IDENTIFIER CODE FOR .1
         W "   ",$P(^(0),U,10)
.01      ; BILL FORM
         I $$DUP^IBCEFG0($G(DA),X,1) K X
.01XRF1S ; SET LOGIC FOR 'B' XREF
         S ^IBA(364.6,"B",$E(X,1,30),DA)=""
.01XRF1K ; KILL LOGIC FOR 'B' XREF
         K ^IBA(364.6,"B",$E(X,1,30),DA)
.01XRF2S ; SET LOGIC FOR 'ASEQ' XREF
         N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=$P(Z0,U,4),Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 S ^IBA(364.6,"ASEQ",+X,Z1,Z2,Z
          3,DA)=""
.01XRF2K ; KILL LOGIC FOR 'ASEQ' XREF
         N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=$P(Z0,U,4),Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 K ^IBA(364.6,"ASEQ",+X,Z1,Z2,Z
          3,DA)
.01XRF3S ; SET LOGIC FOR 'APAR' XREF
         N Z0 S Z0=$P($G(^IBA(364.6,DA,0)),U,3) I Z0,Z0'=X S ^IBA(364.6,"APAR",$E(X,1,30),Z0,DA)=""
.01XRF3K ; KILL LOGIC FOR 'APAR' XREF
         N Z0 S Z0=$P($G(^IBA(364.6,DA,0)),U,3) I Z0,Z0'=X K ^IBA(364.6,"APAR",$E(X,1,30),Z0,DA)
.01XRF4S ; SET LOGIC FOR '4' XREF
         X ^DD(364.6,.01,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X
          =$S('$D(D0):"",D0<0:"",1:D0) X ^DD(364.6,.01,1,4,1.4)
.01XRF4n1.3 --
          ; SET LOGIC FOR '4' XREF
         K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.01,1,4,69.2) S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)="B
          ILLING SCREEN" S D0=I(0,0)
.01XRF4n1.4 --
          ; SET LOGIC FOR '4' XREF
         S DIH=$G(^IBA(364.6,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=364.6,DIG=.03 D ^DICR
.01XRF4K ; KILL LOGIC FOR '4' XREF
         X ^DD(364.6,.01,1,4,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" S DI
          H=$G(^IBA(364.6,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=364.6,DIG=.03 D ^DICR
.01XRF4n2.3 --
          ; KILL LOGIC FOR '4' XREF
         K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.01,1,4,79.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102)
          ,$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)="BILLING SCREEN" S D0=I(0,0)
.01XRF4n69.2 --
          ; OVERFLOW LOGIC FOR '4' XREF
         S I(0,0)=$G(D0),D0=Y(0) S:'D0!'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$P($G(^DD(353,2.02,0)),U,3),Y(101)=$S($D(^IBE(353,
          D0,2)):^(2),1:"")
.01XRF4n79.2 --
          ; OVERFLOW LOGIC FOR '4' XREF
         S I(0,0)=$G(D0),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'D0!'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$P
          ($G(^DD(353,2.02,0)),U,3)
.03      ; ASSOCIATED FORM DEFINITION
         Q
.03XRF1S ; SET LOGIC FOR 'APAR1' XREF
         N Z0 S Z0=+$G(^IBA(364.6,DA,0)) I Z0,Z0'=X S ^IBA(364.6,"APAR",Z0,$E(X,1,30),DA)=""
.03XRF1K ; KILL LOGIC FOR 'APAR1' XREF
         N Z0 S Z0=+$G(^IBA(364.6,DA,0)) I Z0,Z0'=X K ^IBA(364.6,"APAR",Z0,$E(X,1,30),DA)
.03XRF2S ; SET LOGIC FOR '2' XREF
         X ^DD(364.6,.03,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^D
          D(364.6,.03,1,2,1.4)
.03XRF2n1.3 --
          ; SET LOGIC FOR '2' XREF
         K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,2,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102)
          ,$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
.03XRF2n1.4 --
          ; SET LOGIC FOR '2' XREF
         S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=364.6,DIG=.04 D ^DICR
.03XRF2K ; KILL LOGIC FOR '2' XREF
         Q
.03XRF2n69.2 --
          ; OVERFLOW LOGIC FOR '2' XREF
         S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$
          C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
.03XRF3S ; SET LOGIC FOR '3' XREF
         X ^DD(364.6,.03,1,3,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^D
          D(364.6,.03,1,3,1.4)
.03XRF3n1.3 --
          ; SET LOGIC FOR '3' XREF
         K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,3,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102)
          ,$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
.03XRF3n1.4 --
          ; SET LOGIC FOR '3' XREF
         S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,5)=DIV,DIH=364.6,DIG=.05 D ^DICR
.03XRF3K ; KILL LOGIC FOR '3' XREF
         Q
.03XRF3n69.2 --
          ; OVERFLOW LOGIC FOR '3' XREF
         S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$
          C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
.03XRF4S ; SET LOGIC FOR '4' XREF
         X ^DD(364.6,.03,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" X ^D
          D(364.6,.03,1,4,1.4)
.03XRF4n1.3 --
          ; SET LOGIC FOR '4' XREF
         K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,4,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102)
          ,$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
.03XRF4n1.4 --
          ; SET LOGIC FOR '4' XREF
         S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,8)=DIV,DIH=364.6,DIG=.08 D ^DICR
.03XRF4K ; KILL LOGIC FOR '4' XREF
         Q
.03XRF4n69.2 --
          ; OVERFLOW LOGIC FOR '4' XREF
         S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$
          C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
.03XRF5S ; SET LOGIC FOR '5' XREF
         X ^DD(364.6,.03,1,5,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,9),X=X S DIU=X K Y S X="" X ^D
          D(364.6,.03,1,5,1.4)
.03XRF5n1.3 --
          ; SET LOGIC FOR '5' XREF
         K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,5,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102)
          ,$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
.03XRF5n1.4 --
          ; SET LOGIC FOR '5' XREF
         S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,9)=DIV,DIH=364.6,DIG=.09 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
.03XRF5K ; KILL LOGIC FOR '5' XREF
         Q
.03XRF5n69.2 --
          ; OVERFLOW LOGIC FOR '5' XREF
         S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$
          C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
.03XRF6S ; SET LOGIC FOR '6' XREF
         X ^DD(364.6,.03,1,6,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^D
          D(364.6,.03,1,6,1.4)
.03XRF6n1.3 --
          ; SET LOGIC FOR '6' XREF
         K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,6,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102)
          ,$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
.03XRF6n1.4 --
          ; SET LOGIC FOR '6' XREF
         S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.6,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
.03XRF6K ; KILL LOGIC FOR '6' XREF
         Q
.03XRF6n69.2 --
          ; OVERFLOW LOGIC FOR '6' XREF
         S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$
          C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
.03XRF7S ; SET LOGIC FOR '7' XREF
         K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X="L" X 
          ^DD(364.6,.03,1,7,1.4)
.03XRF7n1.4 --
          ; SET LOGIC FOR '7' XREF
         S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,2)=DIV,DIH=364.6,DIG=.02 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
.03XRF7K ; KILL LOGIC FOR '7' XREF
         Q
.04      ; PAGE OR SEQUENCE
         K:$L(X)>20!($L(X)<1) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DU
          P^IBCEFG0(DA,X,2) K X
.04XRF1S ; SET LOGIC FOR 'ASEQ1' XREF
         N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 S ^IBA(364.6,"ASEQ",Z1,$E(X,1,30),Z2,
          Z3,DA)=""
.04XRF1K ; KILL LOGIC FOR 'ASEQ1' XREF
         N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 K ^IBA(364.6,"ASEQ",Z1,$E(X,1,30),Z2,
          Z3,DA)
.05      ; FIRST LINE NUMBER
         K:+X'=X!(X>9999)!(X<0)!(X?.E1"."1N.N) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,
          DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,3) K X
.05XRF1S ; SET LOGIC FOR 'ASEQ2' XREF
         N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,8) I Z1,Z2'="",Z3 S ^IBA(364.6,"ASEQ",Z1,Z2,$E(X,1,
          30),Z3,DA)=""
.05XRF1K ; KILL LOGIC FOR 'ASEQ2' XREF
         N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,8) I Z1,Z2'="",Z3 K ^IBA(364.6,"ASEQ",Z1,Z2,$E(X,1,
          30),Z3,DA)
.06      ; MAX NUMBER LINES
         K:+X'=X!(X>999)!(X<0)!(X?.E1"."1N.N) X I $D(X),$P($G(^IBA(364.6,DA,0)),U,3) K X
.08      ; STARTING COLUMN OR PIECE
         K:+X'=X!(X>999)!(X<0)!($S(X[".":X'?.E1"."1.2N,1:0)) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P(
          $G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,4) K X
.08XRF1S ; SET LOGIC FOR 'ASEQ3' XREF
         N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,5) I Z1,Z2'="",Z3 S ^IBA(364.6,"ASEQ",Z1,Z2,Z3,$E(X
          ,1,30),DA)=""
.08XRF1K ; KILL LOGIC FOR 'ASEQ3' XREF
         N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,5) I Z1,Z2'="",Z3 K ^IBA(364.6,"ASEQ",Z1,Z2,Z3,$E(X
          ,1,30),DA)
.08XRF2S ; SET LOGIC FOR '2' XREF
         K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0)["." I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,11)
          ,X=X S DIU=X K Y S X=DIV S X=1 X ^DD(364.6,.08,1,2,1.4)
.08XRF2n1.4 --
          ; SET LOGIC FOR '2' XREF
         S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,11)=DIV,DIH=364.6,DIG=.11 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
.08XRF2K ; KILL LOGIC FOR '2' XREF
         Q
.09      ; LENGTH
         K:+X'=X!(X>250)!(X<1)!(X?.E1"."1N.N) X I $D(X),$P($G(^IBA(364.6,DA,0)),U,3),$P($G(^IBE(353,+^IBA(364.6,DA,0),2)),U,2)'="S" 
          K X
.1       ; SHORT DESCRIPTION
         K:$L(X)>40!($L(X)<1) X

*****   INDEX OF |dd364.6   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
>> D0           .01XRF4S+1,.01XRF4n1.3+1*,.01XRF4K+1,.01XRF4n2.3+1*,.01XRF4n69.2+1*,.01XRF4n79.2+1*,.03XRF2S+1,.03XRF2n1.3+1*
                .03XRF2n69.2+1*,.03XRF3S+1,.03XRF3n1.3+1*,.03XRF3n69.2+1*,.03XRF4S+1,.03XRF4n1.3+1*,.03XRF4n69.2+1*,.03XRF5S+1
                .03XRF5n1.3+1*
                .03XRF5n69.2+1*,.03XRF6S+1,.03XRF6n1.3+1*,.03XRF6n69.2+1*,.03XRF7S+1*,.08XRF2S+1*
>> DA           .01+1,.01XRF1S+1,.01XRF1K+1,.01XRF2S+1,.01XRF2K+1,.01XRF3S+1,.01XRF3K+1,.01XRF4n1.3+1,.01XRF4n2.3+1,.03XRF1S+1
                .03XRF1K+1,.03XRF2n1.3+1,.03XRF3n1.3+1,.03XRF4n1.3+1,.03XRF5n1.3+1,.03XRF6n1.3+1,.03XRF7S+1,.04+1,.04XRF1S+1
                .04XRF1K+1
                .05+1,.05XRF1S+1,.05XRF1K+1,.06+1,.08+1,.08XRF1S+1,.08XRF1K+1,.08XRF2S+1,.09+1
>> DIG          .01XRF4n1.4+1*,.01XRF4K+1*,.03XRF2n1.4+1*,.03XRF3n1.4+1*,.03XRF4n1.4+1*,.03XRF5n1.4+1*,.03XRF6n1.4+1*
                .03XRF7n1.4+1*,.08XRF2n1.4+1*
>> DIH          .01XRF4n1.4+1*,.01XRF4K+1*,.03XRF2n1.4+1*,.03XRF3n1.4+1*,.03XRF4n1.4+1*,.03XRF5n1.4+1*,.03XRF6n1.4+1*
                .03XRF7n1.4+1*,.08XRF2n1.4+1*
>> DIU          .01XRF4S+1*,.01XRF4K+1*,.03XRF2S+1*,.03XRF3S+1*,.03XRF4S+1*,.03XRF5S+1*,.03XRF6S+1*,.03XRF7S+1*,.08XRF2S+1*
   DIV          .01XRF4S+1,.01XRF4n1.3+1!*,.01XRF4n1.4+1*,.01XRF4K+1*,.01XRF4n2.3+1!*,.03XRF2S+1,.03XRF2n1.3+1!*,.03XRF2n1.4+1*
                .03XRF3S+1,.03XRF3n1.3+1!*,.03XRF3n1.4+1*,.03XRF4S+1,.03XRF4n1.3+1!*,.03XRF4n1.4+1*,.03XRF5S+1,.03XRF5n1.3+1!*
                .03XRF5n1.4+1*
                .03XRF6S+1,.03XRF6n1.3+1!*,.03XRF6n1.4+1*,.03XRF7S+1!*,.03XRF7n1.4+1*,.08XRF2S+1!*,.08XRF2n1.4+1*
   DIV(0        .01XRF4n1.3+1*,.01XRF4n1.4+1,.01XRF4K+1,.01XRF4n2.3+1*,.03XRF2n1.3+1*,.03XRF2n1.4+1,.03XRF3n1.3+1*,.03XRF3n1.4+1
                .03XRF4n1.3+1*,.03XRF4n1.4+1,.03XRF5n1.3+1*,.03XRF5n1.4+1,.03XRF6n1.3+1*,.03XRF6n1.4+1,.03XRF7S+1*,.03XRF7n1.4+1
                .08XRF2S+1*
                .08XRF2n1.4+1
>> I(0          .01XRF4n1.3+1,.01XRF4n2.3+1,.01XRF4n69.2+1*,.01XRF4n79.2+1*,.03XRF2n1.3+1,.03XRF2n69.2+1*,.03XRF3n1.3+1
                .03XRF3n69.2+1*,.03XRF4n1.3+1,.03XRF4n69.2+1*,.03XRF5n1.3+1,.03XRF5n69.2+1*,.03XRF6n1.3+1,.03XRF6n69.2+1*
   U            ID.04+1,ID.05+1,ID.08+1,ID.1+1,.01XRF2S+1,.01XRF2K+1,.01XRF3S+1,.01XRF3K+1,.01XRF4S+1,.01XRF4n1.3+1,.01XRF4n1.4+1
                .01XRF4K+1,.01XRF4n2.3+1,.01XRF4n69.2+1,.01XRF4n79.2+1,.03XRF2S+1,.03XRF2n1.3+1,.03XRF2n1.4+1,.03XRF2n69.2+1
                .03XRF3S+1
                .03XRF3n1.3+1,.03XRF3n1.4+1,.03XRF3n69.2+1,.03XRF4S+1,.03XRF4n1.3+1,.03XRF4n1.4+1,.03XRF4n69.2+1,.03XRF5S+1
                .03XRF5n1.3+1,.03XRF5n1.4+1,.03XRF5n69.2+1,.03XRF6S+1,.03XRF6n1.3+1,.03XRF6n1.4+1,.03XRF6n69.2+1,.03XRF7S+1
                .03XRF7n1.4+1,.04+1
                .04XRF1S+1,.04XRF1K+1,.05+1,.05XRF1S+1,.05XRF1K+1,.06+1,.08+1,.08XRF1S+1,.08XRF1K+1,.08XRF2S+1,.08XRF2n1.4+1,.09+1
   X            .01+1!,.01XRF1S+1,.01XRF1K+1,.01XRF2S+1,.01XRF2K+1,.01XRF3S+1,.01XRF3K+1,.01XRF4S+1*,.01XRF4n1.3+1*,.01XRF4n1.4+1
                .01XRF4K+1*,.01XRF4n2.3+1*,.03XRF1S+1,.03XRF1K+1,.03XRF2S+1*,.03XRF2n1.3+1*,.03XRF2n1.4+1,.03XRF3S+1*
                .03XRF3n1.3+1*
                .03XRF3n1.4+1,.03XRF4S+1*,.03XRF4n1.3+1*,.03XRF4n1.4+1,.03XRF5S+1*,.03XRF5n1.3+1*,.03XRF5n1.4+1,.03XRF6S+1*
                .03XRF6n1.3+1*,.03XRF6n1.4+1,.03XRF7S+1*,.03XRF7n1.4+1,.04+1!,.04XRF1S+1,.04XRF1K+1,.05+1!,.05XRF1S+1,.05XRF1K+1
                .06+1!,.08+1!
                .08XRF1S+1,.08XRF1K+1,.08XRF2S+1*,.08XRF2n1.4+1,.09+1!,.1+1!
   Y            .01XRF4S+1!,.01XRF4K+1!,.03XRF2S+1!,.03XRF3S+1!,.03XRF4S+1!,.03XRF5S+1!,.03XRF6S+1!,.03XRF7S+1!,.08XRF2S+1!
   Y(0          .01XRF4n1.3+1*,.01XRF4n2.3+1*,.01XRF4n69.2+1,.03XRF2n1.3+1*,.03XRF3n1.3+1*,.03XRF4n1.3+1*,.03XRF5n1.3+1*
                .03XRF6n1.3+1*,.08XRF2S+1*
   Y(1          .01XRF4S+1*,.01XRF4K+1*,.01XRF4n79.2+1*,.03XRF2S+1*,.03XRF2n69.2+1*,.03XRF3S+1*,.03XRF3n69.2+1*,.03XRF4S+1*
                .03XRF4n69.2+1*,.03XRF5S+1*,.03XRF5n69.2+1*,.03XRF6S+1*,.03XRF6n69.2+1*,.03XRF7S+1*,.08XRF2S+1*
   Y(101        .01XRF4n1.3+1,.01XRF4n2.3+1*,.01XRF4n69.2+1*,.03XRF2n1.3+1*,.03XRF3n1.3+1*,.03XRF4n1.3+1*,.03XRF5n1.3+1*
                .03XRF6n1.3+1*
   Y(102        .01XRF4n1.3+1,.01XRF4n2.3+1,.01XRF4n69.2+1*,.01XRF4n79.2+1*,.03XRF2n1.3+1,.03XRF2n69.2+1*,.03XRF3n1.3+1
                .03XRF3n69.2+1*,.03XRF4n1.3+1,.03XRF4n69.2+1*,.03XRF5n1.3+1,.03XRF5n69.2+1*,.03XRF6n1.3+1,.03XRF6n69.2+1*
   Z0           .01XRF2S+1~*,.01XRF2K+1~*,.01XRF3S+1~*,.01XRF3K+1~*,.03XRF1S+1~*,.03XRF1K+1~*,.04XRF1S+1~*,.04XRF1K+1~*
                .05XRF1S+1~*,.05XRF1K+1~*,.08XRF1S+1~*,.08XRF1K+1~*
   Z1           .01XRF2S+1~*,.01XRF2K+1~*,.04XRF1S+1~*,.04XRF1K+1~*,.05XRF1S+1~*,.05XRF1K+1~*,.08XRF1S+1~*,.08XRF1K+1~*
   Z2           .01XRF2S+1~*,.01XRF2K+1~*,.04XRF1S+1~*,.04XRF1K+1~*,.05XRF1S+1~*,.05XRF1K+1~*,.08XRF1S+1~*,.08XRF1K+1~*
   Z3           .01XRF2S+1~*,.01XRF2K+1~*,.04XRF1S+1~*,.04XRF1K+1~*,.05XRF1S+1~*,.05XRF1K+1~*,.08XRF1S+1~*,.08XRF1K+1~*

Global Variables  ( * Changed  ! Killed)
   ^DD(                .03XRF5n1.4+1,.03XRF6n1.4+1,.03XRF7n1.4+1,.08XRF2n1.4+1
   ^DD(353             .01XRF4n69.2+1,.01XRF4n79.2+1,.03XRF2n69.2+1,.03XRF3n69.2+1,.03XRF4n69.2+1,.03XRF5n69.2+1,.03XRF6n69.2+1
   ^DD(364.6           .01XRF4S+1,.01XRF4n1.3+1,.01XRF4K+1,.01XRF4n2.3+1,.03XRF2S+1,.03XRF2n1.3+1,.03XRF3S+1,.03XRF3n1.3+1
                       .03XRF4S+1,.03XRF4n1.3+1,.03XRF5S+1,.03XRF5n1.3+1,.03XRF6S+1,.03XRF6n1.3+1,.03XRF7S+1,.08XRF2S+1
   ^IBA(364.6          .01XRF1S+1*,.01XRF1K+1!,.01XRF2S+1*,.01XRF2K+1!,.01XRF3S+1*,.01XRF3K+1!,.01XRF4S+1,.01XRF4n1.4+1,.01XRF4K+1
                       .01XRF4n79.2+1,.03XRF1S+1*,.03XRF1K+1!,.03XRF2S+1,.03XRF2n1.4+1,.03XRF2n69.2+1,.03XRF3S+1,.03XRF3n1.4+1
                       .03XRF3n69.2+1,.03XRF4S+1
                       .03XRF4n1.4+1,.03XRF4n69.2+1,.03XRF5S+1,.03XRF5n1.4+1,.03XRF5n69.2+1,.03XRF6S+1,.03XRF6n1.4+1,.03XRF6n69.2+1
                       .03XRF7S+1,.03XRF7n1.4+1,.04+1,.04XRF1S+1*,.04XRF1K+1!,.05+1,.05XRF1S+1*,.05XRF1K+1!,.06+1,.08+1,.08XRF1S+1*
                       .08XRF1K+1!,.08XRF2S+1
                       .08XRF2n1.4+1,.09+1
   ^IBE(353            .01XRF4n2.3+1,.01XRF4n69.2+1,.01XRF4n79.2+1,.03XRF2n1.3+1,.03XRF2n69.2+1,.03XRF3n1.3+1,.03XRF3n69.2+1
                       .03XRF4n1.3+1,.03XRF4n69.2+1,.03XRF5n1.3+1,.03XRF5n69.2+1,.03XRF6n1.3+1,.03XRF6n69.2+1,.04+1,.05+1,.08+1
                       .09+1

Naked Globals
   ^(0          ID.04+1,ID.05+1,ID.08+1,ID.1+1,.01XRF4S+1,.01XRF4n1.4+1*,.01XRF4K+1*,.01XRF4n79.2+1,.03XRF2S+1,.03XRF2n1.4+1*
                .03XRF2n69.2+1,.03XRF3S+1,.03XRF3n1.4+1*,.03XRF3n69.2+1,.03XRF4S+1,.03XRF4n1.4+1*,.03XRF4n69.2+1,.03XRF5S+1
                .03XRF5n1.4+1*
                .03XRF5n69.2+1,.03XRF6S+1,.03XRF6n1.4+1*,.03XRF6n69.2+1,.03XRF7S+1,.03XRF7n1.4+1*,.08XRF2S+1,.08XRF2n1.4+1*
   ^(2          .01XRF4n2.3+1,.01XRF4n69.2+1,.03XRF2n1.3+1,.03XRF3n1.3+1,.03XRF4n1.3+1,.03XRF5n1.3+1,.03XRF6n1.3+1

Cache Objects
   NONE

Marked Items
   NONE

Label References
   NONE

External References
   ^DICR               .01XRF4n1.4+1,.01XRF4K+1,.03XRF2n1.4+1,.03XRF3n1.4+1,.03XRF4n1.4+1,.03XRF5n1.4+1,.03XRF6n1.4+1,.03XRF7n1.4+1
                       .08XRF2n1.4+1
   $$DUP^IBCEFG0       .01+1,.04+1,.05+1,.08+1

*****   END   *****


|dd364.7 * *  51 Lines,  3690 Bytes, Checksum:                                                        Mar 20, 2019@15:10:13 page 43
              672 bytes in comments
|dd364.7 ;DD of the IB FORM FIELD CONTENT file.
ID.03    ; IDENTIFIER CODE FOR .03
         S %I=Y,Y=$S('$D(^(0)):"",$D(^IBA(364.5,+$P(^(0),U,3),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(364.5,.01,0),U,2) D Y^DIQ:Y]"" W "  
           ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
.01      ; FORM FIELD REFERENCE
         Q
.01XRF1S ; SET LOGIC FOR 'B' XREF
         S ^IBA(364.7,"B",$E(X,1,30),DA)=""
.01XRF1K ; KILL LOGIC FOR 'B' XREF
         K ^IBA(364.7,"B",$E(X,1,30),DA)
.01XRF2S ; SET LOGIC FOR 'ATYPE' XREF
         N Z1,Z0 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,6) I Z1'="",$P($G(^IBA(364.6,+X,0)),U,3),'$P(Z0,U,5) S ^IBA(364.7,"ATYPE",$P(^
          IBA(364.6,+X,0),U,3),Z1,DA)=""
.01XRF2K ; KILL LOGIC FOR 'ATYPE' XREF
         N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,6) I Z1'="",$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"ATYPE",$P(^IBA(364.6,+X
          ,0),U,3),Z1,DA)
.01XRF3S ; SET LOGIC FOR 'AINTYP' XREF
         N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5),Z2=$P(Z0,U,6) I Z1,Z2'="",$P($G(^IBA(364.6,+X,0)),U,3) S ^IBA(364.7,"AIN
          TYP",$P(^IBA(364.6,+X,0),U,3),Z1,Z2,DA)=""
.01XRF3K ; KILL LOGIC FOR 'AINTYP' XREF
         N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5),Z2=$P(Z0,U,6) I Z1,Z2'="",$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"AIN
          TYP",$P(^IBA(364.6,+X,0),U,3),Z1,Z2,DA)
.01XRF4S ; SET LOGIC FOR 'AINS' XREF
         N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5) I Z1,$P($G(^IBA(364.6,+X,0)),U,3),$P(Z0,U,6)="" S ^IBA(364.7,"AINS",$P(^IBA
          (364.6,+X,0),U,3),Z1,DA)=""
.01XRF4K ; KILL LOGIC FOR 'AINS' XREF
         N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5) I Z1,$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"AINS",$P(^IBA(364.6,+X,0),U
          ,3),Z1,DA)
.03      ; DATA ELEMENT
         Q
.03XRF1S ; SET LOGIC FOR 'C' XREF
         S ^IBA(364.7,"C",$E(X,1,30),DA)=""
.03XRF1K ; KILL LOGIC FOR 'C' XREF
         K ^IBA(364.7,"C",$E(X,1,30),DA)
.04      ; SCREEN PROMPT
         K:$L(X)>70!($L(X)<1) X I $D(X),$P($G(^IBE(353,+$G(^IBA(364.6,+$G(^IBA(364.7,DA,0)),0)),2)),U,2)'="S" K X
.05      ; INSURANCE COMPANY
         Q
.05XRF1S ; SET LOGIC FOR 'AINS1' XREF
         N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3) I Z1,$P(Z0,U,6)="" S ^IBA(364.7,"AINS",Z1,$E(X,1,30),DA)
          =""
.05XRF1K ; KILL LOGIC FOR 'AINS1' XREF
         N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) K ^IBA(364.7,"AINS",Z1,$E(X,1,30),DA) I
           Z2'="",$D(^IBA(364.7,"AINTYP",Z1,X,Z2,DA)) S ^IBA(364.7,"ATYPE",Z1,Z2,DA)=""
.05XRF2S ; SET LOGIC FOR 'AINTYP1' XREF
         N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) I Z1,Z2'="" S ^IBA(364.7,"AINTYP",Z1,$
          E(X,1,30),Z2,DA)="" K ^IBA(364.7,"ATYPE",Z1,Z2,DA),^IBA(364.7,"AINS",Z1,X,DA)
.05XRF2K ; KILL LOGIC FOR 'AINTYP1' XREF
         N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) K:Z1&(Z2'="") ^IBA(364.7,"AINTYP",Z1,$
          E(X,1,30),Z2,DA)
.06XRF1S ; SET LOGIC FOR 'ATYPE1' XREF
         N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3) I Z1,'$P(Z0,U,5) S ^IBA(364.7,"ATYPE",Z1,$E(X,1,30),DA)=
          ""
.06XRF1K ; KILL LOGIC FOR 'ATYPE1' XREF
         N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) I Z1 K ^IBA(364.7,"ATYPE",Z1,$E(X,1,30)
          ,DA) I Z2,$D(^IBA(364.7,"AINTYP",Z1,Z2,X,DA)) S ^IBA(364.7,"AINS",Z1,Z2,DA)=""
.06XRF2S ; SET LOGIC FOR 'AINTYP2' XREF
         N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) I Z1,Z2 K:'$D(^IBA(364.7,"AINTYP",Z1,Z
          2,X,DA)) ^IBA(364.7,"AINS",Z1,Z2,DA) S ^IBA(364.7,"AINTYP",Z1,Z2,$E(X,1,30),DA)=""
.06XRF2K ; KILL LOGIC FOR 'AINTYP2' XREF
         N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) K:Z1&Z2 ^IBA(364.7,"AINTYP",Z1,Z2,$E(X
          ,1,30),DA)
.1       ; EDIT GROUP NUMBER
         K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
1        ; FORMAT CODE
         K:$L(X)>245 X D:$D(X) ^DIM

*****   INDEX OF |dd364.7   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   %I           ID.03+1*!
>> C            ID.03+1*
>> DA           .01XRF1S+1,.01XRF1K+1,.01XRF2S+1,.01XRF2K+1,.01XRF3S+1,.01XRF3K+1,.01XRF4S+1,.01XRF4K+1,.03XRF1S+1,.03XRF1K+1,.04+1
                .05XRF1S+1,.05XRF1K+1,.05XRF2S+1,.05XRF2K+1,.06XRF1S+1,.06XRF1K+1,.06XRF2S+1,.06XRF2K+1
>> DIC          ID.03+1
   U            ID.03+1,.01XRF2S+1,.01XRF2K+1,.01XRF3S+1,.01XRF3K+1,.01XRF4S+1,.01XRF4K+1,.04+1,.05XRF1S+1,.05XRF1K+1,.05XRF2S+1
                .05XRF2K+1,.06XRF1S+1,.06XRF1K+1,.06XRF2S+1,.06XRF2K+1
   X            .01XRF1S+1,.01XRF1K+1,.01XRF2S+1,.01XRF2K+1,.01XRF3S+1,.01XRF3K+1,.01XRF4S+1,.01XRF4K+1,.03XRF1S+1,.03XRF1K+1
                .04+1!,.05XRF1S+1,.05XRF1K+1,.05XRF2S+1,.05XRF2K+1,.06XRF1S+1,.06XRF1K+1,.06XRF2S+1,.06XRF2K+1,.1+1!,1+1!
>> Y            ID.03+1*
   Z0           .01XRF2S+1~*,.01XRF2K+1~*,.01XRF3S+1~*,.01XRF3K+1~*,.01XRF4S+1~*,.01XRF4K+1~*,.05XRF1S+1~*,.05XRF1K+1~*
                .05XRF2S+1~*,.05XRF2K+1~*,.06XRF1S+1~*,.06XRF1K+1~*,.06XRF2S+1~*,.06XRF2K+1~*
   Z1           .01XRF2S+1~*,.01XRF2K+1~*,.01XRF3S+1~*,.01XRF3K+1~*,.01XRF4S+1~*,.01XRF4K+1~*,.05XRF1S+1~*,.05XRF1K+1~*
                .05XRF2S+1~*,.05XRF2K+1~*,.06XRF1S+1~*,.06XRF1K+1~*,.06XRF2S+1~*,.06XRF2K+1~*
   Z2           .01XRF3S+1~*,.01XRF3K+1~*,.05XRF1K+1~*,.05XRF2S+1~*,.05XRF2K+1~*,.06XRF1K+1~*,.06XRF2S+1~*,.06XRF2K+1~*

Global Variables  ( * Changed  ! Killed)
   ^DD(364.5           ID.03+1
   ^IBA(364.5          ID.03+1
   ^IBA(364.6          .01XRF2S+1,.01XRF2K+1,.01XRF3S+1,.01XRF3K+1,.01XRF4S+1,.01XRF4K+1,.04+1,.05XRF1S+1,.05XRF1K+1,.05XRF2S+1
                       .05XRF2K+1,.06XRF1S+1,.06XRF1K+1,.06XRF2S+1,.06XRF2K+1
   ^IBA(364.7          .01XRF1S+1*,.01XRF1K+1!,.01XRF2S+1*,.01XRF2K+1!,.01XRF3S+1*,.01XRF3K+1!,.01XRF4S+1*,.01XRF4K+1!,.03XRF1S+1*
                       .03XRF1K+1!,.04+1,.05XRF1S+1*,.05XRF1K+1!*,.05XRF2S+1*!,.05XRF2K+1!,.06XRF1S+1*,.06XRF1K+1!*,.06XRF2S+1!*
                       .06XRF2K+1!
   ^IBE(353            .04+1

Naked Globals
   ^(0          ID.03+1

Cache Objects
   NONE

Marked Items
   NONE

Label References
   NONE

External References
   ^DIM                1+1
   Y^DIQ               ID.03+1

*****   END   *****


|dd364.7 * *  1 Lines,  99 Bytes, Checksum:                                                           Mar 20, 2019@15:10:13 page 44
              87 bytes in comments
|dd364.73 ;DD of the FORMAT CODE DESCRIPTION sub-file of the IB FORM FIELD CONTENT (#364.7) file.

*****   INDEX OF |dd364.73   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
   NONE

Global Variables  ( * Changed  ! Killed)
   NONE

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   NONE

External References
   NONE

*****   END   *****


|dd399.0 * *  57 Lines,  1866 Bytes, Checksum:                                                        Mar 20, 2019@15:10:13 page 45
              769 bytes in comments
|dd399.0304 --
          ;Partial DD of the PROCEDURES file.
24       ; CMN FORM TYPE
         Q
24.02    ; CMN PATIENT HEIGHT (IN)
         K:+X'=X!(X<1)!(X?.E1"."1N.N) X
24.03    ; CMN PATIENT WEIGHT (LBS)
         K:+X'=X!(X<1)!(X?.E1"."1N.N) X
24.04    ; CMN MONTHS DME EQUIP NEEDED
         K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
24.05    ; CMN DATE THERAPY STARTED
         S %DT="EX" D ^%DT S X=Y K:Y<1 X
24.06    ; CMN LAST CERTIFICATION DATE
         S %DT="EX" D ^%DT S X=Y K:Y<1 X
24.07    ; CMN RECERTIFICATION/REVISN DT
         S %DT="EX" D ^%DT S X=Y K:Y<1 X
24.1     ; CMN ABG PO2 (MMHG)
         K:+X'=X!(X<1)!(X?.E1"."1N.N) X
24.102   ; CMN O2 SATURATION %
         K:+X'=X!(X<1)!(X?.E1"."1N.N) X
24.103   ; CMN DT LAST ABG PO2 AND O2 SAT
         S %DT="EX" D ^%DT S X=Y K:Y<1 X
24.11    ; CMN HIGHEST O2 FLOW RATE
         K:$L(X)>50!($L(X)<1) X
24.111   ; CMN LAST 4 LPM ABG PO2 (MMHG)
         K:+X'=X!(X<1)!(X?.E1"."1N.N) X
24.113   ; CMN LAST 4 LPM O2 SATURATION %
         K:+X'=X!(X<1)!(X?.E1"."1N.N) X
24.114   ; CMN DATE OF LAST 4 LPM TESTS
         S %DT="EX" D ^%DT S X=Y K:Y<1 X
24.115   ; CMN EQUIPMENT/COST DESCRIPTION
         K:$L(X)>50!($L(X)<1) X
24.203   ; CMN PROCEDURE A CALORIES
         K:+X'=X!(X<1)!(X?.E1"."1N.N) X
24.204   ; CMN PROCEDURE A
         Q
24.206   ; CMN DAYS PER WEEK ADMINISTERED
         K:+X'=X!(X>7)!(X<1)!(X?.E1"."1N.N) X
24.208   ; CMN AMINO ACID (ML/DAY)
         K:+X'=X!(X<1)!(X?.E1"."1N.N) X
24.209   ; CMN AMINO ACID CONCENTRATION %
         K:+X'=X!(X<1)!(X?.E1"."1N.N) X
24.21    ; CMN AMINO ACID PROTEIN (GM/DY)
         K:+X'=X!(X<1)!(X?.E1"."1N.N) X
24.211   ; CMN DEXTROSE (ML/DAY)
         K:+X'=X!(X<1)!(X?.E1"."1N.N) X
24.212   ; CMN DEXTROSE CONCENTRATE %
         K:+X'=X!(X<1)!(X?.E1"."1N.N) X
24.213   ; CMN LIPIDS (ML/DAY)
         K:+X'=X!(X<1)!(X?.E1"."1N.N) X
24.215   ; CMN LIPIDS (DAYS/WEEK)
         K:+X'=X!(X>7)!(X<1)!(X?.E1"."1N.N) X
24.216   ; CMN LIPIDS CONCENTRATE %
         K:+X'=X!(X<1)!(X?.E1"."1N.N) X
24.218   ; CMN PROCEDURE B CALORIES
         K:+X'=X!(X<1)!(X?.E1"."1N.N) X
24.219   ; CMN PROCEDURE B
         Q

*****   INDEX OF |dd399.0304   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
>> %DT          24.05+1*,24.06+1*,24.07+1*,24.103+1*,24.114+1*
   X            24.02+1!,24.03+1!,24.04+1!,24.05+1*!,24.06+1*!,24.07+1*!,24.1+1!,24.102+1!,24.103+1*!,24.11+1!,24.111+1!,24.113+1!
                24.114+1*!,24.115+1!,24.203+1!,24.206+1!,24.208+1!,24.209+1!,24.21+1!,24.211+1!,24.212+1!,24.213+1!,24.215+1!
                24.216+1!
                24.218+1!
>> Y            24.05+1,24.06+1,24.07+1,24.103+1,24.114+1

Global Variables  ( * Changed  ! Killed)
   NONE

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   NONE

External References
   ^%DT                24.05+1,24.06+1,24.07+1,24.103+1,24.114+1

*****   END   *****


|dd399.6 * *  13 Lines,  358 Bytes, Checksum:                                                         Mar 20, 2019@15:10:13 page 46
              125 bytes in comments
|dd399.6 ;DD of the CMN FORM TYPES file.
.01      ; NAME
         K:$L(X)>50!($L(X)<3)!'(X'?1P.E) X
.01XRF1S ; SET LOGIC FOR 'B' XREF
         S ^IBE(399.6,"B",$E(X,1,30),DA)=""
.01XRF1K ; KILL LOGIC FOR 'B' XREF
         K ^IBE(399.6,"B",$E(X,1,30),DA)
1        ; DESCRIPTION
         K:$L(X)>80!($L(X)<1) X
2        ; INDUSTRY CODE
         K:$L(X)>15!($L(X)<1) X
3        ; DATA NODE
         K:$L(X)>20!($L(X)<7) X

*****   INDEX OF |dd399.6   *****


Local Variables      Line Occurrences   ( >> not killed explicitly)
                                        ( * Changed  ! Killed  ~ Newed)
>> DA           .01XRF1S+1,.01XRF1K+1
   X            .01+1!,.01XRF1S+1,.01XRF1K+1,1+1!,2+1!,3+1!

Global Variables  ( * Changed  ! Killed)
   ^IBE(399.6          .01XRF1S+1*,.01XRF1K+1!

Naked Globals
   NONE

Cache Objects
   NONE

Marked Items
   NONE

Label References
   NONE

External References
   NONE

*****   END   *****


--- CROSS-REFERENCING ALL ROUTINES ---

*****   Cross Reference of all Routines   *****                                                       Mar 20, 2019@15:10:13 page 47

Local Variables    Routines   ( >> not killed explicitly)
                              ( * Changed  ! Killed  ~ Newed)
   %            IBCCC2!,IBCU7*!
   %DT          IBCCC2!,IBCEU*~,IBCU7*!,|dd399.0304*
   %DT(0        IBCU7*
   %I           |dd364.5*!,|dd364.7*!
   %Y           IBCU7!
>> %ZIS         IBCEFG7*,IBTUBO*
>> %ZIS("A"     IBCEFG7*
>> %ZIS("B"     IBCEFG7*
   A            IBCEF11*~,IBCEF2*~,IBCEF2*,IBCEF31*~,IBCEU1*~
   A1           IBCNSC01*~
   A2           IBCNSC01*~
   A3           IBCNSC01*~
   A4           IBCNSC01*~
   A5           IBCNSC01*~
   A6           IBCNSC01*~
   A7           IBCNSC01*~
   A8           IBCNSC01*~
   ABGMSG       IBCU75*~
   ABGPO2       IBCU75~
   ADDRESS      IBY608PO*~
   ADM          IBTUBOU~
   ALLDIVS      IBJPS4~
   ALLDIVS("DILIST" 
                IBJPS4
   APP          IBCNSC01*~
   APPDATA      IBCNSC01*~
   APPDATA(     IBCNSC01*
   APPNAME      IBCNSC01*~
   ARSTAT       IBCEPTC2*~
   ART          IBCEU3*~
   ARTIEN       IBTUBO*~
   ARTYP        IBTUBO*~
   ATT          IBCEU5*~
   AVGI         IBTUBOU*~
   AVGP         IBTUBOU*~
   AVGS         IBTUBOU*~
   B            IBCEF2*~,IBCEU1*~
   BILL         IBTUBOU~
   BL           IBJPS2~
   BLTYPX       IBCEF2*~
   BPAD1        IBJPS3*~
   BPAD2        IBJPS3*~
   BPCITY       IBJPS3*~
   BPNAME       IBJPS3*~
   BPST         IBJPS3*~
   BPZ          IBJPS3*~
   BPZIP        IBJPS3*~
   BPZZ         IBJPS2~
   C            IBCEF2~,IBCEU1*~,IBTUBO3~,|dd364.5*,|dd364.7*
   CAS          IBCEU1*~
   CERTDT       IBCU75*~
   CERTYP       IBCBB13*~,IBCU75*~
   CERTYP("MSG" IBCU75*
   CERTYP("MSGI" 
                IBCU75*
   CHNGFRM      IBCU75~
   CHRG         IBCEF22*~
   CIENS        IBJPS8*~
   CITY         IBCEPTC2*~,IBY608PO*~
   CL           IBCEU1*~
   CLAIM        IBTUBOA*~
   CLEAN        IBCEU5~
   CLEAN(399    IBCEU5*
   CLOK         IBCBB12*~
   CMNNODE      IBCBB13*~,IBCU75*~
   CMNREQ       IBCBB13*~,IBCEF31*~,IBCU75*~
   CMNREQ("MSG" IBCU75*
   CMSG         IBCU75~
   CNT          IBCCC2*~,IBCEF2*~,IBCEF31*~,IBCEU1*~
   CNTR         IBCEF22*~
   COB          IBCEF2*~
   COBSEQ       IBCEU1*~
   CODES        IBY608PO*~
   COL          IBCEU1~
   CPIEN        IBCEF11*~
   CPT          IBCEF22~,IBTUBO3*~
   CPTCD        IBY608PO*~
   CPTDATA      IBJPS8~
   CPTDATA(81   IBJPS8
   CPTIEN       IBJPS8*~,IBY608PO*~
   CPTS         IBY608PO*~
   CSEQ         IBCEU1*~
   CT           IBCEF2*~,IBCEFG7*~,IBCEU1*~
   CURSEQ       IBCEU1*~
   D            IBCCC2!,IBCEU1*~,IBTUBO3~,IBTUBOA!,IBTUBOU~
   D0           IBCEU5,IBTUBOA!,|dd364.5*,|dd364.6*,|dd364.6*
   DA           IBCBB13~,IBCCC2*!~,IBCEF11*,IBCEPTC3*~,IBCEU5*~,IBCU7*!~,IBCU75*~,IBJPS*!,IBJPS3*!~,IBJPS4*~,IBJPS7*~,IBJPS8*!
                IBTUBOA!,IBTUBOU*!,IBY608PO~,IBY608PR*~,|dd350.8,|dd350.929,|dd364.5,|dd364.6,|dd364.6,|dd364.7,|dd399.6
   DA(1         IBCCC2*,IBCEU5*,IBCU7*,IBCU75*,IBJPS3*,IBJPS4*,IBJPS7*,IBJPS8*,|dd350.929
   DA(2         IBCU7*
   DATA         IBCEF11~,IBCEF22*~,IBCEF31*~,IBCEU1*~,IBCEU3*~,IBCNSC01*~,IBJPS2~,IBJPS3*~,IBY608PO*~,IBY608PR*~
   DCT          IBCEF2*~
   DD           IBCCC2!~,IBCEF11!~,IBJPS4!
   DDH          IBCCC2!
>> DE           |dd364.5*
   DEL          IBCEF11*~,IBCEF31~,IBCEU3*~
   DEL(         IBCEF31*
   DFLT         IBJPS3*~,IBJPS4*~
   DFN          IBCBB1,IBCCC2!,IBCEF2*~,IBCEU~,IBCU7*~,IBTUBO3*~,IBTUBOA*~,IBTUBOU~
   DGACTDT      IBCCC2!
   DGADDVST     IBCU7*!
   DGAMNT       IBCCC2!
   DGBR         IBCCC2!
   DGBRN        IBCCC2!
   DGBSI        IBCCC2!
   DGBSLOS      IBCCC2!
   DGCPT        IBCU7*!
   DGCPT(       IBCU7*
   DGCPTNEW     IBCU7*!
   DGCPTUP      IBCU7*!
   DGFUNC       IBCCC2!
>> DGI          IBCCC2*
   DGIFN        IBCCC2!
   DGLB         IBCU75*~
   DGNOADD      IBCU7!
   DGNODUU      IBCU7*!
   DGPCM        IBCCC2!
   DGPM         IBTUBOA*~
   DGPROC       IBCU7*!
   DGPROCDT     IBCCC2*!,IBCU7*!
   DGREV        IBCCC2!
   DGREV00      IBCCC2!
   DGREVHDR     IBCCC2!
   DGRVRCAL     IBCCC2!,IBCU7*
   DGXRF1       IBCCC2!
   DI           IBCU75~
   DIC          IBCCC2*!~,IBCEF11*~,IBCEPTC3*!~,IBCEU3~,IBCU7*!,IBCU75~,IBJPS!,IBJPS3*~,IBJPS4*!~,IBJPS7*~,IBTUBO*!,IBTUBOA!
                IBY608PO~,|dd350.929*!,|dd364.5,|dd364.7
   DIC("A"      IBCU7*,IBJPS3*,IBJPS7*,IBTUBO*
   DIC("DR"     IBCU7*,IBJPS4*
   DIC("P"      IBCCC2*
   DIC("S"      IBCEPTC3*,IBCU7*,IBJPS7*,|dd350.929*
   DIC("V"      IBCU7*!
   DIC(0        IBCCC2*,IBCEF11*,IBCEPTC3*,IBCU7*,IBJPS3*,IBJPS4*,IBJPS7*,IBTUBO*
   DIE          IBCBB13~,IBCCC2*~,IBCEU3~,IBCEU5~,IBCU7*!~,IBCU75*~,IBJPS*!,IBJPS3*~,IBJPS4*~,IBJPS8!~,IBTUBOA!,IBTUBOU*!,IBY608PO~
                |dd350.929
   DIE("NO^"    IBCU75*
   DIEN         IBJPS4*~
   DIERR        IBJPS4~
   DIFF         IBJPS3*~
>> DIG          |dd364.5*,|dd364.6*
>> DIH          |dd364.5*,|dd364.6*
   DIK          IBCCC2*!,IBCEF11*,IBCEPTC3*~,IBCU7*!~,IBJPS3*!~,IBJPS7*~,IBJPS8*~,IBY608PR*~
   DINUM        IBCU7*!
   DIR          IBCEFG7!~,IBCEPTC3!~,IBCEU3!~,IBCEU5!~,IBCU7~,IBCU75~,IBJPS3~,IBJPS4~,IBJPS7~,IBJPS8!~,IBTUBO!,IBTUBO3~,IBTUBOU!
   DIR("?"      IBCEPTC3*,IBCEU5*,IBJPS3*,IBTUBO*,IBTUBOU*
   DIR("A"      IBCEFG7*,IBCEPTC3*!,IBCEU3*,IBCEU5*,IBCU7*,IBCU75*,IBJPS3*,IBJPS4*,IBJPS8*,IBTUBO*,IBTUBOU*
   DIR("B"      IBCEFG7*,IBCEPTC3*,IBCEU3*!,IBCEU5*,IBCU7*,IBCU75*,IBJPS3*,IBTUBO*,IBTUBOU*
   DIR("S"      IBCEU5*,IBJPS4*
   DIR(0        IBCEFG7*,IBCEPTC3*,IBCEU3*,IBCEU5*,IBCU7*,IBCU75*,IBJPS3*,IBJPS4*,IBJPS8*,IBTUBO*,IBTUBO3*,IBTUBOU*
   DIRCTR       IBCEPTC3*~
   DIRLN        IBCEPTC3*~
   DIROUT       IBCEPTC3~,IBJPS7~,IBTUBO,IBTUBO3~
   DIRUT        IBCEPTC3~,IBJPS3~,IBJPS7~,IBJPS8!~,IBTUBO!~,IBTUBO3~,IBTUBOU~
>> DIU          |dd364.5*,|dd364.6*
   DIV          IBJPS4*~,|dd364.5*!,|dd364.6*!,|dd364.6*!
   DIV(0        |dd364.5*,|dd364.6*,|dd364.6
   DIVDATA      IBJPS4*~
   DIVS         IBJPS3~,IBJPS4~
   DIVS(        IBJPS3,IBJPS4*
   DL           IBCU75~
   DLAYGO       IBCCC2*~,IBCEF11*~,IBCU7*!,IBJPS3*~,IBJPS4*!
   DLEN         IBCEF11~
   DNAME        IBJPS4*~
   DO           IBCCC2!~,IBCEF11!~,IBJPS4!
   DONE         IBCU75*~
   DP           IBCU75~
   DQ           IBCU75~
   DR           IBCCC2*~,IBCEU3~,IBCEU5~,IBCU7*!~,IBCU75*~,IBCU75*~,IBJPS*!~,IBJPS3*~,IBJPS4*~,IBJPS8!~,IBTUBOU*!,IBY608PO~
   DRTAG        IBCU75*~
   DRTAG(1      IBCU75*
   DT           IBCBB1,IBCE837B,IBCEU,IBCU7,IBJPS,IBJPS2,IBJPS3,IBTUBO,IBTUBOU,IBTUBUL
   DT0          IBTUBO*~,IBTUBOU*~
   DT1          IBTUBO*~,IBTUBOU*~
   DT2          IBTUBO*~,IBTUBOU*~
   DTE          IBTUBO3*~
   DTIME        IBCU7
   DTOLD        IBCU75*~
   DTOUT        IBCEFG7,IBCEPTC3~,IBJPS3~,IBJPS7~,IBJPS8!~,IBTUBO3~,IBTUBOU~
   DUOUT        IBCEFG7,IBCEPTC3~,IBJPS3~,IBJPS7~,IBJPS8!~,IBTUBO3~,IBTUBOU~
   DUZ          IBCBB1,IBCCC2,IBCEFG7*,IBTUBUL,IBY608PO
   DX           IBCEF2*~
   DX(          IBCEF2
   DXCNT        IBCEF31~
   DXIEN        IBCEF2*~
   DXQ          IBCEF2*~
   E            IBCEU1*~,IBTUBOU~
   ECT          IBCEF2*~
   EDI          IBJPS3*~
   EDIT         IBCU75~
   EDX          IBCEF2*~
   ELIG         IBCEU1*~,IBTUBO*~,IBTUBO3*~
   ELIGIEN      IBTUBO*~
   ENC          IBTUBOU~
   EOBIEN       IBCEU1*~
   ERR          IBCBB13*~
   ERRMSG       IBJPS8!~,IBY608PO!~
   ERROR        IBCBB13~,IBJPS7~,IBJPS8~
   EVDT         IBJPS3*~
   EVNTDT       IBCU75*~
   FAC          IBCEF11*~
   FDA          IBJPS7!~,IBJPS8!~,IBY608PO!~
   FDA(         IBJPS8*,IBY608PO*
   FDA("350.928" 
                IBJPS7*
   FIELDS       IBJPS4*~
   FIEN         IBCU75*~
   FILE         IBTUBOU~,IBY608PR*~
   FL           IBTUBO3*~
   FLAG         IBCBB1*~
   FLD          IBCBB13~,IBCEF31*~,IBCEU3~,IBCU7~,IBCU75*~,IBTUBOU~
   FLDS         IBCEF31*~
   FLDX         IBY608PO*~
   FLEN         IBCEF11~
   FLG          IBCBB13~
   FNAM         IBCU75*~
   FORM         IBCBB13~,IBCEF31*~,IBCU75~
   FORM(        IBCBB13*,IBCU75*!
   FORM(1       IBCU75*
   FORM(2       IBCU75*
   FOUND        IBCEF31*~
   FRMIEN       IBCBB13*~
   FRMNAM       IBCBB13*~
   FRMND        IBCU75*~
   FRMNDI       IBCU75*~
   FRMTAG       IBCU75*~
   FRMTYP       IBCBB13*~,IBCU75*~
   FRMTYP("MSG" IBCU75*
   FST          IBCEF22~
   FT           IBCEF31*~,IBCEU5*~
   FTYPE        IBCEF11*~
   FULLADD      IBY608PO*~
   FUNCTION     IBCBB1*~
   GRP          IBCEF2~
   GRPCD        IBCEU1*~
   GRPSEQ       IBCEU1*~
   HASDIVS      IBJPS4*~
   HAVE         IBCEU5*~
   HDR          IBJPS2~
   HI           IBJPS2~
   HLOC         IBTUBOU*~
   HOSP         IBTUBOU*~
   HT           IBCU75*~
   HTOLD        IBCU75~
   I            IBCBB1*~,IBCCC2*!,IBCCC2*~,IBCEF2*~,IBCEU3*~,IBCU7*~,IBCU75*~,IBJPS3*~,IBJPS4*~,IBTUBO3*~,IBTUBOA~,IBTUBUL~
                IBY608PO*~
   I(0          |dd364.6*
   IB           IBCCC2!,IBCEF11~,IBCEF31~,IBCEPTC3*~,IBCEU*~,IBCEU1*~,IBCEU5*~,IBTUBOA~
   IB(          IBCEF31,IBTUBOA*,IBTUBOU*
   IB("U"       IBCEF11*
   IB("U1"      IBCEF11*
   IB(0         IBCEF11*
   IB(1         IBTUBOU
   IB(10        IBTUBOU
   IB(11        IBTUBOU
   IB(12        IBTUBOU
   IB(13        IBTUBOU*
   IB(14        IBTUBOU
   IB(15        IBTUBOU*
   IB(16        IBTUBOU*
   IB(18        IBTUBOU
   IB(19        IBTUBOU*
   IB(2         IBTUBOU*
   IB(3         IBTUBOU
   IB(4         IBTUBOU*
   IB(6         IBTUBOU*
   IB(7         IBTUBOU
   IB(8         IBTUBOU
   IB(9         IBTUBOU
   IB0          IBCEF2*~,IBCEPTC2*~,IBCEU*~,IBCEU1*~,IBCU7*~,IBJPS3*~,IBJPS4*~
   IB00         IBCEU1*~
   IB1          IBCEFG7*~,IBCEU5*~
   IB19         IBCEU3*~
>> IB1ST("PAYER" 
                IBCNSC01*
>> IB1ST("REM"  IBCNSC01*
>> IB1ST("SYN"  IBCNSC01*
   IB2          IBCEFG7*~
   IB3          IBCEFG7*~
   IB364        IBCEPTC3*~
   IBA          IBCCC2!,IBCEF2~,IBCEF31*~,IBCEU1*~,IBY608PO!~
   IBA("OUTPT"  IBCEF2!
   IBA(1        IBY608PO*
   IBA(2        IBY608PO*
   IBA(3        IBY608PO*
   IBA1         IBCCC2!
   IBA2         IBCCC2!
   IBABORT      IBCE837B~,IBCEFG7*~,IBCEPTC3~
   IBAC         IBCCC2*!~,IBCEU3,IBCNSC01~
   IBAC(        IBCNSC01*
   IBAC(15      IBCNSC01
   IBAC(16      IBCNSC01
   IBACC        IBCEF22*~
>> IBACMAX      IBCNSC01*
   IBACND       IBCNSC01*~
   IBACT        IBCEPTC3*~,IBCU7*~
   IBAD         IBCCC2!
   IBADD        IBCNSC01*~
   IBADD1       IBCCC2!
   IBADDRESS    IBY608PO*~
   IBALL        IBCEU*~
   IBAMTI       IBTUBOA*~
   IBAMTIM      IBTUBOA*~
   IBAMTP       IBTUBOA*~
   IBAMTPM      IBTUBOA*~
   IBARR        IBCEF2*~
   IBARRAY      IBCEF22~
   IBARRAY(     IBCEF22
   IBARST       IBCCC2!
   IBARTP       IBCBB1!
   IBARY        IBCF23A~
   IBARY(""     IBCF23A
   IBASK        IBCEPTC3*~
   IBAT         IBCBB1!
   IBAU         IBCBB1!
   IBAUTO       IBCCC2*~
   IBAUX        IBCEU3*~,IBCF23A
>> IBAUXLN      IBCF23A*
   IBBDA        IBCEPTC2*~
   IBBDT        IBCF23A*~,IBTUBO*~,IBTUBO3,IBTUBOA,IBTUBOU*,IBTUBUL*~
   IBBILL       IBCEU1*~
   IBBN         IBCF23A*~
   IBBNO        IBCBB1!,IBCCC2!
   IBBS         IBCCC2!
   IBBT         IBCCC2!,IBCEU*~
   IBBX19       IBCEU3*~
   IBC          IBCEF2*~,IBJPS2*~
   IBCAN        IBCCC2!
   IBCBCOPY     IBCCC2!
   IBCBK        IBTUBOU*~
   IBCBPS       IBCBB13*~
   IBCCC        IBCCC2!
>> IBCE("EDI"   IBCCC2
>> IBCEAUTO     IBCCC2
   IBCH         IBCCC2!
>> IBCHARG      IBCF23A*
   IBCHK        IBCCC2!
>> IBCIMFLG     IBJPS2*
   IBCIREDT     IBCCC2~
>> IBCISOCK     IBJPS2*
   IBCITY       IBY608PO*~
   IBCK         IBTUBOU~
   IBCK(        IBTUBOU*
   IBCL         IBCBB1!
   IBCLMNO      IBCEPTC3*~
   IBCLPIEN     IBCBB12*~
   IBCLPROV     IBCBB12*~
   IBCLPRV      IBCBB12*~
   IBCLPRV(     IBCBB12*
   IBCNCOPY     IBCCC2!
   IBCNCRD      IBCCC2!
>> IBCNS        IBCNSC01
   IBCNS0       IBCNSC01*~
   IBCNS03      IBCNSC01*~
   IBCNS06      IBCNSC01*~
   IBCNS08      IBCNSC01*~
   IBCNS11      IBCNSC01*~
   IBCNS13      IBCNSC01*~
   IBCNS3       IBCNSC01*~
   IBCNT        IBCBB13*~,IBCCC2*~,IBCEPTC2*~,IBCNSC01*~,IBJPS3*~,IBJPS4*~,IBJPS7*~,IBJPS8*~
   IBCNT(       IBCNSC01*
   IBCOB        IBCCC2!~,IBCEU*~
   IBCOB(       IBCCC2
   IBCOB("M1"   IBCCC2*
   IBCOB("TX"   IBCCC2*!
   IBCOB(0      IBCCC2*
   IBCOBID      IBCEU~
   IBCOBN       IBCBB1*~,IBCCC2*~,IBCEU1~
>> IBCOD        IBCCC2*
   IBCODE       IBCU7*~
   IBCOMB       IBCEF22~
   IBCOMB(      IBCEF22*
   IBCOMP       IBTUBO*~,IBTUBO3,IBTUBOA*,IBTUBUL
   IBCP         IBCEU3*~,IBCEU5~
   IBCP(        IBCEU5*,IBCF23A*
   IBCPIEN      IBCEF22*~
   IBCPLINK     IBCF23A*~
   IBCPT        IBCU7*~
   IBCPTIEN     IBCEF22*~
   IBCRED       IBCEU*~
   IBCSTAT      IBTUBOA*~
   IBCT         IBCEF31*~,IBCEFG7*~,IBCEPTC3*~,IBCEU*~,IBCEU,IBCU7*~
>> IBCTCOPY     IBCCC2
   IBCURR       IBCEU1*~
   IBD          IBCEPTC3*~,IBCEU*~
   IBD1         IBCF23A*~
   IBD2         IBCF23A*~
   IBDA         IBCCC2!,IBCEF22*~,IBCEFG7~,IBCEPTC2*~
   IBDAT        IBCEU3*~
   IBDATA       IBCEF2~,IBCEU1*~,IBCEU3~
   IBDATE       IBCU7~
   IBDD         IBCCC2*!
   IBDD1        IBCCC2!
   IBDEF        IBCEF22*~
>> IBDELIM      IBCEFG7*
>> IBDEN        IBCF23A
>> IBDEN1       IBCF23A
>> IBDEND       IBCF23A
   IBDENLN      IBCF23A*!~
   IBDENLN("DEN1" 
                IBCF23A*
   IBDET        IBTUBO*~,IBTUBO3,IBTUBUL
   IBDISP       IBJPS3*~
   IBDIV        IBJPS3*~,IBTUBO3*~,IBTUBOA*,IBTUBUL*~
   IBDIVHDR     IBTUBO3*~,IBTUBUL*
   IBDL         IBCCC2*~
   IBDPT        IBCCC2!
   IBDR         IBCCC2!,IBCU7*~
>> IBDR20       IBCEU
   IBDT         IBCCC2!,IBCEU*~,IBCEU3*~,IBCU75,IBTUBOA*!,IBTUBOU~
>> IBDT1        IBCEPTC3,IBCF23A
>> IBDT2        IBCEPTC3,IBCF23A
   IBDTTM       IBCEU~
   IBDX         IBCEPTC3*~
   IBDXI        IBCEF11~,IBCF23A~
   IBDXI(       IBCEF11*,IBCF23A
   IBE          IBCEU3*~
   IBEBI        IBCEF2*~
   IBEDT        IBTUBO*~,IBTUBO3,IBTUBOA,IBTUBOU*,IBTUBUL*~
   IBEFN        IBCF23A*~
>> IBEMG        IBCF23A
   IBEND        IBCU7*~
   IBEOB        IBCBB1*~,IBCEU1~
   IBER         IBCBB1*,IBCBB1*,IBCBB12*,IBCBB13*~,IBJPS3*~
   IBEU         IBCBB1!
   IBEVDT       IBCBB1!
   IBEX         IBCU7*!
   IBF2         IBCEFG7~
   IBFDT        IBCBB1!
   IBFFY        IBCBB1*!
   IBFILE       IBJPS3*~
   IBFILTER     IBTUBOU*~
   IBFLAG       IBTUBOU*~
   IBFLD        IBCEF11~
   IBFLD(24     IBCEF11*,IBCEF11,IBCF23A*
   IBFORM       IBCEFG7~,IBCEFG7~
   IBFRMTYP     IBCCC2*~
>> IBFROM       IBCCC2
   IBFSKIP      IBCEPTC3*~
   IBFT         IBCBB1*!~,IBCBB12*~,IBCEU*~,IBCEU5*~,IBCU7*!~
   IBFTYPE      IBCEFG7*~
   IBFY         IBCBB1!
   IBFY1        IBCBB1!
   IBFYC        IBCBB1!
   IBGO         IBCEU3*~
   IBGOEND      IBCCC2*~
   IBGRP        IBTUBUL*~
>> IBGRPB       IBJPS2*
>> IBGRPE       IBJPS2*
   IBH          IBCCC2~
   IBHAID       IBCEU3*~
   IBHDR        IBCEPTC2~
   IBHOSP       IBCEU3*~
   IBHPD        IBCNSC01*~
   IBHV         IBCCC2~
   IBI          IBCCC2!,IBCEF11*~,IBCEF11*,IBCEPTC3*~,IBCF23A*~,IBCNSC01*~,IBTUBO3*~
   IBI1         IBCCC2!
   IBIA         IBTUBOA~
   IBIAV        IBTUBOA*~
   IBID         IBCBB1~,IBCEU*~,IBCEU3*~
   IBID(1       IBCBB1
   IBIDS        IBCCC2!,IBCEF11~
   IBIDS(0      IBCEF11
   IBIDS(1      IBCEF11
   IBIDT        IBCF23A*~
   IBIEN        IBCEF31~
   IBIFN        IBCBB1,IBCBB1~,IBCBB12~,IBCBB12~,IBCBB13~,IBCBB13~,IBCCC2!,IBCCC2*~,IBCCC2~,IBCEF11~,IBCEF2~,IBCEF2~,IBCEF22~
                IBCEF31~,IBCEFG7,IBCEPTC2*~,IBCEPTC3*~,IBCEU~,IBCEU~,IBCEU~,IBCEU1~,IBCEU3~,IBCEU3~,IBCEU5~,IBCEU5~,IBCF23A~,IBCU7
                IBCU7~
                IBJPS3~,IBJPS4~,IBTUBOA*~
   IBIFN1       IBCCC2*!,IBCCC2*~
   IBIN         IBCCC2!
   IBINFO       IBCU7!
   IBINFO(      IBCU7
>> IBINMRA      IBTUBO*,IBTUBO3
   IBINP        IBCEU*~
   IBINPAT      IBCEF22*~
   IBINS        IBCBB1*~,IBCCC2!~,IBCEF2*~,IBCEU3*~
   IBINST       IBCEF2*~
   IBINSTIT     IBCBB13*~
   IBIP         IBCCC2!
   IBITEM       IBCF23A*~
   IBIZ         IBCBB1*~
   IBJ          IBCEF11~,IBCEFG7*,IBCF23A*~
>> IBK          IBCF23A*
   IBKEY        IBCCC2!,IBCEF2*~
   IBL          IBCEF31*~,IBCEU*~
   IBLAB        IBCEU*~
   IBLCNT       IBCEF22*~,IBCNSC01*~
   IBLEV1       IBCEPTC2*~
   IBLIEN       IBCBB13*~
   IBLINE       IBCEPTC2~,IBCEU3*~,IBCNSC01*~
   IBLINES      IBCU7*~
>> IBLINK(      IBCF23A
>> IBLINK1(     IBCF23A!
>> IBLINKRX(    IBCF23A!
   IBLN         IBCEF2*~,IBCEF22*~,IBCF23A*~,IBCU7*~,IBJPS2*,IBJPS2*,IBJPS2*,IBJPS3*~,IBJPS4*~,IBJPS7*~,IBJPS8*~
   IBLN1        IBCF23A*~
   IBLNFLAG     IBCBB12~
   IBLNPROV     IBCBB12*~
   IBLNPRV      IBCBB12!~,IBCEU,IBCU7~
   IBLNPRV(     IBCBB12*
   IBLNPRV("PROC" 
                IBCBB12*
   IBLNPRV("PRVFUN" 
                IBCBB12*
   IBLOC        IBCBB1!,IBCEPTC2,IBCEPTC3
   IBLOOP       IBCEF22*~
   IBLPAR       IBCF23A*!~
   IBLPAR(      IBCF23A
   IBLPAR("CMN" IBCF23A
   IBLPAR("CMN-10126" 
                IBCF23A
   IBLPAR("CMN-484" 
                IBCF23A
   IBLPI        IBCF23A*~
   IBLPIEN      IBCBB12*~
>> IBLR         IBJPS2,IBJPS2,IBJPS2*
   IBLS         IBCCC2!
   IBLSDT       IBCEU3*~
   IBM          IBCBB1*~,IBCEF2*~,IBTUBOU*~
   IBM1         IBCBB1*~,IBCCC2*~
   IBM2         IBCEF2*~
   IBMAED       IBCCC2~
   IBMAED(      IBCCC2*
   IBMCCF       IBTUBO*!,IBTUBO3,IBTUBOA,IBTUBOU,IBTUBUL
   IBMCCF(      IBTUBOU
   IBMCCF("ATYP" 
                IBTUBO*
   IBMCCF("ELIG" 
                IBTUBO*
   IBMCCF("RTYP" 
                IBTUBO*
   IBMCR        IBCEF2*~
>> IBMIN        IBCF23A
   IBMOD        IBCEF22*~,IBCU7*~
   IBMRA        IBCBB1!,IBCEF2*~
   IBMRAF       IBCEU1*~
   IBMRAND      IBCEU*~
>> IBMRANOT     IBCCC2
>> IBMSG        IBCEFG7*
   IBN          IBCCC2!,IBCEU1*~,IBTUBO3*~
   IBN0         IBCBB13*~
   IBN1         IBTUBO3*~
   IBNAME       IBY608PO*~
   IBNAMEX      IBY608PO*~
   IBND         IBCCC2!,IBTUBO3~
   IBND(        IBCCC2*,IBTUBO3*
   IBND("C"     IBCCC2
   IBND("CP"    IBCCC2*
   IBND("CP-AUX" 
                IBCCC2*
   IBND("CP1"   IBCCC2*
   IBND("CP2"   IBCCC2*
   IBND("M"     IBCCC2
   IBND("RC"    IBCCC2*
   IBND("TX"    IBCCC2
   IBND("U"     IBCCC2
   IBND("U1"    IBCCC2
   IBND("U2"    IBCCC2
   IBND("U3"    IBCCC2
   IBND("U4"    IBCCC2
   IBND("U5"    IBCCC2
   IBND("U6"    IBCCC2
   IBND("U7"    IBCCC2
   IBND("U8"    IBCCC2
   IBND("UF2"   IBCCC2
   IBND("UF3"   IBCCC2
   IBND("UF31"  IBCCC2
   IBND("UF32"  IBCCC2
   IBND0        IBCBB1!,IBCCC2!
   IBNDI1       IBCBB1*~
   IBNDM        IBCBB1!
   IBNDMP       IBCBB1!
   IBNDS        IBCBB1!,IBCCC2!
   IBNDT        IBTUBOU*~
   IBNDTX       IBCBB1!
   IBNDU        IBCBB1!,IBCCC2!
   IBNDU1       IBCBB1!
   IBNDU2       IBCBB1!
   IBNDUF3      IBCBB1!
   IBNDUF31     IBCBB1!
   IBNOASK      IBCE837B~,IBCEFG7~
   IBNOC        IBCU7*~
>> IBNOCPT      IBCCC2
   IBNODE       IBJPS3*~,IBJPS4*~,IBTUBOA*~,IBTUBOU~
>> IBNOSHOW     IBCEF11,IBCEU3
>> IBNOTC       IBCCC2
>> IBNWPTCH     IBCF23A
   IBO          IBCCC2!
   IBOA         IBCCC2!
   IBOD         IBCCC2!
   IBOE         IBTUBOA*~,IBTUBOU~
   IBOE0        IBTUBOU*~
   IBOK         IBCBB1*!~,IBCEPTC3*~,IBCU7*~
   IBONE        IBCBB12~
   IBOPT        IBTUBO~
   IBOPT(1      IBTUBO*
   IBOPT(2      IBTUBO*
   IBOPT(3      IBTUBO*
   IBOPT(4      IBTUBO*
   IBORG        IBJPS3*~
   IBOUT        IBCEFG7*~
   IBP          IBCEF22~,IBCEFG7*,IBCEU3*~,IBCEU5*~,IBCF23A*~
   IBP(         IBCEF22*!
   IBP(0        IBCF23A*!
   IBP1         IBCEF22~
   IBP1(        IBCEF22*
   IBPA         IBTUBOA~
   IBPAG        IBTUBO3*~
   IBPAGE       IBCEPTC2*~
   IBPAR        IBCCC2~,IBCEFG7*~
   IBPATCH      IBCF23A~
   IBPAY1       IBCBB13*~
   IBPAY2       IBCBB13*~
   IBPAY3       IBCBB13*~
   IBPB         IBTUBOU~
   IBPC         IBCF23A*~
>> IBPCHG       IBCF23A
>> IBPD0        IBJPS2
>> IBPD1        IBJPS2
>> IBPD10       IBJPS2
>> IBPD11       IBJPS2
>> IBPD2        IBJPS2
>> IBPD50       IBJPS2
>> IBPD7        IBJPS2
>> IBPD8        IBJPS2*
>> IBPDT        IBCF23A*
   IBPEB        IBCU75~
   IBPFN        IBCF23A*~
   IBPG         IBCEF31*~
   IBPH         IBCEF2*~
   IBPICHV      IBCBB1*!
   IBPIEN       IBCBB13*~,IBCEU*~,IBCU7*~,IBY608PO*~
   IBPLAN       IBCEF31*~
   IBPLTYP      IBCEF31*~
   IBPNM        IBCEU*~
   IBPO         IBCEF22*~,IBCF23A*
>> IBPO1        IBCF23A*
   IBPOPOUT     IBCCC2,IBCU7*~
   IBPR         IBCF23A~
>> IBPRCOB      IBCCC2
   IBPRDATA     IBCEU1*~
   IBPRIEN      IBCEU*~
   IBPRINT      IBCEF11~
   IBPROC       IBCCC2!,IBCEF31*~,IBCF23A*!,IBCU75*~
   IBPROCEX     IBCU7~
   IBPROCHK     IBCBB12~
   IBPROCIN     IBCU7*~
   IBPROCNM     IBCU7*~
   IBPROCP      IBCBB12*~,IBCBB12*,IBCBB13*~,IBCEU,IBCU7*!,IBCU75~,IBJPS8~
   IBPROCSV     IBCU7*!~
   IBPRT        IBCEU3*~,IBTUBO*~
   IBPRTYP      IBCEU*~
   IBPRV        IBCEU*~,IBCEU3*~,IBCEU5~,IBCU7~
   IBPRV(       IBCEU*,IBCEU3,IBCEU5
   IBPRV(1      IBCEU*
   IBPRV(2      IBCEU*!
   IBPRV(3      IBCEU*
   IBPRV(4      IBCEU*
   IBPRV(9      IBCEU*
   IBPRVFUN     IBCBB12*~,IBCBB12*~
   IBPRVN       IBCU7~
   IBPRVO       IBCU7~
   IBPTCNT      IBCEU1*~
   IBPTF        IBCCC2!
   IBPTM        IBCEU1*~
   IBPTP        IBCEU1*~
   IBPTPR       IBCEU1*~
   IBPTZ        IBCEU1*~
   IBPUR        IBCEU3*~
   IBQ          IBCEPTC3*~,IBCEU*~,IBTUBO3*~
   IBQDT        IBCE837B*~,IBCEFG7~
   IBQUE        IBCEFG7*~
   IBQUERY      IBTUBOA~,IBTUBOU~
   IBQUIT       IBCBB1,IBCCC2!,IBCEPTC3*~,IBCEU5*~,IBCU7*~,IBTUBO*~,IBTUBOU*~
   IBR          IBCEU5*~
   IBRATE       IBJPS4*~
   IBRC         IBCEF22*,IBCEU5*~
   IBRC(        IBCF23A*
   IBRC0        IBCEF22*~
   IBRCCHG      IBCBB13*~
   IBRCCNT      IBCBB13*~
   IBRCIEN      IBCEF22~
   IBREC        IBCEFG7*~
   IBREM        IBCEU3*~
   IBREN        IBCEU3*~
   IBRENNPI     IBCEU3*~
   IBRENQ       IBCEU3*~
   IBRENSID     IBCEU3*~
   IBREP        IBCEPTC2~,IBCEPTC3*~
   IBREV        IBCCC2!,IBCEU5~,IBCF23A
   IBRSBTST     IBCE837B~,IBCEFG7~,IBCEPTC3*~,IBCEU1~
   IBRT         IBTUBOA*!
   IBRTCHV      IBCBB1*!
   IBRTP        IBCEU3*~
   IBRU         IBCBB1!
   IBRUN        IBTUBO3*~
>> IBRV         IBCF23A*
>> IBRV1        IBCF23A*
   IBRX         IBCEF11*!~,IBCEF22*~,IBCEU5~,IBTUBOA*~,IBTUBOU*~
   IBRX(        IBCEF11,IBCEU5*
   IBRX0        IBCEF11*~
   IBRX1        IBCEF11*~
   IBRX1(       IBCEF11*!
   IBRXDEF      IBCBB1*~
>> IBRXF        IBCF23A
   IBRXH        IBCEF11*~
   IBS          IBCEF22*~,IBCEF22,IBCEU1*~,IBCEU3*~
   IBS1         IBCEPTC2*~
   IBS2         IBCEPTC2*~
   IBSAV        IBTUBOA*~
   IBSAVE       IBCNSC01*~
   IBSBD        IBTUBO*~,IBTUBO3,IBTUBUL
   IBSEL        IBJPS2,IBJPS2,IBJPS2*,IBTUBO*~,IBTUBO3,IBTUBOA,IBTUBUL*~
   IBSELN       IBJPS*~
   IBSEQ        IBCCC2*~,IBCEF2*~,IBCEF31*~,IBCEU*~
   IBSEQN       IBCCC2*~
   IBSET        IBJPS*~
>> IBSILENT     IBCCC2
   IBSITE8      IBCE837B~
>> IBSIZE       IBCEFG7*
   IBSKCTR      IBCEPTC3*~
   IBSORT       IBCEPTC2~,IBCEPTC3
   IBSPC        IBCEU3*~
   IBSPEC       IBCEU*~,IBCEU3*~
   IBSPI        IBCEU3*~
   IBSS         IBCEF22*~,IBCF23A*~,IBCF23A*
   IBSS(        IBCF23A*
   IBSS("L"     IBCF23A!
   IBSS1        IBCEF22~,IBCF23A~
   IBST         IBCBB1!,IBCCC2!
   IBSTAT       IBCEPTC3*~
   IBSTATE      IBY608PO*~
   IBSTOP       IBCEPTC2~
   IBSTR        IBCU7*~,IBJPS3*~,IBJPS4*~,IBJPS7*~,IBJPS8*~
>> IBSTSM       IBCCC2
   IBSUB        IBCEFG7*~,IBCEU3*~
>> IBSW(        IBJPS2
   IBT          IBTUBOA~,IBTUBUL~
   IBT(         IBTUBUL*,IBTUBUL*,IBTUBUL*
   IBTAXID      IBJPS3*~
   IBTAXLST     IBCCC2*~
   IBTAXLST(    IBCCC2*
   IBTC         IBCBB1!
   IBTC(        IBJPS2
   IBTCFLAG     IBJPS3~,IBJPS3*~,IBJPS4~,IBJPS7~,IBJPS8~
   IBTDT        IBCBB1!
   IBTEMON      IBTUBOA!
   IBTEST       IBCEPTC2*~,IBTUBUL*~
   IBTEXT       IBCEU3*~,IBCU7*~
   IBTF         IBCBB1!
   IBTFOB       IBCBB13*~
   IBTFY        IBCBB1*!
   IBTIMON      IBTUBO*~,IBTUBO3,IBTUBOA*,IBTUBOU*,IBTUBUL*
   IBTOB        IBCBB1!,IBCEU*~
   IBTOB12      IBCBB1!
   IBTOT        IBCEU1*~
   IBTOTAL      IBTUBUL~
>> IBTW(        IBJPS2
   IBTYP        IBCEF2~,IBCEFG7*~,IBCEU~,IBTUBOA*~
   IBTYPPTC     IBCEPTC3*~
   IBU          IBCCC2!
   IBUC         IBCCC2!
   IBUN         IBCCC2!
   IBUNB        IBTUBOA!
   IBUNB(       IBTUBOA*,IBTUBUL
   IBUNB("CPTMS" 
                IBTUBUL
   IBUNB("CPTMS-" 
                IBTUBOA*
   IBUNB("CPTMS-MRA" 
                IBTUBUL
   IBUNB("ENCNTRS" 
                IBTUBOA*,IBTUBUL
   IBUNB("EPISM-" 
                IBTUBOA*
   IBUNB("EPISM-A" 
                IBTUBOA*,IBTUBUL
   IBUNB("EPISM-A-MRA" 
                IBTUBOA*,IBTUBUL
   IBUNB("EPISM-I" 
                IBTUBOA,IBTUBUL
   IBUNB("EPISM-I-MRA" 
                IBTUBOA
   IBUNB("EPISM-P" 
                IBTUBOA,IBTUBUL
   IBUNB("EPISM-P-MRA" 
                IBTUBOA
   IBUNB("PRESCRP" 
                IBTUBOA*,IBTUBUL
   IBUNB("PRESCRP-MRA" 
                IBTUBOA*,IBTUBUL
   IBUNB("UNBIL" 
                IBTUBOA*
   IBUNB("UNBILIP" 
                IBTUBOA*,IBTUBUL
   IBUNB("UNBILIP-MRA" 
                IBTUBOA*,IBTUBUL
   IBUNB("UNBILOP" 
                IBTUBUL
   IBUNB("UNBILOP-MRA" 
                IBTUBUL
   IBUNB("UNBILRX" 
                IBTUBUL
   IBUNB("UNBILRX-MRA" 
                IBTUBUL
   IBUNB("UNBILTL" 
                IBTUBOA*,IBTUBUL*
   IBUNB("UNBILTL-MRA" 
                IBTUBOA*,IBTUBUL*
   IBUNB(0      IBTUBUL
   IBUNB(999999 IBTUBUL*
>> IBUNIT       IBCF23A
   IBV          IBCCC2*!~
   IBV1         IBCCC2!
   IBVAL        IBCEU~,IBCEU3*~,IBCEU3*,IBTUBOU~
   IBVAL("BDT"  IBTUBOU*
   IBVAL("DFN"  IBTUBOU*
   IBVAL("EDT"  IBTUBOU*
>> IBVNUM       IBCEF11
   IBW          IBCCC2!
   IBWHO        IBCBB1!
   IBWIEN       IBCBB13*~
   IBWNR        IBCEU*~
   IBWW         IBCCC2!
   IBX          IBCBB1*~,IBCCC2*!~,IBCEF2~,IBCEF22*~,IBCEF31*~,IBCEPTC2*~,IBCEPTC2*~,IBCF23A*~,IBCNSC01*~,IBCU7*~,IBJPS2*~,IBTUBO3*
                IBTUBOA*~,IBTUBUL*~
   IBX(         IBCEF22
   IBX(" "      IBCEF22*
   IBX0         IBCEF31~,IBCEU1
   IBX1         IBCEF22*~
   IBX1(        IBCEF22*!
   IBXCOL       IBCEF31~
   IBXDA        IBCEF31~
   IBXDATA      IBCBB1!,IBCEF11!~,IBCEF2*!~,IBCEF22,IBCEF31~,IBCEPTC2~,IBCEU~,IBCEU1!~,IBCEU3!~
   IBXDATA(     IBCEF11*,IBCEF11*,IBCEF2*!,IBCEF22*,IBCEF31*,IBCEU1*,IBCEU1*,IBCEU3*
   IBXDATA(""   IBCEF11,IBCEF2
   IBXDATA(0    IBCEF11
   IBXERR       IBCEFG7~
   IBXIEN       IBCEF11~,IBCEF2,IBCEF31~,IBCEU1~,IBCEU3,IBCF23A,IBCU75~,IBJPS8~
   IBXLN        IBCEF31~
>> IBXNOREQ     IBCEF2*
>> IBXPG        IBCEF2
   IBXRAY       IBCEU3*~
   IBXS         IBCEF22*~
   IBXSAVE      IBCEF2~,IBCEF31~,IBCEU~,IBCEU1~,IBCEU3~,IBCU75~
   IBXSAVE(     IBCEF2,IBCEU1,IBCEU3
   IBXSAVE("BOX24" 
                IBCEU
   IBXSAVE("CCAS" 
                IBCEU1
   IBXSAVE("CMNDEX" 
                IBCEF31*,IBCU75
   IBXSAVE("DX" IBCEF31*
   IBXSAVE("FRM" 
                IBCEF31*!
   IBXSAVE("INPT" 
                IBCEF2*,IBCEF22*
   IBXSAVE("L-PROV" 
                IBCEU
   IBXSAVE("LCOB" 
                IBCEU1*,IBCEU1*
   IBXSAVE("LDAT" 
                IBCEF11*!
   IBXSAVE("PMOD" 
                IBCEF2*
   IBXSAVE("PROS-UB-04" 
                IBCEF22*
   IBXSAVE("PROVINF" 
                IBCEU
   IBXSAVE("RX-UB-04" 
                IBCEF22*
   IBXSIZE      IBCEF2,IBCEF31~
>> IBXSV("VC80" IBCEF22
   IBXTRA       IBCEF11~,IBCEF22~
   IBXTRACT     IBTUBO*,IBTUBOA!
   IBXZ         IBCBB1*~
   IBY          IBCEF22*~,IBCEPTC3*~,IBCEU*~,IBCU7*~,IBJPS2*~,IBTUBOA~
   IBYN         IBCCC2!
   IBYRMO       IBTUBOU*~
   IBZ          IBCBB1*!~,IBCEF2*~,IBCEF22*~,IBCEF31~,IBCEPTC2*!~,IBCEPTC3*~,IBCEU*~,IBCEU3*~,IBCEU5*~,IBCF23A*~,IBJPS2*~,IBJPS3~
                IBTUBOU*~
   IBZ("DIFF"   IBJPS3
   IBZ(0        IBTUBOU
   IBZ(1        IBCEPTC2
   IBZ(2        IBCEPTC2
   IBZ(4        IBCEPTC2
   IBZ(5        IBCEPTC2
   IBZ1         IBCEF22*~
   IBZ2         IBCEF22*~
   IBZ20        IBCU7!
   IBZERR       IBTUBOU~
   IBZPRC       IBCBB1~
   IBZPRC(      IBCBB1
   IBZPRC(0     IBCBB1
   IBZPRCUB     IBCBB1~
   IBZPRCUB(    IBCBB1
   IBZTSK       IBCE837B~
   IBZTYPE      IBCU7*!
   IBZZ         IBCCC2!
   ICDV         IBCEF2*~
   IDS          IBCEF11~
   IDX          IBTUBUL*~,IBTUBUL*,IBTUBUL*
   IDX(         IBTUBUL*
   IEN          IBCEU1*~,IBJPS3*~,IBJPS4*~,IBJPS7*~,IBJPS8*~,IBTUBOU~
   IEN19        IBJPS4*~
   IEN4         IBJPS3*~,IBJPS4*~
   IENS         IBJPS3*~,IBJPS4*~,IBJPS7!~
   IENS(        IBJPS7*
   IN           IBCEU3*~
   INACTFLG     IBY608PO*~
   INSC         IBTUBO3*~
   INSL         IBTUBO3*~
   INSN         IBTUBO3*~
   INST         IBJPS3*~
   INT          IBCEF31*~
   INTEXT       IBCEF31*~
   IO           IBCEFG7,IBTUBO,IBTUBUL
   IO("Q"       IBCEFG7!,IBTUBO!
   IOF          IBCEFG7,IBCEPTC3,IBCEU5,IBJPS7,IBJPS8,IBTUBO3
>> IOINHI       IBJPS2
>> IOINORM      IBJPS2
   IOM          IBTUBO3
>> IORVOFF      IBCNSC01
>> IORVON       IBCNSC01
   IOSL         IBCEPTC2,IBCEU5,IBTUBO3
   IOST         IBCEU5,IBTUBO3
   J            IBCCC2*!,IBCCC2*,IBCU7~,IBTUBOA~
   K            IBCCC2*!,IBCEF2*~
   L            IBCEF22*,IBTUBOU~
   L1           IBCEPTC2*~
   LAST         IBCEF2*~
   LDATA        IBCEF11~
   LET          IBCEU3*~
   LINE         IBCEF11~,IBCEF2~,IBCEFG7~,IBCEU1*~
   LKGLB        IBCU75*~
   LLEN         IBCEFG7*~
   LN           IBCEF11~,IBCEF2*~,IBCEF22~,IBCEU3*~,IBJPS2*~,IBY608PO*~,IBY608PR*~
   LNK          IBCEF22*~
   LNOK         IBCBB12*~
   LNS          IBCEF22*~
   LOOP         IBCNSC01*~
   LP           IBCEF31*~
   LPM4ABG      IBCU75~
   LPM4SAT      IBCU75~
   LR           IBJPS2~
   LST          IBCEF22*~,IBTUBO3~
   LST(         IBTUBO3
   LST(0        IBTUBO3
   LTOT         IBCEF22~
   LUNT         IBCEF22*~
   M            IBCEU1*~,IBCEU3*~,IBCU7*,IBTUBOU*~
   MAX          IBJPS3*~,IBJPS4*~
   MCR          IBCEF2*~
   MOD          IBCEF22*~
   MSG          IBCEFG7*~,IBCU75*!~,IBY608PO~
   MSG(         IBCU75*,IBY608PO*
   MSG(1        IBY608PO*
   MSG(2        IBY608PO*
   MSG(3        IBY608PO*
   MSG(4        IBY608PO*
   MSG(5        IBY608PO*
   MSG(6        IBY608PO*
   MSG(7        IBY608PO*
   MSG(8        IBY608PO*
   MSG(9        IBY608PO*
   N            IBCEU1*~,IBCU7*
   N0           IBJPS3*~
   N1           IBJPS3*~
   NAD          IBJPS3~
   NAD(         IBJPS3*
   NCCL         IBTUBOU*~
   ND           IBCEF31*~,IBTUBOU*~
   ND0          IBCEFG7*~
   ND10126      IBCBB13*~
   NDE          IBCU7*~,IBCU7*~
   NEED         IBCEU5*~
   NOASK        IBCEU5~
   NODE         IBCEU1*~
   NODE0        IBCU75~
   NODE1        IBCEF11*~
   NOOUTCK      IBCEF2~
   NOQ          IBCEFG7~
   NPI          IBJPS3*~
   NUM          IBCEF11*~,IBCEF2*~,IBCEU1~,IBCEU3*~
   NUM(         IBCEF2,IBCEU1
   NUM(1        IBCEF2
   NVELIG       IBTUBOA*~
   NXTPIEN      IBJPS4*~
   O2SAT        IBCU75~
   OBPRNM       IBCEU~
   OFFSET       IBCNSC01*~,IBCNSC01*~,IBCNSC01*~
   OK           IBCBB12*~,IBCBB12*~,IBCBB12*~,IBCBB12*,IBCEF22*~,IBCEPTC3*~,IBCEU*~,IBCEU*~,IBCEU3*~,IBCU75~,IBTUBOA*~,IBY608PR*~
   OKAY         IBCEFG7*~
   OLDVAL       IBCU75*~
   ONBILL       IBCEU5*~
   OUT          IBCEU3*~,IBJPS4*~
   P            IBCEU1*~,IBCU7*,IBTUBO3~,IBTUBOU~
   PAIREDQA     IBCEF31~
   PAIREDQA(    IBCEF31*
   PAIREDQA("3A" 
                IBCEF31
   PAIREDQA("3B" 
                IBCEF31
   PAIRQ        IBCEF31*~
   PARAM        IBCEFG7~
   PARAM(1      IBCEFG7*
   PARAM(2      IBCEFG7*
   PARAM(3      IBCEFG7*
   PAYERIEN     IBCNSC01*~
   PAYR         IBCNSC01*~
   PCCL         IBCEU1*~
   PCE          IBY608PR*~
   PCE1         IBCEF11*~
   PDATA        IBJPS3*~
   PIECE        IBCEF2~
   PIEN         IBJPS3*~,IBJPS3,IBJPS4*~
   POA          IBCEF2*~
   POP          IBCEFG7~,IBTUBO
   PPAYID       IBCEF2*~
   PPOL         IBCEF2*~
   PPROV        IBJPS4*~
   PR           IBCEU1*~
   PRCAERCD     IBCCC2!
   PRCAERR      IBCCC2!
   PRCASV       IBCBB1!,IBCCC2!
   PRCASV("2NDINS" 
                IBCBB1*
   PRCASV("3RDINS" 
                IBCBB1*
   PRCASV("APR" IBCBB1*
   PRCASV("ARREC" 
                IBCBB1*
   PRCASV("BDT" IBCBB1*
   PRCASV("CARE" 
                IBCBB1*
   PRCASV("CAT" IBCBB1*
   PRCASV("DEBTOR" 
                IBCBB1*
   PRCASV("FY"  IBCBB1*
   PRCASV("GPNM" 
                IBCBB1*
   PRCASV("GPNO" 
                IBCBB1*
   PRCASV("IDNO" 
                IBCBB1*
   PRCASV("INID" 
                IBCBB1*
   PRCASV("INPA" 
                IBCBB1*
   PRCASV("MEDCA" 
                IBCBB1!
   PRCASV("MEDURE" 
                IBCBB1!
   PRCASV("PAT" IBCBB1*
   PRCASVC      IBCCC2!
   PRCAT        IBCCC2!
   PROCA        IBCU75~
   PROCB        IBCU75~
   PROCMSG      IBCBB13*~
   PROCMSG(1    IBCBB13*
   PROCNUM      IBCBB13~
   PROVS        IBJPS4~
   PROVS(       IBJPS4*
   PRSEQ        IBCEU1*~
   PRV          IBCEU5*~
   PRVFUN       IBCBB12~
   PRVFUN(      IBCBB12
   PRVFUN("CNT" IBCBB12*
   PRVFUN(2     IBCBB12*
   PRVFUN(3     IBCBB12*
   PRVFUN(7     IBCBB12*
   PRVZ         IBJPS4~
   PRVZ(        IBJPS4*
   PRZ          IBCEU1*~
   PSAMNT       IBCEF11*~
   PSPID        IBCEF11*~
   PT           IBTUBO3*~
   PTF          IBCBB1*~,IBTUBOU~
   PTP          IBJPS3*~
   PTPP         IBJPS3*~
   PTPSTR       IBJPS2*~
   PTRESP       IBCEU1*~
   PTWT         IBCEF31*~
   Q            IBCEF22*~,IBCEPTC2~
   Q0           IBCBB1*~,IBCEF22*~
   Q1           IBCEF22*~,IBCF23A~
   QQ           IBCEF22*~
   QUES         IBCEF31*~
   QUESNUM      IBCEF31*~
   QUIT         IBCEF31~,IBCU75*~
   R            IBCEU~
   RC           IBTUBOU*~
   RCCT         IBCEU1*~
   RCPC         IBCEU1*~
   RCREC        IBCEU1*~
   RCVRID       IBCEF2*~
   REC          IBCEF22~
   RECCT        IBCEU1*~
   REN          IBCEU5*~
   RESPTYP      IBCEF31*~
   RESULT       IBCBB13*~,IBCEU1*~
   RESULTS      IBCEU1*~
   RETIEN       IBJPS8!~,IBY608PO!~
   RIEN         IBJPS7*~,IBJPS8*~
   RIENS        IBJPS7*~
   RLNK         IBCEF22~
   RNAME        IBY608PO*~
   ROIERR       IBCBB1*~
   RRDT         IBCU75*~
   RTN          IBCU7*~,IBCU7*~,IBCU7*
   RTYDATA      IBJPS7~
   RTYDATA(     IBJPS7
   RTYDSC       IBJPS8~
   RTYPE        IBJPS7*~
>> S            IBCU7*
   SEL          IBJPS2~
   SEQ          IBCEF2~,IBCEF31*~,IBCEU1*~
   SEQ1         IBCEF2~
   SEQLINE      IBCEU1*~
   SITE         IBY608PO*~
   SITENAME     IBY608PO*~
   SITENO       IBY608PO*~
   SIZE         IBCEFG7*~
   SNF          IBCEF2*~
   SPACES       IBY608PO*~
   SSN          IBTUBO3*~
   ST           IBCEPTC2*~,IBJPS3*~
   START        IBCNSC01*~,IBCNSC01*~,IBCNSC01*~
   STATE        IBJPS3*~,IBY608PO*~
   STATION      IBY608PO*~
   STIEN        IBJPS3*~
   STOP         IBJPS7*~
   STR          IBJPS2~,IBTUBO~,IBTUBOU~
   SUB          IBCEF2~
   SUBJ         IBY608PO*~
   SUM          IBCBB13*~
   SYN          IBCNSC01*~
   SYNOI        IBCNSC01*~
   T            IBTUBOU~
   TAG          IBCU75~,IBY608PR*~
   TAGLN        IBY608PR*~
   TDY          IBCU75*~
   THERPYDT     IBCU75*~
   TITLE        IBCNSC01*~
   TM           IBCEU*~
   TMP          IBTUBO3~
   TMP(         IBTUBO3*
   TOT          IBCEF22*~
   TOTAL        IBY608PO*~
   TRANS        IBY608PO*~
   TRANSCD      IBY608PO~
   TRANSMIT     IBY608PO*~
   TRUNC        IBCEPTC2~
   TTL          IBJPS2~
   U            IBCBB1,IBCBB1,IBCBB12,IBCBB13,IBCCC2,IBCE837B,IBCEF11,IBCEF11,IBCEF2,IBCEF2,IBCEF22,IBCEF22,IBCEF31,IBCEFG7
                IBCEPTC2,IBCEPTC3,IBCEU,IBCEU,IBCEU1,IBCEU1,IBCEU3,IBCEU3,IBCEU5,IBCF23A,IBCF23A,IBCNSC01,IBCNSC01,IBCU7,IBCU75
                IBJPS,IBJPS2
                IBJPS2,IBJPS2,IBJPS3,IBJPS3,IBJPS4,IBTUBO,IBTUBO3,IBTUBOA,IBTUBOU,IBTUBUL,IBY608PO,IBY608PR,|dd350.8,|dd364.5
                |dd364.6,|dd364.6,|dd364.6,|dd364.7
   U8           IBCEU3~
   UNIT         IBCEF22*~
   UNTS         IBCEF22*~
>> UPCT         IBCU75*
   VA           IBCCC2!
   VADM         IBCCC2!,IBTUBO3~
   VADM(2       IBTUBO3
   VAEL         IBCCC2!,IBTUBO3~
   VAEL(1       IBTUBO3
   VAERR        IBCCC2!
   VAIN         IBCEF2~
   VAIN(1       IBCEF2
   VAIN(7       IBCEF2
   VAINDT       IBCEF2*~
   VAL          IBCBB13*~,IBCEF2*~,IBCEF31*~,IBCEU~,IBCU75~,IBTUBOU*~
>> VALMAR       IBJPS3,IBJPS4,IBJPS7,IBJPS8
   VALMBCK      IBCEPTC3*~,IBJPS*,IBJPS3*,IBJPS4*,IBJPS7*,IBJPS8*
>> VALMBG       IBCEPTC2*,IBCEPTC3*,IBJPS3*,IBJPS4*,IBJPS7*,IBJPS8*
   VALMCNT      IBCEPTC2*~,IBJPS3*,IBJPS4*,IBJPS7*,IBJPS8*
   VALMHDR      IBCEPTC2!,IBCEPTC3!~
   VALMHDR(1    IBCEPTC2*,IBJPS*,IBJPS4*
   VALMHDR(2    IBCEPTC2*
   VALMHDR(3    IBCEPTC2*
>> VALMLST      IBJPS3
>> VALMSG       IBJPS3*,IBJPS7*,IBJPS8*
   VALMY        IBCEPTC3~,IBJPS~,IBJPS7~,IBJPS8~
   VALMY(       IBCEPTC3,IBJPS,IBJPS7,IBJPS8
>> VC80         IBCEF11,IBCEF2
   VC80LN       IBCEF11*~,IBCEF22*~
   VC80REC      IBCEF22*~
   VC80SW       IBCEF2*~
   WTOLD        IBCU75~
   X            IBCBB1*~,IBCBB13*~,IBCCC2*!~,IBCEF11*~,IBCEF2*~,IBCEF22~,IBCEF31*~,IBCEPTC3~,IBCEU*~,IBCEU3~,IBCEU5*~,IBCU7*!~
                IBCU75*~,IBJPS*!,IBJPS2~,IBJPS3*~,IBJPS4*~,IBJPS7*~,IBJPS8*!~,IBTUBO*~,IBTUBO3*~,IBTUBOU*~,IBTUBUL*~,|dd350.8!
                |dd350.929*!
                |dd364.5*!,|dd364.6*!,|dd364.6*!,|dd364.6*!,|dd364.7!,|dd399.0304*!,|dd399.0304!,|dd399.6!
   X0           IBTUBO3*~
   X1           IBCCC2!,IBTUBO3*~,IBTUBOU*~
   X12CODE      IBCBB13*~
   X2           IBCCC2!,IBTUBOU*~
   X3           IBCCC2!
   X4           IBCCC2!
   XIEN         IBCF23A*~
   XMBODY       IBCEFG7*~
   XMDUZ        IBCEFG7*~,IBTUBUL*~
   XMINSTR      IBY608PO~
   XMINSTR("FROM" 
                IBY608PO*
   XMN          IBTUBUL*~
   XMSUB        IBTUBUL*~
   XMSUBJ       IBCEFG7*~
   XMTEXT       IBTUBUL*~
   XMTO         IBCEFG7~,IBY608PO~
   XMTO(        IBCEFG7*
   XMTO("VHAeBillingRR@va.gov" 
                IBY608PO*
   XMY          IBTUBUL!~
   XMY(         IBTUBUL*
   XMY("G."     IBTUBUL*
   XMZ          IBCEFG7,IBTUBUL~
>> XQORNOD(0    IBCEPTC3,IBJPS,IBJPS7,IBJPS8
   XTP          IBTUBO3*~
   XX           IBCEU1*~
   XY           IBTUBOU~
   Y            IBCCC2!~,IBCEF11~,IBCEF2*~,IBCEFG7~,IBCEPTC3*~,IBCEU~,IBCEU3~,IBCEU5~,IBCU7*!~,IBCU7*!~,IBCU7,IBCU7,IBCU75*~,IBJPS!
                IBJPS3*~,IBJPS4*~,IBJPS7~,IBJPS8!~,IBTUBO~,IBTUBO3~,IBTUBOU*~,IBY608PR~,|dd350.929,|dd364.5*!,|dd364.6!,|dd364.7*
                |dd399.0304
   Y(0          |dd364.5*,|dd364.6*
   Y(1          |dd364.5*,|dd364.6*
   Y(101        |dd364.6*
   Y(102        |dd364.6*
   Y1           IBTUBOU*~
   Z            IBCBB1*!~,IBCCC2*~,IBCE837B*~,IBCEF11*~,IBCEF2*~,IBCEF2*~,IBCEF22*~,IBCEF31*~,IBCEF31*~,IBCEFG7*~,IBCEPTC2*~
                IBCEPTC3*~,IBCEU*~,IBCEU1*~,IBCEU1~,IBCEU3*~,IBCEU3,IBCEU5*~,IBCF23A*~,IBCU7*!~,IBCU75*~,IBJPS2*~,IBJPS3*~,IBJPS4~
                IBJPS7*~
                IBJPS8*~,IBTUBOU*~
   Z(           IBCBB1*
   Z(4          IBJPS4
   Z0           IBCBB1*~,IBCCC2*~,IBCE837B*~,IBCEF11~,IBCEF2*~,IBCEF22*~,IBCEFG7*~,IBCEPTC3*~,IBCEU1~,IBCEU3*~,IBCEU5*~,IBCF23A*~
                IBCU7*~,IBJPS2*~,|dd364.6*~,|dd364.7*~
   Z1           IBCBB1*~,IBCEF11~,IBCEF2*~,IBCEF22*~,IBCEF31*~,IBCEFG7*,IBCEPTC3*~,IBCEU5~,IBCF23A*~,|dd364.6*~,|dd364.7*~
   Z2           IBCBB1*~,IBCEF22~,IBCEFG7*,|dd364.6*~,|dd364.7*~
   Z3           |dd364.6*~
   ZE           IBCBB1*~
   ZERR         IBJPS4~
   ZTDESC       IBCEFG7*~,IBTUBO*!
   ZTDTH        IBCEFG7*~,IBTUBO*!
   ZTIO         IBCEFG7*!~,IBTUBO*
>> ZTQUEUED     IBCEFG7,IBTUBO3,IBTUBOA
   ZTREQ        IBCEFG7*~,IBTUBOA*
   ZTRTN        IBCEFG7*~,IBTUBO*!
   ZTSAVE       IBCEFG7~,IBTUBO!
   ZTSAVE("IB*" IBCEFG7*,IBTUBO*
   ZTSAVE("^TMP(""IBNOT"",$J)" 
                IBCEFG7*
   ZTSAVE("^TMP(""IBNOT"",$J," 
                IBCEFG7*
   ZTSAVE("^TMP(""IBRESUBMIT"",$J)" 
                IBCEFG7*
   ZTSAVE("^TMP(""IBRESUBMIT"",$J," 
                IBCEFG7*
   ZTSAVE("^TMP(""IBSELX"",$J)" 
                IBCEFG7*
   ZTSAVE("^TMP(""IBSELX"",$J," 
                IBCEFG7*
   ZTSAVE("^XTMP(IBFTYPE,$J," 
                IBCEFG7*
   ZTSK         IBCEFG7~,IBTUBO!
>> ZTSTOP       IBTUBO3*
   ZX           IBCEF22*~

Global Variables
   ^DD(                IBCEFG7,|dd364.5,|dd364.6
   ^DD("DD"            IBCU7
   ^DD(1               |dd364.5
   ^DD(353             |dd364.6
   ^DD(364.5           |dd364.5,|dd364.7
   ^DD(364.6           |dd364.6
   ^DD(399             IBCEFG7
   ^DG(40.8            IBCBB1,IBCU7,IBTUBO3
   ^DGCR(399           IBCBB1,IBCBB12,IBCBB12,IBCBB13,IBCCC2*,IBCCC2*!,IBCCC2*,IBCEF11,IBCEF2,IBCEF22,IBCEF31,IBCEFG7,IBCEPTC2
                       IBCEPTC3,IBCEU,IBCEU1,IBCEU3,IBCEU5,IBCF23A,IBCU7*,IBCU75*,IBJPS3,IBJPS4,IBTUBOU
   ^DGCR(399.1         IBCEU,IBTUBOU
   ^DGCR(399.2         IBCEF22,IBCF23A,IBJPS2
   ^DGCR(399.3         IBCBB1,IBCEF2,IBCEU3,IBTUBO,IBTUBOA
   ^DGPM(              IBCEF2,IBTUBOU
   ^DGPM("APTT1"       IBTUBOA
   ^DGPT(              IBCBB1,IBTUBOU
   ^DIC(               |dd364.5
   ^DIC(36             IBCBB1,IBCEF2,IBCEF31,IBCNSC01,IBTUBO3,IBY608PO
   ^DIC(4              IBCBB1
   ^DIC(5              IBCEPTC2,IBCNSC01
   ^DIC(8              IBTUBOU
   ^DPT(               IBCBB1,IBCEPTC2,IBCEU,IBTUBOU
   ^IBA("364."         IBY608PR
   ^IBA(355.3          IBCBB1,IBCEF31
   ^IBA(355.93         IBCBB1,IBCEU
   ^IBA(362.3          IBCEF11,IBCEF2,IBCU7
   ^IBA(362.4          IBCEF22
   ^IBA(362.5          IBCEF22
   ^IBA(364            IBCEPTC2,IBCEPTC3,IBCF23A
   ^IBA(364.1          IBCEF11,IBCEPTC2
   ^IBA(364.5          IBCEFG7,|dd364.5*!,|dd364.7
   ^IBA(364.6          |dd364.6*!,|dd364.6*!,|dd364.6,|dd364.7
   ^IBA(364.7          IBCEFG7,|dd364.7*!
   ^IBE(350.8          IBY608PR,|dd350.8*!
   ^IBE(350.9          IBCBB1,IBCE837B,IBCU7,IBJPS2,IBJPS3,IBJPS4,IBJPS7,IBJPS8,IBTUBO,IBTUBUL,IBY608PO,|dd350.929*!
   ^IBE(353            IBCE837B,IBCEFG7,IBTUBO,|dd364.6,|dd364.7
   ^IBE(353.1          IBCF23A
   ^IBE(353.2          IBCF23A,IBCU7
   ^IBE(353.3          IBCEU3
   ^IBE(355.2          IBCBB1
   ^IBE(356.19         IBTUBOA,IBTUBOU
   ^IBE(356.6          IBTUBOA
   ^IBE(365.12         IBCNSC01
   ^IBE(399.6          IBCBB13,IBCU75,|dd399.6*!
   ^IBM(361.1          IBCBB1,IBCCC2,IBCEPTC3,IBCEU1
   ^IBT(356            IBTUBOA,IBTUBOU
   ^PRCA(430.3         IBCEPTC2
   ^SC(                IBTUBOU
   ^TMP(               IBY608PO*!
   ^TMP("DCX"          IBCEF2*
   ^TMP("DILIST"       IBCEU,IBTUBO!
   ^TMP("IBCNSC"       IBCNSC01
   ^TMP("IBEDI_TEST_BATCH"
                       IBCEPTC3*!
   ^TMP("IBJPS"        IBJPS!,IBJPS2*
   ^TMP("IBJPSAX"      IBJPS!,IBJPS2*
   ^TMP("IBLIST"       IBCEU*
   ^TMP("IBONE"        IBCEPTC3!
   ^TMP("IBQONE"       IBCEFG7
   ^TMP("IBRCBOLD"     IBCEPTC3*!
   ^TMP("IBRESUBMIT"   IBCE837B,IBCEF11,IBCEFG7*,IBCEPTC3*!
   ^TMP("IBSELX"       IBCEFG7,IBCEPTC3*!
   ^TMP("IBSKIPPED"    IBCEPTC3*!
   ^TMP("IBTX"         IBCEU3
   ^TMP("IBX"          IBCEFG7*!
   ^TMP("IBXDATA"      IBCEFG7!
   ^TMP("IBXEDIT"      IBCEFG7!
   ^TMP("IBXSAVE"      IBCEF11*,IBCEF2*
   ^TMP("IBXTXMT"      IBCEFG7*!
   ^TMP("IB_PREV_CLAIM"IBCEPTC2
   ^TMP("IB_PREV_CLAIM_BATCH"
                       IBCEPTC2*!,IBCEPTC3*!
   ^TMP("IB_PREV_CLAIM_LIST"
                       IBCEPTC2*!,IBCEPTC3*
   ^TMP("IB_PREV_CLAIM_LIST_DX"
                       IBCEPTC2*!,IBCEPTC3
   ^TMP("IB_PREV_CLAIM_SELECT"
                       IBCEPTC2!,IBCEPTC3*!
   ^TMP($J             IBCBB1,IBCEF11*!,IBCEF2*,IBCEF22!,IBTUBO*!,IBTUBO3,IBTUBOA!,IBTUBUL
   ^UTILITY($J         IBCU7*
   ^VA(200             IBCBB1
   ^XMB("NETNAME"      IBTUBUL,IBY608PO
   ^XMB(3.8            IBTUBUL
   ^XTMP(              IBCEFG7!

Naked Globals
   ^(           IBCBB1,IBCCC2,IBCEF11,IBCEF22,IBCEFG7*,IBCEPTC3,IBCEU,IBCEU1,IBCEU5,IBCF23A,IBCU7
   ^("AUX"      IBCCC2,IBCF23A
   ^("C"        IBCCC2
   ^("DEN"      IBCF23A
   ^("EXT"      IBCEFG7
   ^("FPOST"    IBCEFG7
   ^("FPRE"     IBCEFG7
   ^("OUT"      IBCEFG7
   ^("U"        IBCEF11,IBCU7
   ^("U1"       IBCEF11,IBCEU
   ^("UF2"      IBCEU
   ^("VET"      IBTUBOU
   ^($J         IBCEF11
   ^(0          IBCCC2,IBCEF11,IBCEU,IBCEU3,IBCEU5,IBCU7,IBTUBOA,|dd350.8,|dd364.5*,|dd364.6*,|dd364.6*,|dd364.7
   ^(1          IBCCC2,IBCF23A,IBCU7,|dd364.5*
   ^(2          IBCCC2,IBCE837B,IBCEFG7,|dd364.6
   ^(3          IBCBB1,IBCNSC01

Cache Objects
   NONE

Marked Items
   $T(@FORM     IBCEF31
   $T(@IBSET    IBJPS
   $T(@TAG      IBY608PR
   $T(@TAGLN    IBY608PR
   $T(CPTCD+I   IBY608PO
   $T(HLPTXT+IBZIBCEU5

Routine             Invokes:
   IBCBB1       $$EXTERNAL^DILFD,$$GET1^DIQ,$$ACCK^IBCBB11,$$AMBCK^IBCBB11,$$COBAMT^IBCBB11,$$COBMRA^IBCBB11,$$COBSEC^IBCBB11
                $$LNACCK^IBCBB11,$$LNNDCCK^IBCBB11,$$LNTMCK^IBCBB11,$$MULTDIV^IBCBB11,$$ROICHK^IBCBB11,$$TMCK^IBCBB11
                NPICHK^IBCBB11,RXNPI^IBCBB11
                TAXCHK^IBCBB11,VALNDC^IBCBB11,WARN^IBCBB11,$$OPPROVCK^IBCBB12,LNPROV^IBCBB12,$$CMNCHK^IBCBB13,$$IBLNTOT^IBCBB13
                $$IBMICN^IBCBB13,$$IBMPID^IBCBB13,$$IBPRV3^IBCBB13,$$IBRCCHK^IBCBB13,$$IBSYEI^IBCBB13,EDITMRA^IBCBB3,$$COBN^IBCEF
                $$FT^IBCEF
                $$INPAT^IBCEF,$$INSPRF^IBCEF,F^IBCEF,$$ISRX^IBCEF1,$$TOB^IBCEF1,$$CURR^IBCEF2,$$EDIACTV^IBCEF4,$$SECIDCK^IBCEF74
                PROVINF^IBCEF74,MRACALC^IBCEMU2,$$GETTYP^IBCEP2A,$$BILLRATE^IBCRU3,$$MCRONBIL^IBEFUNC,$$MCRWNR^IBEFUNC
                $$NEEDMRA^IBEFUNC
                $$REQMRA^IBEFUNC,$$WNRBILL^IBEFUNC,$$FY^IBOUTL,$$STA^PRCAFN,$$UP^XLFSTR
   IBCBB12      WARN^IBCBB11,$$FT^IBCEF
   IBCBB13      $$GET1^DIQ,WARN^IBCBB11,$$INSPRF^IBCEF,$$CMNDATA^IBCEF31
   IBCCC2       FILE^DICN,DIE,IX1^DIK,RECALL^DILFD,FORCEPRT^IBCAPP,IBCB1,IBCCC3,COPYB^IBCDC,$$COB^IBCEF,$$COBN^IBCEF,$$FT^IBCEF
                $$GETNPI^IBCEF73A,$$CHK^IBCEMU1,FTPRV^IBCEU5,BILL^IBCRBC,IBCSC1,IBCSCU,CPTMOD26^IBCU73,PROC^IBCU7A
                $$GETSPEC^IBEFUNC,$$MCRWNR^IBEFUNC
                $$REQMRA^IBEFUNC,$$MOD^ICPTMOD
   IBCE837B     FORM^IBCEFG7,$$FMADD^XLFDT,$$NOW^XLFDT
   IBCEF11      FILE^DICN,DIK,$$GET1^DIQ,$$FT^IBCEF,F^IBCEF,HOS^IBCEF2,ID^IBCEF2,$$DOLLAR^IBCEFG1,ALLIDS^IBCEFP,PSID^IBCEFP
                $$SUB1OK^IBCEP8A,COMBO^IBCEU2,COBLINE^IBCEU6,$$DATE^IBCF2,RVCE^IBCF23,SET^IBCSC5A,ZERO^IBRXUTL,$$SITE^VASITE
   IBCEF2       $$GET1^DIQ,$$ICD9VER^IBACSV,$$COB^IBCEF,$$COBN^IBCEF,$$FT^IBCEF,$$FINDINS^IBCEF1,$$REQ^IBCEF1,$$RECVR^IBCEF2
                ID^IBCEF2,$$COID^IBCEF21,$$ESGHPNL^IBCEF21,$$ESGHPST^IBCEF21,ADMDT^IBCEF21,DISDT^IBCEF21,HOS^IBCEF22,VC80I^IBCEF22
                $$MRASEC^IBCEF4
                $$TXMT^IBCEF4,SETGBL^IBCEFG,$$DOLLAR^IBCEFG1,$$MCRONBIL^IBEFUNC,$$MCRWNR^IBEFUNC,$$WNRBILL^IBEFUNC,INP^VADPT
                $$UP^XLFSTR
   IBCEF22      $$COBN^IBCEF,$$INPAT^IBCEF,F^IBCEF,COMBO^IBCEU2,COBLINE^IBCEU6,SET^IBCSC5A,$$PINB^IBCSC5B,SET^IBCSC5B
                $$GETMOD^IBEFUNC,ZERO^IBRXUTL,$$FMTE^XLFDT
   IBCEF31      $$GET1^DIQ,$$ICD9^IBACSV,$$COBN^IBCEF,$$FT^IBCEF,$$POLICY^IBCEF,F^IBCEF,OUTPT^IBCEF11,$$FORMAT^IBCEF3,SETGBL^IBCEFG
                $$DT^IBCEFG1,$$MCRWNR^IBEFUNC,$$WNRBILL^IBEFUNC
   IBCEFG7      %ZIS,HOME^%ZIS,%ZISC,%ZTLOAD,DIR,$$EXTRACT^IBCEFG,$$NOW^XLFDT,$$UP^XLFSTR,SENDMSG^XMXAPI
   IBCEPTC2     $$EXTERNAL^DILFD,$$INPAT^IBCEF,F^IBCEF,HDR^IBCEPTC1,$$FO^IBCNEUT1,$$BILL^RCJIBFN2,CLEAR^VALM1,$$FMTE^XLFDT
   IBCEPTC3     HOME^%ZIS,DIC,DIK,$$GET1^DIQ,DIR,$$ADDTBILL^IBCB1,EN1^IBCE837B,$$COBN^IBCEF,$$LAST364^IBCEF4,UPDEDI^IBCEM
                DEVSEL^IBCEPTC,RPT^IBCEPTC1,FULL^VALM1,EN^VALM2
   IBCEU        %DT,EN^DDIOL,$$TOB^IBCBB,$$COBN^IBCEF,$$FT^IBCEF,$$INPAT^IBCEF,F^IBCEF,$$DEFID^IBCEF74,ALLIDS^IBCEFP
                $$FILTERP^IBCSC10H,$$MCRONBIL^IBEFUNC,$$WNRBILL^IBEFUNC,$$EXPAND^IBTRE,$$GET^XUA4A72,$$ESBLOCK^XUSESIG1
   IBCEU1       $$PTRESPI^IBCECOB1,$$COB^IBCEF,$$COBN^IBCEF,$$FT^IBCEF,ALLPAYID^IBCEF2,ID^IBCEF2,$$DOLLAR^IBCEFG1,$$SPLIT^IBCEMU1
                $$MCRONBIL^IBEFUNC
   IBCEU3       $$GET1^DIQ,DIR,$$COBCT^IBCEF,$$FT^IBCEF,F^IBCEF,B24^IBCEF3,$$CFIDS^IBCEF77,$$DOL^IBCEF77,$$SPEC^IBCEU,GETPRV^IBCEU
                $$MCRSPEC^IBCEU4,$$DATE^IBCF2,$$FO^IBCNEUT1,$$MCRONBIL^IBEFUNC,$$MODLST^IBEFUNC,$$SITE^VASITE
   IBCEU5       HOME^%ZIS,FILE^DIE,FDA^DILF,DIR,$$FT^IBCEF,$$INPAT^IBCEF,$$CKPROV^IBCEU,$$CRED^IBCEU,$$PRVOK^IBCEU,GETPRV^IBCEU
                $$EXPAND^IBTRE
   IBCF23A      $$GET1^DIQ,$$PRCD^IBCEF1,$$DATE^IBCF23,$$GETMOD^IBEFUNC,$$INSTALDT^XPDUTL
   IBCNSC01     $$EXTERNAL^DILFD,$$GET1^DIQ,$$HOD^IBCNHUT1,$$HPD^IBCNHUT1,SET^IBCNSP,$$FTFN^IBCNSU31,$$EXPAND^IBTRE,$$FMTE^XLFDT
   IBCU7        %DT,EN^DDIOL,DIC,YN^DICN,DIE,DIK,D^DIQ,DT^DIQ,DIR,$$BDATE^IBACSV,$$CPTACT^IBACSV,$$ICD0ACT^IBACSV,$$FT^IBCEF
                $$INPAT^IBCEF,VFILE1^IBCOPV1,$$ITMUNIT^IBCRU4,$$RXLINK^IBCSC5C,$$PRCNM^IBCSCH1,$$OPV^IBCU41,$$OPV2^IBCU41
                $$PRCDIV^IBCU71
                ADDCPT^IBCU71,DX^IBCU72,ORAL^IBCU72,$$OBSHOUR^IBCU74,DATA^IBCU74,SROMIN^IBCU74,CMN^IBCU75,EN^IBCU7B
                $$GETMOD^IBEFUNC,$$GETSPEC^IBEFUNC,$$CMNPRMT^IBJPS8,$$DAT1^IBOUTL,$$CPT^ICPTCOD,$$CPTD^ICPTCOD,$$FMTE^XLFDT
   IBCU75       DIE,$$FMTE^DILIBF,$$HTFM^DILIBF,DIR,$$CMNDATA^IBCEF31,CMNDEX^IBCEF31
   IBJPS        DIE,$$ICD9SYS^IBACSV,INIT^IBJPS,BLD^IBJPS1,EN^IBJPS3,EN^IBJPS5,EN^IBJPS6,EN^IBJPS8,EN^VALM,CLEAR^VALM1,FULL^VALM1
                EN^VALM2,DISP^XQORM1
   IBJPS2       $$EXTERNAL^DILFD,$$ICD9SYS^IBACSV,$$PTG^IBJPS3,$$DATE^IBJU1,$$EXSET^IBJU1,$$EXPAND^IBTRE,$$SETSTR^VALM1
                CNTRL^VALM10
   IBJPS3       DIC,$$FIND1^DIC,DIE,FILE^DIE,DIK,$$GET1^DIQ,DIR,$$NOPUNCT^IBCEF,$$B^IBCEF79,GETBP^IBCEF79,$$GETFAC^IBCEP8
                $$GETPROV^IBJPS4,$$NODE^IBJPS4,$$TRICARE^IBJPS4,GETDIVS^IBJPS4,EN^VALM,$$SETSTR^VALM1,CLEAR^VALM1,FULL^VALM1
                CLEAN^VALM10,SET^VALM10
                $$PRIM^VASITE,$$SITE^VASITE,$$UP^XLFSTR,DISP^XQORM1,$$WHAT^XUAF4,$$NPI^XUSNPI
   IBJPS4       $$FIND1^DIC,LIST^DIC,FILE^DICN,DIE,CLEAN^DILF,$$GET1^DIQ,GETS^DIQ,DIR,$$GETDFLT^IBJPS3,$$ISDFLT^IBJPS3,$$SET^IBJPS3
                EN^VALM,$$SETSTR^VALM1,CLEAR^VALM1,FULL^VALM1,CLEAN^VALM10,SET^VALM10,DISP^XQORM1
   IBJPS7       DIC,UPDATE^DIE,DIK,GETS^DIQ,EN^VALM,$$SETSTR^VALM1,CLEAR^VALM1,FULL^VALM1,PAUSE^VALM1,CLEAN^VALM10,SET^VALM10
                EN^VALM2,DISP^XQORM1
   IBJPS8       UPDATE^DIE,DIK,GETS^DIQ,DIR,$$CMNDATA^IBCEF31,EN^VALM,$$SETSTR^VALM1,CLEAR^VALM1,FULL^VALM1,CLEAN^VALM10,SET^VALM10
                EN^VALM2,DISP^XQORM1
   IBTUBO       %ZIS,HOME^%ZIS,%ZTLOAD,DIC,FIND^DIC,DT^DICRW,DIR,$$MLTP^IBJD,$$LDATE^IBJDE,$$M1^IBJDE,$$M2^IBJDE,$$M3^IBJDE
                $$DAT2^IBOUTL,IBTUBOA,DT1^IBTUBOU
   IBTUBO3      $$S^%ZTLOAD,$$BIL^DGMTUB,$$GET1^DIQ,DIR,ALL^IBCNS1,$$DAT2^IBOUTL,BULL^IBTUBUL,DEM^VADPT,ELIG^VADPT,KVA^VADPT
                KVAR^VADPT,$$HTE^XLFDT
   IBTUBOA      %ZISC,$$GET1^DIQ,$$INSURED^IBCNS1,E^IBJDE,CLOSE^IBSDU,DQ^IBTUBAV,OPT^IBTUBO1,INPT^IBTUBO2,RX^IBTUBO2,REPORT^IBTUBO3
                $$COV^IBTUBOU,$$INPAVG^IBTUBOU,$$MCCFCKX^IBTUBOU,$$NCCL^IBTUBOU,$$PTCHK^IBTUBOU,LD^IBTUBOU,XTRACT^IBTUBOU
   IBTUBOU      C^%DTC,DIE,$$GET1^DIQ,DIR,$$BILLCK^IBAMTEDU,$$PTCOV^IBCNSU3,$$M1^IBJDE,E^IBJDE,$$DAT2^IBOUTL,$$DAT3^IBOUTL
                $$SCE^IBSDU,SCAN^IBSDU,GETGEN^SDOE
   IBTUBUL      $$GET1^DIQ,$$DAT1^IBOUTL,$$DAT2^IBOUTL,$$INPAVG^IBTUBOU,$$SITE^VASITE,XMD
   IBY608PO     $$FIND1^DIC,UPDATE^DIE,CLEAN^DILF,$$GET1^DIQ,$$SITE^VASITE,$$FMTE^XLFDT,$$NOW^XLFDT,SENDMSG^XMXAPI,BMES^XPDUTL
                MES^XPDUTL,$$PROD^XUPROD
   IBY608PR     DIK
   |dd350.8     DIM
   |dd350.929   DIC
   |dd364.5     DICR,DIM,Y^DIQ
   |dd364.6     DICR,$$DUP^IBCEFG0
   |dd364.7     DIM,Y^DIQ
   |dd399.0304  %DT

Routine             is Invoked by:
   ^%DT                IBCEU,IBCU7,|dd399.0304
   C^%DTC              IBTUBOU
   ^%ZIS               IBCEFG7,IBTUBO
   HOME^%ZIS           IBCEFG7,IBCEPTC3,IBCEU5,IBTUBO
   ^%ZISC              IBCEFG7,IBTUBOA
   ^%ZTLOAD            IBCEFG7,IBTUBO
   $$S^%ZTLOAD         IBTUBO3
   EN^DDIOL            IBCEU,IBCU7
   $$BIL^DGMTUB        IBTUBO3
   ^DIC                IBCEPTC3,IBCU7,IBJPS3,IBJPS7,IBTUBO,|dd350.929
   $$FIND1^DIC         IBJPS3,IBJPS4,IBY608PO
   FIND^DIC            IBTUBO
   LIST^DIC            IBJPS4
   FILE^DICN           IBCCC2,IBCEF11,IBJPS4
   YN^DICN             IBCU7
   ^DICR               |dd364.5,|dd364.6
   DT^DICRW            IBTUBO
   ^DIE                IBCCC2,IBCU7,IBCU75,IBJPS,IBJPS3,IBJPS4,IBTUBOU
   FILE^DIE            IBCEU5,IBJPS3
   UPDATE^DIE          IBJPS7,IBJPS8,IBY608PO
   ^DIK                IBCEF11,IBCEPTC3,IBCU7,IBJPS3,IBJPS7,IBJPS8,IBY608PR
   IX1^DIK             IBCCC2
   CLEAN^DILF          IBJPS4,IBY608PO
   FDA^DILF            IBCEU5
   $$EXTERNAL^DILFD    IBCBB1,IBCEPTC2,IBCNSC01,IBJPS2
   RECALL^DILFD        IBCCC2
   $$FMTE^DILIBF       IBCU75
   $$HTFM^DILIBF       IBCU75
   ^DIM                |dd350.8,|dd364.5,|dd364.7
   $$GET1^DIQ          IBCBB1,IBCBB13,IBCEF11,IBCEF2,IBCEF31,IBCEPTC3,IBCEU3,IBCF23A,IBCNSC01,IBJPS3,IBJPS4,IBTUBO3,IBTUBOA,IBTUBOU
                       IBTUBUL,IBY608PO
   D^DIQ               IBCU7
   DT^DIQ              IBCU7
   GETS^DIQ            IBJPS4,IBJPS7,IBJPS8
   Y^DIQ               |dd364.5,|dd364.7
   ^DIR                IBCEFG7,IBCEPTC3,IBCEU3,IBCEU5,IBCU7,IBCU75,IBJPS3,IBJPS4,IBJPS8,IBTUBO,IBTUBO3,IBTUBOU
   $$BDATE^IBACSV      IBCU7
   $$CPTACT^IBACSV     IBCU7
   $$ICD0ACT^IBACSV    IBCU7
   $$ICD9^IBACSV       IBCEF31
   $$ICD9SYS^IBACSV    IBJPS,IBJPS2
   $$ICD9VER^IBACSV    IBCEF2
   $$BILLCK^IBAMTEDU   IBTUBOU
   FORCEPRT^IBCAPP     IBCCC2
   ^IBCB1              IBCCC2
   $$ADDTBILL^IBCB1    IBCEPTC3
   $$TOB^IBCBB         IBCEU
   $$ACCK^IBCBB11      IBCBB1
   $$AMBCK^IBCBB11     IBCBB1
   $$COBAMT^IBCBB11    IBCBB1
   $$COBMRA^IBCBB11    IBCBB1
   $$COBSEC^IBCBB11    IBCBB1
   $$LNACCK^IBCBB11    IBCBB1
   $$LNNDCCK^IBCBB11   IBCBB1
   $$LNTMCK^IBCBB11    IBCBB1
   $$MULTDIV^IBCBB11   IBCBB1
   $$ROICHK^IBCBB11    IBCBB1
   $$TMCK^IBCBB11      IBCBB1
   NPICHK^IBCBB11      IBCBB1
   RXNPI^IBCBB11       IBCBB1
   TAXCHK^IBCBB11      IBCBB1
   VALNDC^IBCBB11      IBCBB1
   WARN^IBCBB11        IBCBB1,IBCBB12,IBCBB13
   $$OPPROVCK^IBCBB12  IBCBB1
   LNPROV^IBCBB12      IBCBB1
   $$CMNCHK^IBCBB13    IBCBB1
   $$IBLNTOT^IBCBB13   IBCBB1
   $$IBMICN^IBCBB13    IBCBB1
   $$IBMPID^IBCBB13    IBCBB1
   $$IBPRV3^IBCBB13    IBCBB1
   $$IBRCCHK^IBCBB13   IBCBB1
   $$IBSYEI^IBCBB13    IBCBB1
   EDITMRA^IBCBB3      IBCBB1
   ^IBCCC3             IBCCC2
   COPYB^IBCDC         IBCCC2
   EN1^IBCE837B        IBCEPTC3
   $$PTRESPI^IBCECOB1  IBCEU1
   $$COB^IBCEF         IBCCC2,IBCEF2,IBCEU1
   $$COBCT^IBCEF       IBCEU3
   $$COBN^IBCEF        IBCBB1,IBCCC2,IBCEF2,IBCEF22,IBCEF31,IBCEPTC3,IBCEU,IBCEU1
   $$FT^IBCEF          IBCBB1,IBCBB12,IBCCC2,IBCEF11,IBCEF2,IBCEF31,IBCEU,IBCEU1,IBCEU3,IBCEU5,IBCU7
   $$INPAT^IBCEF       IBCBB1,IBCEF22,IBCEPTC2,IBCEU,IBCEU5,IBCU7
   $$INSPRF^IBCEF      IBCBB1,IBCBB13
   $$NOPUNCT^IBCEF     IBJPS3
   $$POLICY^IBCEF      IBCEF31
   F^IBCEF             IBCBB1,IBCEF11,IBCEF22,IBCEF31,IBCEPTC2,IBCEU,IBCEU3
   $$FINDINS^IBCEF1    IBCEF2
   $$ISRX^IBCEF1       IBCBB1
   $$PRCD^IBCEF1       IBCF23A
   $$REQ^IBCEF1        IBCEF2
   $$TOB^IBCEF1        IBCBB1
   OUTPT^IBCEF11       IBCEF31
   $$CURR^IBCEF2       IBCBB1
   $$RECVR^IBCEF2      IBCEF2
   ALLPAYID^IBCEF2     IBCEU1
   HOS^IBCEF2          IBCEF11
   ID^IBCEF2           IBCEF11,IBCEF2,IBCEU1
   $$COID^IBCEF21      IBCEF2
   $$ESGHPNL^IBCEF21   IBCEF2
   $$ESGHPST^IBCEF21   IBCEF2
   ADMDT^IBCEF21       IBCEF2
   DISDT^IBCEF21       IBCEF2
   HOS^IBCEF22         IBCEF2
   VC80I^IBCEF22       IBCEF2
   $$FORMAT^IBCEF3     IBCEF31
   B24^IBCEF3          IBCEU3
   $$CMNDATA^IBCEF31   IBCBB13,IBCU75,IBJPS8
   CMNDEX^IBCEF31      IBCU75
   $$EDIACTV^IBCEF4    IBCBB1
   $$LAST364^IBCEF4    IBCEPTC3
   $$MRASEC^IBCEF4     IBCEF2
   $$TXMT^IBCEF4       IBCEF2
   $$GETNPI^IBCEF73A   IBCCC2
   $$DEFID^IBCEF74     IBCEU
   $$SECIDCK^IBCEF74   IBCBB1
   PROVINF^IBCEF74     IBCBB1
   $$CFIDS^IBCEF77     IBCEU3
   $$DOL^IBCEF77       IBCEU3
   $$B^IBCEF79         IBJPS3
   GETBP^IBCEF79       IBJPS3
   $$EXTRACT^IBCEFG    IBCEFG7
   SETGBL^IBCEFG       IBCEF2,IBCEF31
   $$DUP^IBCEFG0       |dd364.6
   $$DOLLAR^IBCEFG1    IBCEF11,IBCEF2,IBCEU1
   $$DT^IBCEFG1        IBCEF31
   FORM^IBCEFG7        IBCE837B
   ALLIDS^IBCEFP       IBCEF11,IBCEU
   PSID^IBCEFP         IBCEF11
   UPDEDI^IBCEM        IBCEPTC3
   $$CHK^IBCEMU1       IBCCC2
   $$SPLIT^IBCEMU1     IBCEU1
   MRACALC^IBCEMU2     IBCBB1
   $$GETTYP^IBCEP2A    IBCBB1
   $$GETFAC^IBCEP8     IBJPS3
   $$SUB1OK^IBCEP8A    IBCEF11
   DEVSEL^IBCEPTC      IBCEPTC3
   HDR^IBCEPTC1        IBCEPTC2
   RPT^IBCEPTC1        IBCEPTC3
   $$CKPROV^IBCEU      IBCEU5
   $$CRED^IBCEU        IBCEU5
   $$PRVOK^IBCEU       IBCEU5
   $$SPEC^IBCEU        IBCEU3
   GETPRV^IBCEU        IBCEU3,IBCEU5
   COMBO^IBCEU2        IBCEF11,IBCEF22
   $$MCRSPEC^IBCEU4    IBCEU3
   FTPRV^IBCEU5        IBCCC2
   COBLINE^IBCEU6      IBCEF11,IBCEF22
   $$DATE^IBCF2        IBCEF11,IBCEU3
   $$DATE^IBCF23       IBCF23A
   RVCE^IBCF23         IBCEF11
   $$FO^IBCNEUT1       IBCEPTC2,IBCEU3
   $$HOD^IBCNHUT1      IBCNSC01
   $$HPD^IBCNHUT1      IBCNSC01
   $$INSURED^IBCNS1    IBTUBOA
   ALL^IBCNS1          IBTUBO3
   SET^IBCNSP          IBCNSC01
   $$PTCOV^IBCNSU3     IBTUBOU
   $$FTFN^IBCNSU31     IBCNSC01
   VFILE1^IBCOPV1      IBCU7
   BILL^IBCRBC         IBCCC2
   $$BILLRATE^IBCRU3   IBCBB1
   $$ITMUNIT^IBCRU4    IBCU7
   ^IBCSC1             IBCCC2
   $$FILTERP^IBCSC10H  IBCEU
   SET^IBCSC5A         IBCEF11,IBCEF22
   $$PINB^IBCSC5B      IBCEF22
   SET^IBCSC5B         IBCEF22
   $$RXLINK^IBCSC5C    IBCU7
   $$PRCNM^IBCSCH1     IBCU7
   ^IBCSCU             IBCCC2
   $$OPV^IBCU41        IBCU7
   $$OPV2^IBCU41       IBCU7
   $$PRCDIV^IBCU71     IBCU7
   ADDCPT^IBCU71       IBCU7
   DX^IBCU72           IBCU7
   ORAL^IBCU72         IBCU7
   CPTMOD26^IBCU73     IBCCC2
   $$OBSHOUR^IBCU74    IBCU7
   DATA^IBCU74         IBCU7
   SROMIN^IBCU74       IBCU7
   CMN^IBCU75          IBCU7
   PROC^IBCU7A         IBCCC2
   EN^IBCU7B           IBCU7
   $$GETMOD^IBEFUNC    IBCEF22,IBCF23A,IBCU7
   $$GETSPEC^IBEFUNC   IBCCC2,IBCU7
   $$MCRONBIL^IBEFUNC  IBCBB1,IBCEF2,IBCEU,IBCEU1,IBCEU3
   $$MCRWNR^IBEFUNC    IBCBB1,IBCCC2,IBCEF2,IBCEF31
   $$MODLST^IBEFUNC    IBCEU3
   $$NEEDMRA^IBEFUNC   IBCBB1
   $$REQMRA^IBEFUNC    IBCBB1,IBCCC2
   $$WNRBILL^IBEFUNC   IBCBB1,IBCEF2,IBCEF31,IBCEU
   $$MLTP^IBJD         IBTUBO
   $$LDATE^IBJDE       IBTUBO
   $$M1^IBJDE          IBTUBO,IBTUBOU
   $$M2^IBJDE          IBTUBO
   $$M3^IBJDE          IBTUBO
   E^IBJDE             IBTUBOA,IBTUBOU
   INIT^IBJPS          IBJPS
   BLD^IBJPS1          IBJPS
   $$GETDFLT^IBJPS3    IBJPS4
   $$ISDFLT^IBJPS3     IBJPS4
   $$PTG^IBJPS3        IBJPS2
   $$SET^IBJPS3        IBJPS4
   EN^IBJPS3           IBJPS
   $$GETPROV^IBJPS4    IBJPS3
   $$NODE^IBJPS4       IBJPS3
   $$TRICARE^IBJPS4    IBJPS3
   GETDIVS^IBJPS4      IBJPS3
   EN^IBJPS5           IBJPS
   EN^IBJPS6           IBJPS
   $$CMNPRMT^IBJPS8    IBCU7
   EN^IBJPS8           IBJPS
   $$DATE^IBJU1        IBJPS2
   $$EXSET^IBJU1       IBJPS2
   $$DAT1^IBOUTL       IBCU7,IBTUBUL
   $$DAT2^IBOUTL       IBTUBO,IBTUBO3,IBTUBOU,IBTUBUL
   $$DAT3^IBOUTL       IBTUBOU
   $$FY^IBOUTL         IBCBB1
   ZERO^IBRXUTL        IBCEF11,IBCEF22
   $$SCE^IBSDU         IBTUBOU
   CLOSE^IBSDU         IBTUBOA
   SCAN^IBSDU          IBTUBOU
   $$EXPAND^IBTRE      IBCEU,IBCEU5,IBCNSC01,IBJPS2
   DQ^IBTUBAV          IBTUBOA
   OPT^IBTUBO1         IBTUBOA
   INPT^IBTUBO2        IBTUBOA
   RX^IBTUBO2          IBTUBOA
   REPORT^IBTUBO3      IBTUBOA
   ^IBTUBOA            IBTUBO
   $$COV^IBTUBOU       IBTUBOA
   $$INPAVG^IBTUBOU    IBTUBOA,IBTUBUL
   $$MCCFCKX^IBTUBOU   IBTUBOA
   $$NCCL^IBTUBOU      IBTUBOA
   $$PTCHK^IBTUBOU     IBTUBOA
   DT1^IBTUBOU         IBTUBO
   LD^IBTUBOU          IBTUBOA
   XTRACT^IBTUBOU      IBTUBOA
   BULL^IBTUBUL        IBTUBO3
   $$CPT^ICPTCOD       IBCU7
   $$CPTD^ICPTCOD      IBCU7
   $$MOD^ICPTMOD       IBCCC2
   $$STA^PRCAFN        IBCBB1
   $$BILL^RCJIBFN2     IBCEPTC2
   GETGEN^SDOE         IBTUBOU
   DEM^VADPT           IBTUBO3
   ELIG^VADPT          IBTUBO3
   INP^VADPT           IBCEF2
   KVA^VADPT           IBTUBO3
   KVAR^VADPT          IBTUBO3
   EN^VALM             IBJPS,IBJPS3,IBJPS4,IBJPS7,IBJPS8
   $$SETSTR^VALM1      IBJPS2,IBJPS3,IBJPS4,IBJPS7,IBJPS8
   CLEAR^VALM1         IBCEPTC2,IBJPS,IBJPS3,IBJPS4,IBJPS7,IBJPS8
   FULL^VALM1          IBCEPTC3,IBJPS,IBJPS3,IBJPS4,IBJPS7,IBJPS8
   PAUSE^VALM1         IBJPS7
   CLEAN^VALM10        IBJPS3,IBJPS4,IBJPS7,IBJPS8
   CNTRL^VALM10        IBJPS2
   SET^VALM10          IBJPS3,IBJPS4,IBJPS7,IBJPS8
   EN^VALM2            IBCEPTC3,IBJPS,IBJPS7,IBJPS8
   $$PRIM^VASITE       IBJPS3
   $$SITE^VASITE       IBCEF11,IBCEU3,IBJPS3,IBTUBUL,IBY608PO
   $$FMADD^XLFDT       IBCE837B
   $$FMTE^XLFDT        IBCEF22,IBCEPTC2,IBCNSC01,IBCU7,IBY608PO
   $$HTE^XLFDT         IBTUBO3
   $$NOW^XLFDT         IBCE837B,IBCEFG7,IBY608PO
   $$UP^XLFSTR         IBCBB1,IBCEF2,IBCEFG7,IBJPS3
   ^XMD                IBTUBUL
   SENDMSG^XMXAPI      IBCEFG7,IBY608PO
   $$INSTALDT^XPDUTL   IBCF23A
   BMES^XPDUTL         IBY608PO
   MES^XPDUTL          IBY608PO
   DISP^XQORM1         IBJPS,IBJPS3,IBJPS4,IBJPS7,IBJPS8
   $$GET^XUA4A72       IBCEU
   $$WHAT^XUAF4        IBJPS3
   $$PROD^XUPROD       IBY608PO
   $$ESBLOCK^XUSESIG1  IBCEU
   $$NPI^XUSNPI        IBJPS3

*****   END   *****


--- END ---
